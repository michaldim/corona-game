/*! For license information please see main.49c0884921f15df69b03.js.LICENSE.txt */
(()=>{"use strict";var e={16:(e,t,n)=>{e.exports=n.p+"favicon.ico"},52:(e,t,n)=>{e.exports=n.p+"figure1.svg"},660:(e,t,n)=>{e.exports=n.p+"figure10.svg"},101:(e,t,n)=>{e.exports=n.p+"figure11.svg"},389:(e,t,n)=>{e.exports=n.p+"figure12.svg"},36:(e,t,n)=>{e.exports=n.p+"figure13.svg"},304:(e,t,n)=>{e.exports=n.p+"figure14.svg"},803:(e,t,n)=>{e.exports=n.p+"figure15.svg"},103:(e,t,n)=>{e.exports=n.p+"figure16.svg"},834:(e,t,n)=>{e.exports=n.p+"figure17.svg"},648:(e,t,n)=>{e.exports=n.p+"figure18.svg"},787:(e,t,n)=>{e.exports=n.p+"figure19.svg"},74:(e,t,n)=>{e.exports=n.p+"figure2.svg"},411:(e,t,n)=>{e.exports=n.p+"figure20.svg"},691:(e,t,n)=>{e.exports=n.p+"figure3.svg"},559:(e,t,n)=>{e.exports=n.p+"figure4.svg"},863:(e,t,n)=>{e.exports=n.p+"figure5.svg"},571:(e,t,n)=>{e.exports=n.p+"figure6.svg"},982:(e,t,n)=>{e.exports=n.p+"figure7.svg"},290:(e,t,n)=>{e.exports=n.p+"figure8.svg"},840:(e,t,n)=>{e.exports=n.p+"figure9.svg"},51:(e,t,n)=>{e.exports=n.p+"stars.svg"}},t={};function n(s){var i=t[s];if(void 0!==i)return i.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var s=t.getElementsByTagName("script");s.length&&(e=s[s.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),(()=>{n(52),n(74),n(691),n(559),n(863),n(571),n(982),n(290),n(840),n(660),n(101),n(389),n(36),n(304),n(803),n(103),n(834),n(648),n(787),n(411),n(51),n(16);var e=document.querySelector("body"),t=document.querySelector("header"),s=document.querySelector(".cursor");document.addEventListener("mousemove",(function(e){s.setAttribute("style","top: "+(e.pageY+4)+"px; left: "+(e.pageX-5)+"px;")}));var i=document.querySelector("#circle"),r=0;[1,2,3,4,5,6].forEach((function(n){var s=document.createElement("div");s.classList.add("corona","axis"),s.setAttribute("id","axis"+n),e.insertBefore(s,i.nextSibling),s.style.transform="rotateZ(".concat(r,"deg)"),r+=30;var o=document.createElement("div");o.classList.add("corona","tinyCircleContainer"),o.setAttribute("id","tinyCircleContainer"+n),e.insertBefore(o,t),o.style.top="calc(30% - 110px)",o.style.bottom="calc(70% + 110px)",o.style.right="calc(50% + ".concat(10+22*(n-1),"px)"),o.style.left="calc(50% - ".concat(10+22*(n-1),"px)");var a=30*(n-1);o.style.transform="rotateZ(".concat(a,"deg)");var c=document.createElement("div"),l=document.createElement("div");c.classList.add("corona","tinyCircle"),c.setAttribute("id","tinyCircle"+n),c.style.top="0",c.style.right="0",l.classList.add("corona","tinyCircle"),l.setAttribute("id","tinyCircle"+(n+6)),l.style.top="calc(100% - 24px)",l.style.right="0";var u=document.querySelector("#tinyCircleContainer".concat(n));u.append(c),u.append(l)}));var o=document.createElement("div");o.classList.add("eyes","corona"),document.querySelector("#tinyCircleContainer1").append(o);var a=document.createElement("div"),c=document.createElement("div");a.classList.add("corona","eyeShades"),c.classList.add("corona","eyeShades"),a.setAttribute("id","topEyeshade"),c.setAttribute("id","bottomEyeshade"),document.querySelector("#tinyCircleContainer1").append(a),document.querySelector("#tinyCircleContainer1").append(c);var l=document.querySelector("#instructions"),u=document.querySelector("#medal"),h=document.querySelector("#medal span"),d=localStorage.getItem("name");""!=d&&null!=d&&(document.forms.nicknameForm.nickname.setAttribute("value",localStorage.name),document.forms.nicknameForm.nickname.style.color="#555555",null!=localStorage.getItem("bestScore")&&""!=localStorage.getItem("bestScore")&&0!=localStorage.getItem("bestScore")&&(h.textContent=localStorage.getItem("bestScore"),u.style.display="block"));const f=function(e){const t=[];let n=0;for(let s=0;s<e.length;s++){let i=e.charCodeAt(s);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&s+1<e.length&&56320==(64512&e.charCodeAt(s+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++s)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},p={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let t=0;t<e.length;t+=3){const i=e[t],r=t+1<e.length,o=r?e[t+1]:0,a=t+2<e.length,c=a?e[t+2]:0,l=i>>2,u=(3&i)<<4|o>>4;let h=(15&o)<<2|c>>6,d=63&c;a||(d=64,r||(h=64)),s.push(n[l],n[u],n[h],n[d])}return s.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(f(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,s=0;for(;n<e.length;){const i=e[n++];if(i<128)t[s++]=String.fromCharCode(i);else if(i>191&&i<224){const r=e[n++];t[s++]=String.fromCharCode((31&i)<<6|63&r)}else if(i>239&&i<365){const r=((7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[s++]=String.fromCharCode(55296+(r>>10)),t[s++]=String.fromCharCode(56320+(1023&r))}else{const r=e[n++],o=e[n++];t[s++]=String.fromCharCode((15&i)<<12|(63&r)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let t=0;t<e.length;){const i=n[e.charAt(t++)],r=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==i||null==r||null==o||null==a)throw Error();const c=i<<2|r>>4;if(s.push(c),64!==o){const e=r<<4&240|o>>2;if(s.push(e),64!==a){const e=o<<6&192|a;s.push(e)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},m=function(e){return function(e){const t=f(e);return p.encodeByteArray(t,!0)}(e).replace(/\./g,"")};class g{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function y(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function v(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(y())}function w(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function b(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function I(){const e=y();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}class E extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,E.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,T.prototype.create)}}class T{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},s=`${this.service}/${e}`,i=this.errors[e],r=i?function(e,t){return e.replace(_,((e,n)=>{const s=t[n];return null!=s?String(s):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${r} (${s}).`;return new E(s,o,n)}}const _=/\{\$([^}]+)}/g;function S(e,t){if(e===t)return!0;const n=Object.keys(e),s=Object.keys(t);for(const i of n){if(!s.includes(i))return!1;const n=e[i],r=t[i];if(k(n)&&k(r)){if(!S(n,r))return!1}else if(n!==r)return!1}for(const e of s)if(!n.includes(e))return!1;return!0}function k(e){return null!==e&&"object"==typeof e}function C(e){const t=[];for(const[n,s]of Object.entries(e))Array.isArray(s)?s.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(s));return t.length?"&"+t.join("&"):""}function A(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,s]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(s)}})),t}function N(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)}class R{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let s;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");s=function(e,t){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===s.next&&(s.next=D),void 0===s.error&&(s.error=D),void 0===s.complete&&(s.complete=D);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?s.error(this.finalError):s.complete()}catch(e){}})),this.observers.push(s),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function D(){}function O(e){return e&&e._delegate?e._delegate:e}function L(e,t){return new Promise(((n,s)=>{e.onsuccess=e=>{n(e.target.result)},e.onerror=e=>{var n;s(`${t}: ${null===(n=e.target.error)||void 0===n?void 0:n.message}`)}}))}class P{constructor(e){this._db=e,this.objectStoreNames=this._db.objectStoreNames}transaction(e,t){return new x(this._db.transaction.call(this._db,e,t))}createObjectStore(e,t){return new M(this._db.createObjectStore(e,t))}close(){this._db.close()}}class x{constructor(e){this._transaction=e,this.complete=new Promise(((e,t)=>{this._transaction.oncomplete=function(){e()},this._transaction.onerror=()=>{t(this._transaction.error)},this._transaction.onabort=()=>{t(this._transaction.error)}}))}objectStore(e){return new M(this._transaction.objectStore(e))}}class M{constructor(e){this._store=e}index(e){return new U(this._store.index(e))}createIndex(e,t,n){return new U(this._store.createIndex(e,t,n))}get(e){return L(this._store.get(e),"Error reading from IndexedDB")}put(e,t){return L(this._store.put(e,t),"Error writing to IndexedDB")}delete(e){return L(this._store.delete(e),"Error deleting from IndexedDB")}clear(){return L(this._store.clear(),"Error clearing IndexedDB object store")}}class U{constructor(e){this._index=e}get(e){return L(this._index.get(e),"Error reading from IndexedDB")}}class F{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const V="[DEFAULT]";class q{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new g;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),s=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(s)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:V})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(s);return s}onInit(e,t){var n;const s=this.normalizeInstanceIdentifier(t),i=null!==(n=this.onInitCallbacks.get(s))&&void 0!==n?n:new Set;i.add(e),this.onInitCallbacks.set(s,i);const r=this.instances.get(s);return r&&e(r,s),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const s of n)try{s(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(s=e,s===V?void 0:s),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var s;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:V:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class j{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new q(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const B=[];var $,z;(z=$||($={}))[z.DEBUG=0]="DEBUG",z[z.VERBOSE=1]="VERBOSE",z[z.INFO=2]="INFO",z[z.WARN=3]="WARN",z[z.ERROR=4]="ERROR",z[z.SILENT=5]="SILENT";const H={debug:$.DEBUG,verbose:$.VERBOSE,info:$.INFO,warn:$.WARN,error:$.ERROR,silent:$.SILENT},K=$.INFO,G={[$.DEBUG]:"log",[$.VERBOSE]:"log",[$.INFO]:"info",[$.WARN]:"warn",[$.ERROR]:"error"},W=(e,t,...n)=>{if(t<e.logLevel)return;const s=(new Date).toISOString(),i=G[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${s}]  ${e.name}:`,...n)};class X{constructor(e){this.name=e,this._logLevel=K,this._logHandler=W,this._userLogHandler=null,B.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in $))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?H[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,$.DEBUG,...e),this._logHandler(this,$.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,$.VERBOSE,...e),this._logHandler(this,$.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,$.INFO,...e),this._logHandler(this,$.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,$.WARN,...e),this._logHandler(this,$.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,$.ERROR,...e),this._logHandler(this,$.ERROR,...e)}}class Y{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const J="@firebase/app",Q="0.7.20",Z=new X("@firebase/app"),ee={[J]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},te=new Map,ne=new Map;function se(e,t){try{e.container.addComponent(t)}catch(n){Z.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function ie(e){const t=e.name;if(ne.has(t))return Z.debug(`There were multiple attempts to register component ${t}.`),!1;ne.set(t,e);for(const t of te.values())se(t,e);return!0}function re(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const oe=new T("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","storage-open":"Error thrown when opening storage. Original error: {$originalErrorMessage}.","storage-get":"Error thrown when reading from storage. Original error: {$originalErrorMessage}.","storage-set":"Error thrown when writing to storage. Original error: {$originalErrorMessage}.","storage-delete":"Error thrown when deleting from storage. Original error: {$originalErrorMessage}."});class ae{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new F("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw oe.create("app-deleted",{appName:this._name})}}const ce="9.6.10";function le(e="[DEFAULT]"){const t=te.get(e);if(!t)throw oe.create("no-app",{appName:e});return t}function ue(e,t,n){var s;let i=null!==(s=ee[e])&&void 0!==s?s:e;n&&(i+=`-${n}`);const r=i.match(/\s|\//),o=t.match(/\s|\//);if(r||o){const e=[`Unable to register library "${i}" with version "${t}":`];return r&&e.push(`library name "${i}" contains illegal characters (whitespace or "/")`),r&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void Z.warn(e.join(" "))}ie(new F(`${i}-version`,(()=>({library:i,version:t})),"VERSION"))}const he="firebase-heartbeat-store";let de=null;function fe(){var e;return de||(de=("firebase-heartbeat-database",1,e=(e,t)=>{0===t&&e.createObjectStore(he)},new Promise(((t,n)=>{try{const s=indexedDB.open("firebase-heartbeat-database",1);s.onsuccess=e=>{t(new P(e.target.result))},s.onerror=e=>{var t;n(`Error opening indexedDB: ${null===(t=e.target.error)||void 0===t?void 0:t.message}`)},s.onupgradeneeded=t=>{e(new P(s.result),t.oldVersion,t.newVersion,new x(s.transaction))}}catch(e){n(`Error opening indexedDB: ${e.message}`)}}))).catch((e=>{throw oe.create("storage-open",{originalErrorMessage:e.message})}))),de}async function pe(e,t){try{const n=(await fe()).transaction(he,"readwrite"),s=n.objectStore(he);return await s.put(t,me(e)),n.complete}catch(e){throw oe.create("storage-set",{originalErrorMessage:e.message})}}function me(e){return`${e.name}!${e.options.appId}`}class ge{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new ve(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=ye();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=ye(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let s=e.slice();for(const i of e){const e=n.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),we(n)>t){e.dates.pop();break}}else if(n.push({agent:i.agent,dates:[i.date]}),we(n)>t){n.pop();break}s=s.slice(1)}return{heartbeatsToSend:n,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=m(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function ye(){return(new Date).toISOString().substring(0,10)}class ve{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return"object"==typeof indexedDB&&new Promise(((e,t)=>{try{let n=!0;const s="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(s);i.onsuccess=()=>{i.result.close(),n||self.indexedDB.deleteDatabase(s),e(!0)},i.onupgradeneeded=()=>{n=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{return(await fe()).transaction(he).objectStore(he).get(me(e))}catch(e){throw oe.create("storage-get",{originalErrorMessage:e.message})}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return pe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return pe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function we(e){return m(JSON.stringify({version:2,heartbeats:e})).length}ie(new F("platform-logger",(e=>new Y(e)),"PRIVATE")),ie(new F("heartbeat",(e=>new ge(e)),"PRIVATE")),ue(J,Q,""),ue(J,Q,"esm2017"),ue("fire-js",""),ue("firebase","9.6.10","app");var be,Ie="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},Ee={},Te=Te||{},_e=Ie||self;function Se(){}function ke(e){var t=typeof e;return"array"==(t="object"!=t?t:e?Array.isArray(e)?"array":t:"null")||"object"==t&&"number"==typeof e.length}function Ce(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var Ae="closure_uid_"+(1e9*Math.random()>>>0),Ne=0;function Re(e,t,n){return e.call.apply(e.bind,arguments)}function De(e,t,n){if(!e)throw Error();if(2<arguments.length){var s=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,s),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function Oe(e,t,n){return(Oe=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?Re:De).apply(null,arguments)}function Le(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}function Pe(e,t){function n(){}n.prototype=t.prototype,e.Z=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.Vb=function(e,n,s){for(var i=Array(arguments.length-2),r=2;r<arguments.length;r++)i[r-2]=arguments[r];return t.prototype[n].apply(e,i)}}function xe(){this.s=this.s,this.o=this.o}var Me={};xe.prototype.s=!1,xe.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var e=function(e){return Object.prototype.hasOwnProperty.call(e,Ae)&&e[Ae]||(e[Ae]=++Ne)}(this);delete Me[e]}},xe.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const Ue=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if("string"==typeof e)return"string"!=typeof t||1!=t.length?-1:e.indexOf(t,0);for(let n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},Fe=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){const s=e.length,i="string"==typeof e?e.split(""):e;for(let r=0;r<s;r++)r in i&&t.call(n,i[r],r,e)};function Ve(e){return Array.prototype.concat.apply([],arguments)}function qe(e){const t=e.length;if(0<t){const n=Array(t);for(let s=0;s<t;s++)n[s]=e[s];return n}return[]}function je(e){return/^[\s\xa0]*$/.test(e)}var Be,$e=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]};function ze(e,t){return-1!=e.indexOf(t)}function He(e,t){return e<t?-1:e>t?1:0}e:{var Ke=_e.navigator;if(Ke){var Ge=Ke.userAgent;if(Ge){Be=Ge;break e}}Be=""}function We(e,t,n){for(const s in e)t.call(n,e[s],s,e)}function Xe(e){const t={};for(const n in e)t[n]=e[n];return t}var Ye="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function Je(e,t){let n,s;for(let t=1;t<arguments.length;t++){for(n in s=arguments[t],s)e[n]=s[n];for(let t=0;t<Ye.length;t++)n=Ye[t],Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n])}}function Qe(e){return Qe[" "](e),e}Qe[" "]=Se;var Ze,et,tt=ze(Be,"Opera"),nt=ze(Be,"Trident")||ze(Be,"MSIE"),st=ze(Be,"Edge"),it=st||nt,rt=ze(Be,"Gecko")&&!(ze(Be.toLowerCase(),"webkit")&&!ze(Be,"Edge"))&&!(ze(Be,"Trident")||ze(Be,"MSIE"))&&!ze(Be,"Edge"),ot=ze(Be.toLowerCase(),"webkit")&&!ze(Be,"Edge");function at(){var e=_e.document;return e?e.documentMode:void 0}e:{var ct="",lt=(et=Be,rt?/rv:([^\);]+)(\)|;)/.exec(et):st?/Edge\/([\d\.]+)/.exec(et):nt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(et):ot?/WebKit\/(\S+)/.exec(et):tt?/(?:Version)[ \/]?(\S+)/.exec(et):void 0);if(lt&&(ct=lt?lt[1]:""),nt){var ut=at();if(null!=ut&&ut>parseFloat(ct)){Ze=String(ut);break e}}Ze=ct}var ht,dt={};function ft(){return e=dt,Object.prototype.hasOwnProperty.call(e,9)?e[9]:e[9]=function(){let e=0;const t=$e(String(Ze)).split("."),n=$e("9").split("."),s=Math.max(t.length,n.length);for(let o=0;0==e&&o<s;o++){var i=t[o]||"",r=n[o]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],r=/(\d*)(\D*)(.*)/.exec(r)||["","","",""],0==i[0].length&&0==r[0].length)break;e=He(0==i[1].length?0:parseInt(i[1],10),0==r[1].length?0:parseInt(r[1],10))||He(0==i[2].length,0==r[2].length)||He(i[2],r[2]),i=i[3],r=r[3]}while(0==e)}return 0<=e}();var e}_e.document&&nt?ht=at()||parseInt(Ze,10)||void 0:ht=void 0;var pt=ht,mt=function(){if(!_e.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{_e.addEventListener("test",Se,t),_e.removeEventListener("test",Se,t)}catch(e){}return e}();function gt(e,t){this.type=e,this.g=this.target=t,this.defaultPrevented=!1}function yt(e,t){if(gt.call(this,e?e.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,e){var n=this.type=e.type,s=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.g=t,t=e.relatedTarget){if(rt){e:{try{Qe(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,s?(this.clientX=void 0!==s.clientX?s.clientX:s.pageX,this.clientY=void 0!==s.clientY?s.clientY:s.pageY,this.screenX=s.screenX||0,this.screenY=s.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:vt[e.pointerType]||"",this.state=e.state,this.i=e,e.defaultPrevented&&yt.Z.h.call(this)}}gt.prototype.h=function(){this.defaultPrevented=!0},Pe(yt,gt);var vt={2:"touch",3:"pen",4:"mouse"};yt.prototype.h=function(){yt.Z.h.call(this);var e=this.i;e.preventDefault?e.preventDefault():e.returnValue=!1};var wt="closure_listenable_"+(1e6*Math.random()|0),bt=0;function It(e,t,n,s,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!s,this.ia=i,this.key=++bt,this.ca=this.fa=!1}function Et(e){e.ca=!0,e.listener=null,e.proxy=null,e.src=null,e.ia=null}function Tt(e){this.src=e,this.g={},this.h=0}function _t(e,t){var n=t.type;if(n in e.g){var s,i=e.g[n],r=Ue(i,t);(s=0<=r)&&Array.prototype.splice.call(i,r,1),s&&(Et(t),0==e.g[n].length&&(delete e.g[n],e.h--))}}function St(e,t,n,s){for(var i=0;i<e.length;++i){var r=e[i];if(!r.ca&&r.listener==t&&r.capture==!!n&&r.ia==s)return i}return-1}Tt.prototype.add=function(e,t,n,s,i){var r=e.toString();(e=this.g[r])||(e=this.g[r]=[],this.h++);var o=St(e,t,s,i);return-1<o?(t=e[o],n||(t.fa=!1)):((t=new It(t,this.src,r,!!s,i)).fa=n,e.push(t)),t};var kt="closure_lm_"+(1e6*Math.random()|0),Ct={};function At(e,t,n,s,i){if(s&&s.once)return Rt(e,t,n,s,i);if(Array.isArray(t)){for(var r=0;r<t.length;r++)At(e,t[r],n,s,i);return null}return n=Ut(n),e&&e[wt]?e.N(t,n,Ce(s)?!!s.capture:!!s,i):Nt(e,t,n,!1,s,i)}function Nt(e,t,n,s,i,r){if(!t)throw Error("Invalid event type");var o=Ce(i)?!!i.capture:!!i,a=xt(e);if(a||(e[kt]=a=new Tt(e)),(n=a.add(t,n,s,o,r)).proxy)return n;if(s=function(){var e=Pt;return function t(n){return e.call(t.src,t.listener,n)}}(),n.proxy=s,s.src=e,s.listener=n,e.addEventListener)mt||(i=o),void 0===i&&(i=!1),e.addEventListener(t.toString(),s,i);else if(e.attachEvent)e.attachEvent(Lt(t.toString()),s);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(s)}return n}function Rt(e,t,n,s,i){if(Array.isArray(t)){for(var r=0;r<t.length;r++)Rt(e,t[r],n,s,i);return null}return n=Ut(n),e&&e[wt]?e.O(t,n,Ce(s)?!!s.capture:!!s,i):Nt(e,t,n,!0,s,i)}function Dt(e,t,n,s,i){if(Array.isArray(t))for(var r=0;r<t.length;r++)Dt(e,t[r],n,s,i);else s=Ce(s)?!!s.capture:!!s,n=Ut(n),e&&e[wt]?(e=e.i,(t=String(t).toString())in e.g&&-1<(n=St(r=e.g[t],n,s,i))&&(Et(r[n]),Array.prototype.splice.call(r,n,1),0==r.length&&(delete e.g[t],e.h--))):e&&(e=xt(e))&&(t=e.g[t.toString()],e=-1,t&&(e=St(t,n,s,i)),(n=-1<e?t[e]:null)&&Ot(n))}function Ot(e){if("number"!=typeof e&&e&&!e.ca){var t=e.src;if(t&&t[wt])_t(t.i,e);else{var n=e.type,s=e.proxy;t.removeEventListener?t.removeEventListener(n,s,e.capture):t.detachEvent?t.detachEvent(Lt(n),s):t.addListener&&t.removeListener&&t.removeListener(s),(n=xt(t))?(_t(n,e),0==n.h&&(n.src=null,t[kt]=null)):Et(e)}}}function Lt(e){return e in Ct?Ct[e]:Ct[e]="on"+e}function Pt(e,t){if(e.ca)e=!0;else{t=new yt(t,this);var n=e.listener,s=e.ia||e.src;e.fa&&Ot(e),e=n.call(s,t)}return e}function xt(e){return(e=e[kt])instanceof Tt?e:null}var Mt="__closure_events_fn_"+(1e9*Math.random()>>>0);function Ut(e){return"function"==typeof e?e:(e[Mt]||(e[Mt]=function(t){return e.handleEvent(t)}),e[Mt])}function Ft(){xe.call(this),this.i=new Tt(this),this.P=this,this.I=null}function Vt(e,t){var n,s=e.I;if(s)for(n=[];s;s=s.I)n.push(s);if(e=e.P,s=t.type||t,"string"==typeof t)t=new gt(t,e);else if(t instanceof gt)t.target=t.target||e;else{var i=t;Je(t=new gt(s,e),i)}if(i=!0,n)for(var r=n.length-1;0<=r;r--){var o=t.g=n[r];i=qt(o,s,!0,t)&&i}if(i=qt(o=t.g=e,s,!0,t)&&i,i=qt(o,s,!1,t)&&i,n)for(r=0;r<n.length;r++)i=qt(o=t.g=n[r],s,!1,t)&&i}function qt(e,t,n,s){if(!(t=e.i.g[String(t)]))return!0;t=t.concat();for(var i=!0,r=0;r<t.length;++r){var o=t[r];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&_t(e.i,o),i=!1!==a.call(c,s)&&i}}return i&&!s.defaultPrevented}Pe(Ft,xe),Ft.prototype[wt]=!0,Ft.prototype.removeEventListener=function(e,t,n,s){Dt(this,e,t,n,s)},Ft.prototype.M=function(){if(Ft.Z.M.call(this),this.i){var e,t=this.i;for(e in t.g){for(var n=t.g[e],s=0;s<n.length;s++)Et(n[s]);delete t.g[e],t.h--}}this.I=null},Ft.prototype.N=function(e,t,n,s){return this.i.add(String(e),t,!1,n,s)},Ft.prototype.O=function(e,t,n,s){return this.i.add(String(e),t,!0,n,s)};var jt=_e.JSON.stringify;function Bt(){var e=Xt;let t=null;return e.g&&(t=e.g,e.g=e.g.next,e.g||(e.h=null),t.next=null),t}var $t,zt=new class{constructor(e,t){this.i=e,this.j=t,this.h=0,this.g=null}get(){let e;return 0<this.h?(this.h--,e=this.g,this.g=e.next,e.next=null):e=this.i(),e}}((()=>new Ht),(e=>e.reset()));class Ht{constructor(){this.next=this.g=this.h=null}set(e,t){this.h=e,this.g=t,this.next=null}reset(){this.next=this.g=this.h=null}}function Kt(e){_e.setTimeout((()=>{throw e}),0)}function Gt(e,t){$t||function(){var e=_e.Promise.resolve(void 0);$t=function(){e.then(Yt)}}(),Wt||($t(),Wt=!0),Xt.add(e,t)}var Wt=!1,Xt=new class{constructor(){this.h=this.g=null}add(e,t){const n=zt.get();n.set(e,t),this.h?this.h.next=n:this.g=n,this.h=n}};function Yt(){for(var e;e=Bt();){try{e.h.call(e.g)}catch(e){Kt(e)}var t=zt;t.j(e),100>t.h&&(t.h++,e.next=t.g,t.g=e)}Wt=!1}function Jt(e,t){Ft.call(this),this.h=e||1,this.g=t||_e,this.j=Oe(this.kb,this),this.l=Date.now()}function Qt(e){e.da=!1,e.S&&(e.g.clearTimeout(e.S),e.S=null)}function Zt(e,t,n){if("function"==typeof e)n&&(e=Oe(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=Oe(e.handleEvent,e)}return 2147483647<Number(t)?-1:_e.setTimeout(e,t||0)}function en(e){e.g=Zt((()=>{e.g=null,e.i&&(e.i=!1,en(e))}),e.j);const t=e.h;e.h=null,e.m.apply(null,t)}Pe(Jt,Ft),(be=Jt.prototype).da=!1,be.S=null,be.kb=function(){if(this.da){var e=Date.now()-this.l;0<e&&e<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-e):(this.S&&(this.g.clearTimeout(this.S),this.S=null),Vt(this,"tick"),this.da&&(Qt(this),this.start()))}},be.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},be.M=function(){Jt.Z.M.call(this),Qt(this),delete this.g};class tn extends xe{constructor(e,t){super(),this.m=e,this.j=t,this.h=null,this.i=!1,this.g=null}l(e){this.h=arguments,this.g?this.i=!0:en(this)}M(){super.M(),this.g&&(_e.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function nn(e){xe.call(this),this.h=e,this.g={}}Pe(nn,xe);var sn=[];function rn(e,t,n,s){Array.isArray(n)||(n&&(sn[0]=n.toString()),n=sn);for(var i=0;i<n.length;i++){var r=At(t,n[i],s||e.handleEvent,!1,e.h||e);if(!r)break;e.g[r.key]=r}}function on(e){We(e.g,(function(e,t){this.g.hasOwnProperty(t)&&Ot(e)}),e),e.g={}}function an(){this.g=!0}function cn(e,t,n,s){e.info((function(){return"XMLHTTP TEXT ("+t+"): "+function(e,t){if(!e.g)return t;if(!t)return null;try{var n=JSON.parse(t);if(n)for(e=0;e<n.length;e++)if(Array.isArray(n[e])){var s=n[e];if(!(2>s.length)){var i=s[1];if(Array.isArray(i)&&!(1>i.length)){var r=i[0];if("noop"!=r&&"stop"!=r&&"close"!=r)for(var o=1;o<i.length;o++)i[o]=""}}}return jt(n)}catch(e){return t}}(e,n)+(s?" "+s:"")}))}nn.prototype.M=function(){nn.Z.M.call(this),on(this)},nn.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},an.prototype.Aa=function(){this.g=!1},an.prototype.info=function(){};var ln={},un=null;function hn(){return un=un||new Ft}function dn(e){gt.call(this,ln.Ma,e)}function fn(e){const t=hn();Vt(t,new dn(t,e))}function pn(e,t){gt.call(this,ln.STAT_EVENT,e),this.stat=t}function mn(e){const t=hn();Vt(t,new pn(t,e))}function gn(e,t){gt.call(this,ln.Na,e),this.size=t}function yn(e,t){if("function"!=typeof e)throw Error("Fn must not be null and must be a function");return _e.setTimeout((function(){e()}),t)}ln.Ma="serverreachability",Pe(dn,gt),ln.STAT_EVENT="statevent",Pe(pn,gt),ln.Na="timingevent",Pe(gn,gt);var vn={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},wn={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function bn(){}function In(e){return e.h||(e.h=e.i())}function En(){}bn.prototype.h=null;var Tn,_n={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function Sn(){gt.call(this,"d")}function kn(){gt.call(this,"c")}function Cn(){}function An(e,t,n,s){this.l=e,this.j=t,this.m=n,this.X=s||1,this.V=new nn(this),this.P=Rn,e=it?125:void 0,this.W=new Jt(e),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new Nn}function Nn(){this.i=null,this.g="",this.h=!1}Pe(Sn,gt),Pe(kn,gt),Pe(Cn,bn),Cn.prototype.g=function(){return new XMLHttpRequest},Cn.prototype.i=function(){return{}},Tn=new Cn;var Rn=45e3,Dn={},On={};function Ln(e,t,n){e.K=1,e.v=ns(Yn(t)),e.s=n,e.U=!0,Pn(e,null)}function Pn(e,t){e.F=Date.now(),Fn(e),e.A=Yn(e.v);var n=e.A,s=e.X;Array.isArray(s)||(s=[String(s)]),ms(n.h,"t",s),e.C=0,n=e.l.H,e.h=new Nn,e.g=mi(e.l,n?t:null,!e.s),0<e.O&&(e.L=new tn(Oe(e.Ia,e,e.g),e.O)),rn(e.V,e.g,"readystatechange",e.gb),t=e.H?Xe(e.H):{},e.s?(e.u||(e.u="POST"),t["Content-Type"]="application/x-www-form-urlencoded",e.g.ea(e.A,e.u,e.s,t)):(e.u="GET",e.g.ea(e.A,e.u,null,t)),fn(1),function(e,t,n,s,i,r){e.info((function(){if(e.g)if(r)for(var o="",a=r.split("&"),c=0;c<a.length;c++){var l=a[c].split("=");if(1<l.length){var u=l[0];l=l[1];var h=u.split("_");o=2<=h.length&&"type"==h[1]?o+(u+"=")+l+"&":o+(u+"=redacted&")}}else o=null;else o=r;return"XMLHTTP REQ ("+s+") [attempt "+i+"]: "+t+"\n"+n+"\n"+o}))}(e.j,e.u,e.A,e.m,e.X,e.s)}function xn(e){return!!e.g&&"GET"==e.u&&2!=e.K&&e.l.Ba}function Mn(e,t,n){let s,i=!0;for(;!e.I&&e.C<n.length;){if(s=Un(e,n),s==On){4==t&&(e.o=4,mn(14),i=!1),cn(e.j,e.m,null,"[Incomplete Response]");break}if(s==Dn){e.o=4,mn(15),cn(e.j,e.m,n,"[Invalid Chunk]"),i=!1;break}cn(e.j,e.m,s,null),$n(e,s)}xn(e)&&s!=On&&s!=Dn&&(e.h.g="",e.C=0),4!=t||0!=n.length||e.h.h||(e.o=1,mn(16),i=!1),e.i=e.i&&i,i?0<n.length&&!e.aa&&(e.aa=!0,(t=e.l).g==e&&t.$&&!t.L&&(t.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),ai(t),t.L=!0,mn(11))):(cn(e.j,e.m,n,"[Invalid Chunked Response]"),Bn(e),jn(e))}function Un(e,t){var n=e.C,s=t.indexOf("\n",n);return-1==s?On:(n=Number(t.substring(n,s)),isNaN(n)?Dn:(s+=1)+n>t.length?On:(t=t.substr(s,n),e.C=s+n,t))}function Fn(e){e.Y=Date.now()+e.P,Vn(e,e.P)}function Vn(e,t){if(null!=e.B)throw Error("WatchDog timer not null");e.B=yn(Oe(e.eb,e),t)}function qn(e){e.B&&(_e.clearTimeout(e.B),e.B=null)}function jn(e){0==e.l.G||e.I||ui(e.l,e)}function Bn(e){qn(e);var t=e.L;t&&"function"==typeof t.na&&t.na(),e.L=null,Qt(e.W),on(e.V),e.g&&(t=e.g,e.g=null,t.abort(),t.na())}function $n(e,t){try{var n=e.l;if(0!=n.G&&(n.g==e||Is(n.i,e)))if(n.I=e.N,!e.J&&Is(n.i,e)&&3==n.G){try{var s=n.Ca.g.parse(t)}catch(e){s=null}if(Array.isArray(s)&&3==s.length){var i=s;if(0==i[0]){e:if(!n.u){if(n.g){if(!(n.g.F+3e3<e.F))break e;li(n),Qs(n)}oi(n),mn(18)}}else n.ta=i[1],0<n.ta-n.U&&37500>i[2]&&n.N&&0==n.A&&!n.v&&(n.v=yn(Oe(n.ab,n),6e3));if(1>=bs(n.i)&&n.ka){try{n.ka()}catch(e){}n.ka=void 0}}else di(n,11)}else if((e.J||n.g==e)&&li(n),!je(t))for(i=n.Ca.g.parse(t),t=0;t<i.length;t++){let l=i[t];if(n.U=l[0],l=l[1],2==n.G)if("c"==l[0]){n.J=l[1],n.la=l[2];const t=l[3];null!=t&&(n.ma=t,n.h.info("VER="+n.ma));const i=l[4];null!=i&&(n.za=i,n.h.info("SVER="+n.za));const u=l[5];null!=u&&"number"==typeof u&&0<u&&(s=1.5*u,n.K=s,n.h.info("backChannelRequestTimeoutMs_="+s)),s=n;const h=e.g;if(h){const e=h.g?h.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(e){var r=s.i;!r.g&&(ze(e,"spdy")||ze(e,"quic")||ze(e,"h2"))&&(r.j=r.l,r.g=new Set,r.h&&(Es(r,r.h),r.h=null))}if(s.D){const e=h.g?h.g.getResponseHeader("X-HTTP-Session-Id"):null;e&&(s.sa=e,ts(s.F,s.D,e))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-e.F,n.h.info("Handshake RTT: "+n.O+"ms"));var o=e;if((s=n).oa=pi(s,s.H?s.la:null,s.W),o.J){Ts(s.i,o);var a=o,c=s.K;c&&a.setTimeout(c),a.B&&(qn(a),Fn(a)),s.g=o}else ri(s);0<n.l.length&&ti(n)}else"stop"!=l[0]&&"close"!=l[0]||di(n,7);else 3==n.G&&("stop"==l[0]||"close"==l[0]?"stop"==l[0]?di(n,7):Js(n):"noop"!=l[0]&&n.j&&n.j.wa(l),n.A=0)}fn(4)}catch(e){}}function zn(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(ke(e)||"string"==typeof e)Fe(e,t,void 0);else{if(e.T&&"function"==typeof e.T)var n=e.T();else if(e.R&&"function"==typeof e.R)n=void 0;else if(ke(e)||"string"==typeof e){n=[];for(var s=e.length,i=0;i<s;i++)n.push(i)}else for(i in n=[],s=0,e)n[s++]=i;s=function(e){if(e.R&&"function"==typeof e.R)return e.R();if("string"==typeof e)return e.split("");if(ke(e)){for(var t=[],n=e.length,s=0;s<n;s++)t.push(e[s]);return t}for(s in t=[],n=0,e)t[n++]=e[s];return t}(e),i=s.length;for(var r=0;r<i;r++)t.call(void 0,s[r],n&&n[r],e)}}function Hn(e,t){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var s=0;s<n;s+=2)this.set(arguments[s],arguments[s+1])}else if(e)if(e instanceof Hn)for(n=e.T(),s=0;s<n.length;s++)this.set(n[s],e.get(n[s]));else for(s in e)this.set(s,e[s])}function Kn(e){if(e.i!=e.g.length){for(var t=0,n=0;t<e.g.length;){var s=e.g[t];Gn(e.h,s)&&(e.g[n++]=s),t++}e.g.length=n}if(e.i!=e.g.length){var i={};for(n=t=0;t<e.g.length;)Gn(i,s=e.g[t])||(e.g[n++]=s,i[s]=1),t++;e.g.length=n}}function Gn(e,t){return Object.prototype.hasOwnProperty.call(e,t)}(be=An.prototype).setTimeout=function(e){this.P=e},be.gb=function(e){e=e.target;const t=this.L;t&&3==Ks(e)?t.l():this.Ia(e)},be.Ia=function(e){try{if(e==this.g)e:{const u=Ks(this.g);var t=this.g.Da();const h=this.g.ba();if(!(3>u)&&(3!=u||it||this.g&&(this.h.h||this.g.ga()||Gs(this.g)))){this.I||4!=u||7==t||fn(8==t||0>=h?3:2),qn(this);var n=this.g.ba();this.N=n;t:if(xn(this)){var s=Gs(this.g);e="";var i=s.length,r=4==Ks(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){Bn(this),jn(this);var o="";break t}this.h.i=new _e.TextDecoder}for(t=0;t<i;t++)this.h.h=!0,e+=this.h.i.decode(s[t],{stream:r&&t==i-1});s.splice(0,i),this.h.g+=e,this.C=0,o=this.h.g}else o=this.g.ga();if(this.i=200==n,function(e,t,n,s,i,r,o){e.info((function(){return"XMLHTTP RESP ("+s+") [ attempt "+i+"]: "+t+"\n"+n+"\n"+r+" "+o}))}(this.j,this.u,this.A,this.m,this.X,u,n),this.i){if(this.$&&!this.J){t:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!je(a)){var l=a;break t}}l=null}if(!(n=l)){this.i=!1,this.o=3,mn(12),Bn(this),jn(this);break e}cn(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,$n(this,n)}this.U?(Mn(this,u,o),it&&this.i&&3==u&&(rn(this.V,this.W,"tick",this.fb),this.W.start())):(cn(this.j,this.m,o,null),$n(this,o)),4==u&&Bn(this),this.i&&!this.I&&(4==u?ui(this.l,this):(this.i=!1,Fn(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,mn(12)):(this.o=0,mn(13)),Bn(this),jn(this)}}}catch(e){}},be.fb=function(){if(this.g){var e=Ks(this.g),t=this.g.ga();this.C<t.length&&(qn(this),Mn(this,e,t),this.i&&4!=e&&Fn(this))}},be.cancel=function(){this.I=!0,Bn(this)},be.eb=function(){this.B=null;const e=Date.now();0<=e-this.Y?(function(e,t){e.info((function(){return"TIMEOUT: "+t}))}(this.j,this.A),2!=this.K&&(fn(3),mn(17)),Bn(this),this.o=2,jn(this)):Vn(this,this.Y-e)},(be=Hn.prototype).R=function(){Kn(this);for(var e=[],t=0;t<this.g.length;t++)e.push(this.h[this.g[t]]);return e},be.T=function(){return Kn(this),this.g.concat()},be.get=function(e,t){return Gn(this.h,e)?this.h[e]:t},be.set=function(e,t){Gn(this.h,e)||(this.i++,this.g.push(e)),this.h[e]=t},be.forEach=function(e,t){for(var n=this.T(),s=0;s<n.length;s++){var i=n[s],r=this.get(i);e.call(t,r,i,this)}};var Wn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Xn(e,t){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,e instanceof Xn){this.g=void 0!==t?t:e.g,Jn(this,e.j),this.s=e.s,Qn(this,e.i),Zn(this,e.m),this.l=e.l,t=e.h;var n=new hs;n.i=t.i,t.g&&(n.g=new Hn(t.g),n.h=t.h),es(this,n),this.o=e.o}else e&&(n=String(e).match(Wn))?(this.g=!!t,Jn(this,n[1]||"",!0),this.s=ss(n[2]||""),Qn(this,n[3]||"",!0),Zn(this,n[4]),this.l=ss(n[5]||"",!0),es(this,n[6]||"",!0),this.o=ss(n[7]||"")):(this.g=!!t,this.h=new hs(null,this.g))}function Yn(e){return new Xn(e)}function Jn(e,t,n){e.j=n?ss(t,!0):t,e.j&&(e.j=e.j.replace(/:$/,""))}function Qn(e,t,n){e.i=n?ss(t,!0):t}function Zn(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.m=t}else e.m=null}function es(e,t,n){t instanceof hs?(e.h=t,function(e,t){t&&!e.j&&(ds(e),e.i=null,e.g.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(fs(this,t),ms(this,n,e))}),e)),e.j=t}(e.h,e.g)):(n||(t=is(t,ls)),e.h=new hs(t,e.g))}function ts(e,t,n){e.h.set(t,n)}function ns(e){return ts(e,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),e}function ss(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function is(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,rs),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function rs(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Xn.prototype.toString=function(){var e=[],t=this.j;t&&e.push(is(t,os,!0),":");var n=this.i;return(n||"file"==t)&&(e.push("//"),(t=this.s)&&e.push(is(t,os,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&e.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&e.push("/"),e.push(is(n,"/"==n.charAt(0)?cs:as,!0))),(n=this.h.toString())&&e.push("?",n),(n=this.o)&&e.push("#",is(n,us)),e.join("")};var os=/[#\/\?@]/g,as=/[#\?:]/g,cs=/[#\?]/g,ls=/[#\?@]/g,us=/#/g;function hs(e,t){this.h=this.g=null,this.i=e||null,this.j=!!t}function ds(e){e.g||(e.g=new Hn,e.h=0,e.i&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var s=e[n].indexOf("="),i=null;if(0<=s){var r=e[n].substring(0,s);i=e[n].substring(s+1)}else r=e[n];t(r,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.i,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function fs(e,t){ds(e),t=gs(e,t),Gn(e.g.h,t)&&(e.i=null,e.h-=e.g.get(t).length,Gn((e=e.g).h,t)&&(delete e.h[t],e.i--,e.g.length>2*e.i&&Kn(e)))}function ps(e,t){return ds(e),t=gs(e,t),Gn(e.g.h,t)}function ms(e,t,n){fs(e,t),0<n.length&&(e.i=null,e.g.set(gs(e,t),qe(n)),e.h+=n.length)}function gs(e,t){return t=String(t),e.j&&(t=t.toLowerCase()),t}function ys(e){this.l=e||vs,e=_e.PerformanceNavigationTiming?0<(e=_e.performance.getEntriesByType("navigation")).length&&("hq"==e[0].nextHopProtocol||"h2"==e[0].nextHopProtocol):!!(_e.g&&_e.g.Ea&&_e.g.Ea()&&_e.g.Ea().Zb),this.j=e?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(be=hs.prototype).add=function(e,t){ds(this),this.i=null,e=gs(this,e);var n=this.g.get(e);return n||this.g.set(e,n=[]),n.push(t),this.h+=1,this},be.forEach=function(e,t){ds(this),this.g.forEach((function(n,s){Fe(n,(function(n){e.call(t,n,s,this)}),this)}),this)},be.T=function(){ds(this);for(var e=this.g.R(),t=this.g.T(),n=[],s=0;s<t.length;s++)for(var i=e[s],r=0;r<i.length;r++)n.push(t[s]);return n},be.R=function(e){ds(this);var t=[];if("string"==typeof e)ps(this,e)&&(t=Ve(t,this.g.get(gs(this,e))));else{e=this.g.R();for(var n=0;n<e.length;n++)t=Ve(t,e[n])}return t},be.set=function(e,t){return ds(this),this.i=null,ps(this,e=gs(this,e))&&(this.h-=this.g.get(e).length),this.g.set(e,[t]),this.h+=1,this},be.get=function(e,t){return e&&0<(e=this.R(e)).length?String(e[0]):t},be.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var e=[],t=this.g.T(),n=0;n<t.length;n++){var s=t[n],i=encodeURIComponent(String(s));s=this.R(s);for(var r=0;r<s.length;r++){var o=i;""!==s[r]&&(o+="="+encodeURIComponent(String(s[r]))),e.push(o)}}return this.i=e.join("&")};var vs=10;function ws(e){return!!e.h||!!e.g&&e.g.size>=e.j}function bs(e){return e.h?1:e.g?e.g.size:0}function Is(e,t){return e.h?e.h==t:!!e.g&&e.g.has(t)}function Es(e,t){e.g?e.g.add(t):e.h=t}function Ts(e,t){e.h&&e.h==t?e.h=null:e.g&&e.g.has(t)&&e.g.delete(t)}function _s(e){if(null!=e.h)return e.i.concat(e.h.D);if(null!=e.g&&0!==e.g.size){let t=e.i;for(const n of e.g.values())t=t.concat(n.D);return t}return qe(e.i)}function Ss(){}function ks(){this.g=new Ss}function Cs(e,t,n){const s=n||"";try{zn(e,(function(e,n){let i=e;Ce(e)&&(i=jt(e)),t.push(s+n+"="+encodeURIComponent(i))}))}catch(e){throw t.push(s+"type="+encodeURIComponent("_badmap")),e}}function As(e,t,n,s,i){try{t.onload=null,t.onerror=null,t.onabort=null,t.ontimeout=null,i(s)}catch(e){}}function Ns(e){this.l=e.$b||null,this.j=e.ib||!1}function Rs(e,t){Ft.call(this),this.D=e,this.u=t,this.m=void 0,this.readyState=Ds,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}ys.prototype.cancel=function(){if(this.i=_s(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const e of this.g.values())e.cancel();this.g.clear()}},Ss.prototype.stringify=function(e){return _e.JSON.stringify(e,void 0)},Ss.prototype.parse=function(e){return _e.JSON.parse(e,void 0)},Pe(Ns,bn),Ns.prototype.g=function(){return new Rs(this.l,this.j)},Ns.prototype.i=function(e){return function(){return e}}({}),Pe(Rs,Ft);var Ds=0;function Os(e){e.j.read().then(e.Sa.bind(e)).catch(e.ha.bind(e))}function Ls(e){e.readyState=4,e.l=null,e.j=null,e.A=null,Ps(e)}function Ps(e){e.onreadystatechange&&e.onreadystatechange.call(e)}(be=Rs.prototype).open=function(e,t){if(this.readyState!=Ds)throw this.abort(),Error("Error reopening a connection");this.C=e,this.B=t,this.readyState=1,Ps(this)},be.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const t={headers:this.v,method:this.C,credentials:this.m,cache:void 0};e&&(t.body=e),(this.D||_e).fetch(new Request(this.B,t)).then(this.Va.bind(this),this.ha.bind(this))},be.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,Ls(this)),this.readyState=Ds},be.Va=function(e){if(this.g&&(this.l=e,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=e.headers,this.readyState=2,Ps(this)),this.g&&(this.readyState=3,Ps(this),this.g)))if("arraybuffer"===this.responseType)e.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==_e.ReadableStream&&"body"in e){if(this.j=e.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;Os(this)}else e.text().then(this.Ua.bind(this),this.ha.bind(this))},be.Sa=function(e){if(this.g){if(this.u&&e.value)this.response.push(e.value);else if(!this.u){var t=e.value?e.value:new Uint8Array(0);(t=this.A.decode(t,{stream:!e.done}))&&(this.response=this.responseText+=t)}e.done?Ls(this):Ps(this),3==this.readyState&&Os(this)}},be.Ua=function(e){this.g&&(this.response=this.responseText=e,Ls(this))},be.Ta=function(e){this.g&&(this.response=e,Ls(this))},be.ha=function(){this.g&&Ls(this)},be.setRequestHeader=function(e,t){this.v.append(e,t)},be.getResponseHeader=function(e){return this.h&&this.h.get(e.toLowerCase())||""},be.getAllResponseHeaders=function(){if(!this.h)return"";const e=[],t=this.h.entries();for(var n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},Object.defineProperty(Rs.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(e){this.m=e?"include":"same-origin"}});var xs=_e.JSON.parse;function Ms(e){Ft.call(this),this.headers=new Hn,this.u=e||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=Us,this.K=this.L=!1}Pe(Ms,Ft);var Us="",Fs=/^https?$/i,Vs=["POST","PUT"];function qs(e){return"content-type"==e.toLowerCase()}function js(e,t){e.h=!1,e.g&&(e.l=!0,e.g.abort(),e.l=!1),e.j=t,e.m=5,Bs(e),zs(e)}function Bs(e){e.D||(e.D=!0,Vt(e,"complete"),Vt(e,"error"))}function $s(e){if(e.h&&void 0!==Te&&(!e.C[1]||4!=Ks(e)||2!=e.ba()))if(e.v&&4==Ks(e))Zt(e.Fa,0,e);else if(Vt(e,"readystatechange"),4==Ks(e)){e.h=!1;try{const a=e.ba();e:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var t=!0;break e;default:t=!1}var n;if(!(n=t)){var s;if(s=0===a){var i=String(e.H).match(Wn)[1]||null;if(!i&&_e.self&&_e.self.location){var r=_e.self.location.protocol;i=r.substr(0,r.length-1)}s=!Fs.test(i?i.toLowerCase():"")}n=s}if(n)Vt(e,"complete"),Vt(e,"success");else{e.m=6;try{var o=2<Ks(e)?e.g.statusText:""}catch(e){o=""}e.j=o+" ["+e.ba()+"]",Bs(e)}}finally{zs(e)}}}function zs(e,t){if(e.g){Hs(e);const n=e.g,s=e.C[0]?Se:null;e.g=null,e.C=null,t||Vt(e,"ready");try{n.onreadystatechange=s}catch(e){}}}function Hs(e){e.g&&e.K&&(e.g.ontimeout=null),e.A&&(_e.clearTimeout(e.A),e.A=null)}function Ks(e){return e.g?e.g.readyState:0}function Gs(e){try{if(!e.g)return null;if("response"in e.g)return e.g.response;switch(e.J){case Us:case"text":return e.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in e.g)return e.g.mozResponseArrayBuffer}return null}catch(e){return null}}function Ws(e,t,n){e:{for(s in n){var s=!1;break e}s=!0}s||(n=function(e){let t="";return We(e,(function(e,n){t+=n,t+=":",t+=e,t+="\r\n"})),t}(n),"string"==typeof e?null!=n&&encodeURIComponent(String(n)):ts(e,t,n))}function Xs(e,t,n){return n&&n.internalChannelParams&&n.internalChannelParams[e]||t}function Ys(e){this.za=0,this.l=[],this.h=new an,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=Xs("failFast",!1,e),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=Xs("baseRetryDelayMs",5e3,e),this.$a=Xs("retryDelaySeedMs",1e4,e),this.Ya=Xs("forwardChannelMaxRetries",2,e),this.ra=Xs("forwardChannelRequestTimeoutMs",2e4,e),this.qa=e&&e.xmlHttpFactory||void 0,this.Ba=e&&e.Yb||!1,this.K=void 0,this.H=e&&e.supportsCrossDomainXhr||!1,this.J="",this.i=new ys(e&&e.concurrentRequestLimit),this.Ca=new ks,this.ja=e&&e.fastHandshake||!1,this.Ra=e&&e.Wb||!1,e&&e.Aa&&this.h.Aa(),e&&e.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&e&&e.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!e||!1!==e.Xb}function Js(e){if(Zs(e),3==e.G){var t=e.V++,n=Yn(e.F);ts(n,"SID",e.J),ts(n,"RID",t),ts(n,"TYPE","terminate"),si(e,n),(t=new An(e,e.h,t,void 0)).K=2,t.v=ns(Yn(n)),n=!1,_e.navigator&&_e.navigator.sendBeacon&&(n=_e.navigator.sendBeacon(t.v.toString(),"")),!n&&_e.Image&&((new Image).src=t.v,n=!0),n||(t.g=mi(t.l,null),t.g.ea(t.v)),t.F=Date.now(),Fn(t)}fi(e)}function Qs(e){e.g&&(ai(e),e.g.cancel(),e.g=null)}function Zs(e){Qs(e),e.u&&(_e.clearTimeout(e.u),e.u=null),li(e),e.i.cancel(),e.m&&("number"==typeof e.m&&_e.clearTimeout(e.m),e.m=null)}function ei(e,t){e.l.push(new class{constructor(e,t){this.h=e,this.g=t}}(e.Za++,t)),3==e.G&&ti(e)}function ti(e){ws(e.i)||e.m||(e.m=!0,Gt(e.Ha,e),e.C=0)}function ni(e,t){var n;n=t?t.m:e.V++;const s=Yn(e.F);ts(s,"SID",e.J),ts(s,"RID",n),ts(s,"AID",e.U),si(e,s),e.o&&e.s&&Ws(s,e.o,e.s),n=new An(e,e.h,n,e.C+1),null===e.o&&(n.H=e.s),t&&(e.l=t.D.concat(e.l)),t=ii(e,n,1e3),n.setTimeout(Math.round(.5*e.ra)+Math.round(.5*e.ra*Math.random())),Es(e.i,n),Ln(n,s,t)}function si(e,t){e.j&&zn({},(function(e,n){ts(t,n,e)}))}function ii(e,t,n){n=Math.min(e.l.length,n);var s=e.j?Oe(e.j.Oa,e.j,e):null;e:{var i=e.l;let t=-1;for(;;){const e=["count="+n];-1==t?0<n?(t=i[0].h,e.push("ofs="+t)):t=0:e.push("ofs="+t);let r=!0;for(let o=0;o<n;o++){let n=i[o].h;const a=i[o].g;if(n-=t,0>n)t=Math.max(0,i[o].h-100),r=!1;else try{Cs(a,e,"req"+n+"_")}catch(e){s&&s(a)}}if(r){s=e.join("&");break e}}}return e=e.l.splice(0,n),t.D=e,s}function ri(e){e.g||e.u||(e.Y=1,Gt(e.Ga,e),e.A=0)}function oi(e){return!(e.g||e.u||3<=e.A||(e.Y++,e.u=yn(Oe(e.Ga,e),hi(e,e.A)),e.A++,0))}function ai(e){null!=e.B&&(_e.clearTimeout(e.B),e.B=null)}function ci(e){e.g=new An(e,e.h,"rpc",e.Y),null===e.o&&(e.g.H=e.s),e.g.O=0;var t=Yn(e.oa);ts(t,"RID","rpc"),ts(t,"SID",e.J),ts(t,"CI",e.N?"0":"1"),ts(t,"AID",e.U),si(e,t),ts(t,"TYPE","xmlhttp"),e.o&&e.s&&Ws(t,e.o,e.s),e.K&&e.g.setTimeout(e.K);var n=e.g;e=e.la,n.K=1,n.v=ns(Yn(t)),n.s=null,n.U=!0,Pn(n,e)}function li(e){null!=e.v&&(_e.clearTimeout(e.v),e.v=null)}function ui(e,t){var n=null;if(e.g==t){li(e),ai(e),e.g=null;var s=2}else{if(!Is(e.i,t))return;n=t.D,Ts(e.i,t),s=1}if(e.I=t.N,0!=e.G)if(t.i)if(1==s){n=t.s?t.s.length:0,t=Date.now()-t.F;var i=e.C;Vt(s=hn(),new gn(s,n,t,i)),ti(e)}else ri(e);else if(3==(i=t.o)||0==i&&0<e.I||!(1==s&&function(e,t){return!(bs(e.i)>=e.i.j-(e.m?1:0)||(e.m?(e.l=t.D.concat(e.l),0):1==e.G||2==e.G||e.C>=(e.Xa?0:e.Ya)||(e.m=yn(Oe(e.Ha,e,t),hi(e,e.C)),e.C++,0)))}(e,t)||2==s&&oi(e)))switch(n&&0<n.length&&(t=e.i,t.i=t.i.concat(n)),i){case 1:di(e,5);break;case 4:di(e,10);break;case 3:di(e,6);break;default:di(e,2)}}function hi(e,t){let n=e.Pa+Math.floor(Math.random()*e.$a);return e.j||(n*=2),n*t}function di(e,t){if(e.h.info("Error code "+t),2==t){var n=null;e.j&&(n=null);var s=Oe(e.jb,e);n||(n=new Xn("//www.google.com/images/cleardot.gif"),_e.location&&"http"==_e.location.protocol||Jn(n,"https"),ns(n)),function(e,t){const n=new an;if(_e.Image){const s=new Image;s.onload=Le(As,n,s,"TestLoadImage: loaded",!0,t),s.onerror=Le(As,n,s,"TestLoadImage: error",!1,t),s.onabort=Le(As,n,s,"TestLoadImage: abort",!1,t),s.ontimeout=Le(As,n,s,"TestLoadImage: timeout",!1,t),_e.setTimeout((function(){s.ontimeout&&s.ontimeout()}),1e4),s.src=e}else t(!1)}(n.toString(),s)}else mn(2);e.G=0,e.j&&e.j.va(t),fi(e),Zs(e)}function fi(e){e.G=0,e.I=-1,e.j&&(0==_s(e.i).length&&0==e.l.length||(e.i.i.length=0,qe(e.l),e.l.length=0),e.j.ua())}function pi(e,t,n){let s=function(e){return e instanceof Xn?Yn(e):new Xn(e,void 0)}(n);if(""!=s.i)t&&Qn(s,t+"."+s.i),Zn(s,s.m);else{const e=_e.location;s=function(e,t,n,s){var i=new Xn(null,void 0);return e&&Jn(i,e),t&&Qn(i,t),n&&Zn(i,n),s&&(i.l=s),i}(e.protocol,t?t+"."+e.hostname:e.hostname,+e.port,n)}return e.aa&&We(e.aa,(function(e,t){ts(s,t,e)})),t=e.D,n=e.sa,t&&n&&ts(s,t,n),ts(s,"VER",e.ma),si(e,s),s}function mi(e,t,n){if(t&&!e.H)throw Error("Can't create secondary domain capable XhrIo object.");return(t=n&&e.Ba&&!e.qa?new Ms(new Ns({ib:!0})):new Ms(e.qa)).L=e.H,t}function gi(){}function yi(){if(nt&&!(10<=Number(pt)))throw Error("Environmental error: no available transport.")}function vi(e,t){Ft.call(this),this.g=new Ys(t),this.l=e,this.h=t&&t.messageUrlParams||null,e=t&&t.messageHeaders||null,t&&t.clientProtocolHeaderRequired&&(e?e["X-Client-Protocol"]="webchannel":e={"X-Client-Protocol":"webchannel"}),this.g.s=e,e=t&&t.initMessageHeaders||null,t&&t.messageContentType&&(e?e["X-WebChannel-Content-Type"]=t.messageContentType:e={"X-WebChannel-Content-Type":t.messageContentType}),t&&t.ya&&(e?e["X-WebChannel-Client-Profile"]=t.ya:e={"X-WebChannel-Client-Profile":t.ya}),this.g.P=e,(e=t&&t.httpHeadersOverwriteParam)&&!je(e)&&(this.g.o=e),this.A=t&&t.supportsCrossDomainXhr||!1,this.v=t&&t.sendRawJson||!1,(t=t&&t.httpSessionIdParam)&&!je(t)&&(this.g.D=t,null!==(e=this.h)&&t in e&&t in(e=this.h)&&delete e[t]),this.j=new Ii(this)}function wi(e){Sn.call(this);var t=e.__sm__;if(t){e:{for(const n in t){e=n;break e}e=void 0}(this.i=e)&&(e=this.i,t=null!==t&&e in t?t[e]:void 0),this.data=t}else this.data=e}function bi(){kn.call(this),this.status=1}function Ii(e){this.g=e}(be=Ms.prototype).ea=function(e,t,n,s){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+e);t=t?t.toUpperCase():"GET",this.H=e,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():Tn.g(),this.C=this.u?In(this.u):In(Tn),this.g.onreadystatechange=Oe(this.Fa,this);try{this.F=!0,this.g.open(t,String(e),!0),this.F=!1}catch(e){return void js(this,e)}e=n||"";const i=new Hn(this.headers);s&&zn(s,(function(e,t){i.set(t,e)})),s=function(e){e:{var t=qs;const n=e.length,s="string"==typeof e?e.split(""):e;for(let i=0;i<n;i++)if(i in s&&t.call(void 0,s[i],i,e)){t=i;break e}t=-1}return 0>t?null:"string"==typeof e?e.charAt(t):e[t]}(i.T()),n=_e.FormData&&e instanceof _e.FormData,!(0<=Ue(Vs,t))||s||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(e,t){this.g.setRequestHeader(t,e)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{Hs(this),0<this.B&&((this.K=function(e){return nt&&ft()&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=Oe(this.pa,this)):this.A=Zt(this.pa,this.B,this)),this.v=!0,this.g.send(e),this.v=!1}catch(e){js(this,e)}},be.pa=function(){void 0!==Te&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,Vt(this,"timeout"),this.abort(8))},be.abort=function(e){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=e||7,Vt(this,"complete"),Vt(this,"abort"),zs(this))},be.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),zs(this,!0)),Ms.Z.M.call(this)},be.Fa=function(){this.s||(this.F||this.v||this.l?$s(this):this.cb())},be.cb=function(){$s(this)},be.ba=function(){try{return 2<Ks(this)?this.g.status:-1}catch(e){return-1}},be.ga=function(){try{return this.g?this.g.responseText:""}catch(e){return""}},be.Qa=function(e){if(this.g){var t=this.g.responseText;return e&&0==t.indexOf(e)&&(t=t.substring(e.length)),xs(t)}},be.Da=function(){return this.m},be.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(be=Ys.prototype).ma=8,be.G=1,be.hb=function(e){try{this.h.info("Origin Trials invoked: "+e)}catch(e){}},be.Ha=function(e){if(this.m)if(this.m=null,1==this.G){if(!e){this.V=Math.floor(1e5*Math.random()),e=this.V++;const i=new An(this,this.h,e,void 0);let r=this.s;if(this.P&&(r?(r=Xe(r),Je(r,this.P)):r=this.P),null===this.o&&(i.H=r),this.ja)e:{for(var t=0,n=0;n<this.l.length;n++){var s=this.l[n];if(void 0===(s="__data__"in s.g&&"string"==typeof(s=s.g.__data__)?s.length:void 0))break;if(4096<(t+=s)){t=n;break e}if(4096===t||n===this.l.length-1){t=n+1;break e}}t=1e3}else t=1e3;t=ii(this,i,t),ts(n=Yn(this.F),"RID",e),ts(n,"CVER",22),this.D&&ts(n,"X-HTTP-Session-Id",this.D),si(this,n),this.o&&r&&Ws(n,this.o,r),Es(this.i,i),this.Ra&&ts(n,"TYPE","init"),this.ja?(ts(n,"$req",t),ts(n,"SID","null"),i.$=!0,Ln(i,n,null)):Ln(i,n,t),this.G=2}}else 3==this.G&&(e?ni(this,e):0==this.l.length||ws(this.i)||ni(this))},be.Ga=function(){if(this.u=null,ci(this),this.$&&!(this.L||null==this.g||0>=this.O)){var e=2*this.O;this.h.info("BP detection timer enabled: "+e),this.B=yn(Oe(this.bb,this),e)}},be.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,mn(10),Qs(this),ci(this))},be.ab=function(){null!=this.v&&(this.v=null,Qs(this),oi(this),mn(19))},be.jb=function(e){e?(this.h.info("Successfully pinged google.com"),mn(2)):(this.h.info("Failed to ping google.com"),mn(1))},(be=gi.prototype).xa=function(){},be.wa=function(){},be.va=function(){},be.ua=function(){},be.Oa=function(){},yi.prototype.g=function(e,t){return new vi(e,t)},Pe(vi,Ft),vi.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var e=this.g,t=this.l,n=this.h||void 0;e.Wa&&(e.h.info("Origin Trials enabled."),Gt(Oe(e.hb,e,t))),mn(0),e.W=t,e.aa=n||{},e.N=e.X,e.F=pi(e,null,e.W),ti(e)},vi.prototype.close=function(){Js(this.g)},vi.prototype.u=function(e){if("string"==typeof e){var t={};t.__data__=e,ei(this.g,t)}else this.v?((t={}).__data__=jt(e),ei(this.g,t)):ei(this.g,e)},vi.prototype.M=function(){this.g.j=null,delete this.j,Js(this.g),delete this.g,vi.Z.M.call(this)},Pe(wi,Sn),Pe(bi,kn),Pe(Ii,gi),Ii.prototype.xa=function(){Vt(this.g,"a")},Ii.prototype.wa=function(e){Vt(this.g,new wi(e))},Ii.prototype.va=function(e){Vt(this.g,new bi(e))},Ii.prototype.ua=function(){Vt(this.g,"b")},yi.prototype.createWebChannel=yi.prototype.g,vi.prototype.send=vi.prototype.u,vi.prototype.open=vi.prototype.m,vi.prototype.close=vi.prototype.close,vn.NO_ERROR=0,vn.TIMEOUT=8,vn.HTTP_ERROR=6,wn.COMPLETE="complete",En.EventType=_n,_n.OPEN="a",_n.CLOSE="b",_n.ERROR="c",_n.MESSAGE="d",Ft.prototype.listen=Ft.prototype.N,Ms.prototype.listenOnce=Ms.prototype.O,Ms.prototype.getLastError=Ms.prototype.La,Ms.prototype.getLastErrorCode=Ms.prototype.Da,Ms.prototype.getStatus=Ms.prototype.ba,Ms.prototype.getResponseJson=Ms.prototype.Qa,Ms.prototype.getResponseText=Ms.prototype.ga,Ms.prototype.send=Ms.prototype.ea;var Ei=Ee.createWebChannelTransport=function(){return new yi},Ti=Ee.getStatEventTarget=function(){return hn()},_i=Ee.ErrorCode=vn,Si=Ee.EventType=wn,ki=Ee.Event=ln,Ci=Ee.Stat={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},Ai=Ee.FetchXmlHttpFactory=Ns,Ni=Ee.WebChannel=En,Ri=Ee.XhrIo=Ms;const Di="@firebase/firestore";class Oi{constructor(e){this.uid=e}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(e){return e.uid===this.uid}}Oi.UNAUTHENTICATED=new Oi(null),Oi.GOOGLE_CREDENTIALS=new Oi("google-credentials-uid"),Oi.FIRST_PARTY=new Oi("first-party-uid"),Oi.MOCK_USER=new Oi("mock-user");let Li="9.6.10";const Pi=new X("@firebase/firestore");function xi(){return Pi.logLevel}function Mi(e,...t){if(Pi.logLevel<=$.DEBUG){const n=t.map(Vi);Pi.debug(`Firestore (${Li}): ${e}`,...n)}}function Ui(e,...t){if(Pi.logLevel<=$.ERROR){const n=t.map(Vi);Pi.error(`Firestore (${Li}): ${e}`,...n)}}function Fi(e,...t){if(Pi.logLevel<=$.WARN){const n=t.map(Vi);Pi.warn(`Firestore (${Li}): ${e}`,...n)}}function Vi(e){if("string"==typeof e)return e;try{return t=e,JSON.stringify(t)}catch(t){return e}var t}function qi(e="Unexpected state"){const t=`FIRESTORE (${Li}) INTERNAL ASSERTION FAILED: `+e;throw Ui(t),new Error(t)}function ji(e,t){e||qi()}function Bi(e,t){return e}const $i={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class zi extends E{constructor(e,t){super(e,t),this.code=e,this.message=t,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Hi{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}class Ki{constructor(e,t){this.user=t,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${e}`)}}class Gi{getToken(){return Promise.resolve(null)}invalidateToken(){}start(e,t){e.enqueueRetryable((()=>t(Oi.UNAUTHENTICATED)))}shutdown(){}}class Wi{constructor(e){this.t=e,this.currentUser=Oi.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(e,t){let n=this.i;const s=e=>this.i!==n?(n=this.i,t(e)):Promise.resolve();let i=new Hi;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new Hi,e.enqueueRetryable((()=>s(this.currentUser)))};const r=()=>{const t=i;e.enqueueRetryable((async()=>{await t.promise,await s(this.currentUser)}))},o=e=>{Mi("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),r()};this.t.onInit((e=>o(e))),setTimeout((()=>{if(!this.auth){const e=this.t.getImmediate({optional:!0});e?o(e):(Mi("FirebaseAuthCredentialsProvider","Auth not yet detected"),i.resolve(),i=new Hi)}}),0),r()}getToken(){const e=this.i,t=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(t).then((t=>this.i!==e?(Mi("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):t?(ji("string"==typeof t.accessToken),new Ki(t.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const e=this.auth&&this.auth.getUid();return ji(null===e||"string"==typeof e),new Oi(e)}}class Xi{constructor(e,t,n){this.type="FirstParty",this.user=Oi.FIRST_PARTY,this.headers=new Map,this.headers.set("X-Goog-AuthUser",t);const s=e.auth.getAuthHeaderValueForFirstParty([]);s&&this.headers.set("Authorization",s),n&&this.headers.set("X-Goog-Iam-Authorization-Token",n)}}class Yi{constructor(e,t,n){this.h=e,this.l=t,this.m=n}getToken(){return Promise.resolve(new Xi(this.h,this.l,this.m))}start(e,t){e.enqueueRetryable((()=>t(Oi.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class Ji{constructor(e){this.value=e,this.type="AppCheck",this.headers=new Map,e&&e.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class Qi{constructor(e){this.g=e,this.forceRefresh=!1,this.appCheck=null,this.p=null}start(e,t){const n=e=>{null!=e.error&&Mi("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);const n=e.token!==this.p;return this.p=e.token,Mi("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?t(e.token):Promise.resolve()};this.o=t=>{e.enqueueRetryable((()=>n(t)))};const s=e=>{Mi("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=e,this.appCheck.addTokenListener(this.o)};this.g.onInit((e=>s(e))),setTimeout((()=>{if(!this.appCheck){const e=this.g.getImmediate({optional:!0});e?s(e):Mi("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const e=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(e).then((e=>e?(ji("string"==typeof e.token),this.p=e.token,new Ji(e.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}class Zi{constructor(e,t){this.previousValue=e,t&&(t.sequenceNumberHandler=e=>this.I(e),this.T=e=>t.writeSequenceNumber(e))}I(e){return this.previousValue=Math.max(e,this.previousValue),this.previousValue}next(){const e=++this.previousValue;return this.T&&this.T(e),e}}function er(e){const t="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(e);if(t&&"function"==typeof t.getRandomValues)t.getRandomValues(n);else for(let t=0;t<e;t++)n[t]=Math.floor(256*Math.random());return n}Zi.A=-1;class tr{static R(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t=Math.floor(256/e.length)*e.length;let n="";for(;n.length<20;){const s=er(40);for(let i=0;i<s.length;++i)n.length<20&&s[i]<t&&(n+=e.charAt(s[i]%e.length))}return n}}function nr(e,t){return e<t?-1:e>t?1:0}function sr(e,t,n){return e.length===t.length&&e.every(((e,s)=>n(e,t[s])))}class ir{constructor(e,t){if(this.seconds=e,this.nanoseconds=t,t<0)throw new zi($i.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(t>=1e9)throw new zi($i.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(e<-62135596800)throw new zi($i.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e);if(e>=253402300800)throw new zi($i.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e)}static now(){return ir.fromMillis(Date.now())}static fromDate(e){return ir.fromMillis(e.getTime())}static fromMillis(e){const t=Math.floor(e/1e3),n=Math.floor(1e6*(e-1e3*t));return new ir(t,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(e){return this.seconds===e.seconds?nr(this.nanoseconds,e.nanoseconds):nr(this.seconds,e.seconds)}isEqual(e){return e.seconds===this.seconds&&e.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const e=this.seconds- -62135596800;return String(e).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class rr{constructor(e){this.timestamp=e}static fromTimestamp(e){return new rr(e)}static min(){return new rr(new ir(0,0))}static max(){return new rr(new ir(253402300799,999999999))}compareTo(e){return this.timestamp._compareTo(e.timestamp)}isEqual(e){return this.timestamp.isEqual(e.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function or(e){let t=0;for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t++;return t}function ar(e,t){for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}function cr(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}class lr{constructor(e,t,n){void 0===t?t=0:t>e.length&&qi(),void 0===n?n=e.length-t:n>e.length-t&&qi(),this.segments=e,this.offset=t,this.len=n}get length(){return this.len}isEqual(e){return 0===lr.comparator(this,e)}child(e){const t=this.segments.slice(this.offset,this.limit());return e instanceof lr?e.forEach((e=>{t.push(e)})):t.push(e),this.construct(t)}limit(){return this.offset+this.length}popFirst(e){return e=void 0===e?1:e,this.construct(this.segments,this.offset+e,this.length-e)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(e){return this.segments[this.offset+e]}isEmpty(){return 0===this.length}isPrefixOf(e){if(e.length<this.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}isImmediateParentOf(e){if(this.length+1!==e.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}forEach(e){for(let t=this.offset,n=this.limit();t<n;t++)e(this.segments[t])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(e,t){const n=Math.min(e.length,t.length);for(let s=0;s<n;s++){const n=e.get(s),i=t.get(s);if(n<i)return-1;if(n>i)return 1}return e.length<t.length?-1:e.length>t.length?1:0}}class ur extends lr{construct(e,t,n){return new ur(e,t,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...e){const t=[];for(const n of e){if(n.indexOf("//")>=0)throw new zi($i.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);t.push(...n.split("/").filter((e=>e.length>0)))}return new ur(t)}static emptyPath(){return new ur([])}}const hr=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class dr extends lr{construct(e,t,n){return new dr(e,t,n)}static isValidIdentifier(e){return hr.test(e)}canonicalString(){return this.toArray().map((e=>(e=e.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),dr.isValidIdentifier(e)||(e="`"+e+"`"),e))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new dr(["__name__"])}static fromServerFormat(e){const t=[];let n="",s=0;const i=()=>{if(0===n.length)throw new zi($i.INVALID_ARGUMENT,`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);t.push(n),n=""};let r=!1;for(;s<e.length;){const t=e[s];if("\\"===t){if(s+1===e.length)throw new zi($i.INVALID_ARGUMENT,"Path has trailing escape character: "+e);const t=e[s+1];if("\\"!==t&&"."!==t&&"`"!==t)throw new zi($i.INVALID_ARGUMENT,"Path has invalid escape sequence: "+e);n+=t,s+=2}else"`"===t?(r=!r,s++):"."!==t||r?(n+=t,s++):(i(),s++)}if(i(),r)throw new zi($i.INVALID_ARGUMENT,"Unterminated ` in path: "+e);return new dr(t)}static emptyPath(){return new dr([])}}class fr{constructor(e){this.fields=e,e.sort(dr.comparator)}covers(e){for(const t of this.fields)if(t.isPrefixOf(e))return!0;return!1}isEqual(e){return sr(this.fields,e.fields,((e,t)=>e.isEqual(t)))}}class pr{constructor(e){this.binaryString=e}static fromBase64String(e){const t=atob(e);return new pr(t)}static fromUint8Array(e){const t=function(e){let t="";for(let n=0;n<e.length;++n)t+=String.fromCharCode(e[n]);return t}(e);return new pr(t)}[Symbol.iterator](){let e=0;return{next:()=>e<this.binaryString.length?{value:this.binaryString.charCodeAt(e++),done:!1}:{value:void 0,done:!0}}}toBase64(){return e=this.binaryString,btoa(e);var e}toUint8Array(){return function(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(e){return nr(this.binaryString,e.binaryString)}isEqual(e){return this.binaryString===e.binaryString}}pr.EMPTY_BYTE_STRING=new pr("");const mr=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function gr(e){if(ji(!!e),"string"==typeof e){let t=0;const n=mr.exec(e);if(ji(!!n),n[1]){let e=n[1];e=(e+"000000000").substr(0,9),t=Number(e)}const s=new Date(e);return{seconds:Math.floor(s.getTime()/1e3),nanos:t}}return{seconds:yr(e.seconds),nanos:yr(e.nanos)}}function yr(e){return"number"==typeof e?e:"string"==typeof e?Number(e):0}function vr(e){return"string"==typeof e?pr.fromBase64String(e):pr.fromUint8Array(e)}function wr(e){var t,n;return"server_timestamp"===(null===(n=((null===(t=null==e?void 0:e.mapValue)||void 0===t?void 0:t.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function br(e){const t=e.mapValue.fields.__previous_value__;return wr(t)?br(t):t}function Ir(e){const t=gr(e.mapValue.fields.__local_write_time__.timestampValue);return new ir(t.seconds,t.nanos)}class Er{constructor(e,t,n,s,i,r,o,a){this.databaseId=e,this.appId=t,this.persistenceKey=n,this.host=s,this.ssl=i,this.forceLongPolling=r,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class Tr{constructor(e,t){this.projectId=e,this.database=t||"(default)"}static empty(){return new Tr("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(e){return e instanceof Tr&&e.projectId===this.projectId&&e.database===this.database}}function _r(e){return null==e}function Sr(e){return 0===e&&1/e==-1/0}class kr{constructor(e){this.path=e}static fromPath(e){return new kr(ur.fromString(e))}static fromName(e){return new kr(ur.fromString(e).popFirst(5))}static empty(){return new kr(ur.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(e){return this.path.length>=2&&this.path.get(this.path.length-2)===e}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(e){return null!==e&&0===ur.comparator(this.path,e.path)}toString(){return this.path.toString()}static comparator(e,t){return ur.comparator(e.path,t.path)}static isDocumentKey(e){return e.length%2==0}static fromSegments(e){return new kr(new ur(e.slice()))}}function Cr(e){return"nullValue"in e?0:"booleanValue"in e?1:"integerValue"in e||"doubleValue"in e?2:"timestampValue"in e?3:"stringValue"in e?5:"bytesValue"in e?6:"referenceValue"in e?7:"geoPointValue"in e?8:"arrayValue"in e?9:"mapValue"in e?wr(e)?4:qr(e)?9:10:qi()}function Ar(e,t){if(e===t)return!0;const n=Cr(e);if(n!==Cr(t))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return e.booleanValue===t.booleanValue;case 4:return Ir(e).isEqual(Ir(t));case 3:return function(e,t){if("string"==typeof e.timestampValue&&"string"==typeof t.timestampValue&&e.timestampValue.length===t.timestampValue.length)return e.timestampValue===t.timestampValue;const n=gr(e.timestampValue),s=gr(t.timestampValue);return n.seconds===s.seconds&&n.nanos===s.nanos}(e,t);case 5:return e.stringValue===t.stringValue;case 6:return function(e,t){return vr(e.bytesValue).isEqual(vr(t.bytesValue))}(e,t);case 7:return e.referenceValue===t.referenceValue;case 8:return function(e,t){return yr(e.geoPointValue.latitude)===yr(t.geoPointValue.latitude)&&yr(e.geoPointValue.longitude)===yr(t.geoPointValue.longitude)}(e,t);case 2:return function(e,t){if("integerValue"in e&&"integerValue"in t)return yr(e.integerValue)===yr(t.integerValue);if("doubleValue"in e&&"doubleValue"in t){const n=yr(e.doubleValue),s=yr(t.doubleValue);return n===s?Sr(n)===Sr(s):isNaN(n)&&isNaN(s)}return!1}(e,t);case 9:return sr(e.arrayValue.values||[],t.arrayValue.values||[],Ar);case 10:return function(e,t){const n=e.mapValue.fields||{},s=t.mapValue.fields||{};if(or(n)!==or(s))return!1;for(const e in n)if(n.hasOwnProperty(e)&&(void 0===s[e]||!Ar(n[e],s[e])))return!1;return!0}(e,t);default:return qi()}}function Nr(e,t){return void 0!==(e.values||[]).find((e=>Ar(e,t)))}function Rr(e,t){if(e===t)return 0;const n=Cr(e),s=Cr(t);if(n!==s)return nr(n,s);switch(n){case 0:case 9007199254740991:return 0;case 1:return nr(e.booleanValue,t.booleanValue);case 2:return function(e,t){const n=yr(e.integerValue||e.doubleValue),s=yr(t.integerValue||t.doubleValue);return n<s?-1:n>s?1:n===s?0:isNaN(n)?isNaN(s)?0:-1:1}(e,t);case 3:return Dr(e.timestampValue,t.timestampValue);case 4:return Dr(Ir(e),Ir(t));case 5:return nr(e.stringValue,t.stringValue);case 6:return function(e,t){const n=vr(e),s=vr(t);return n.compareTo(s)}(e.bytesValue,t.bytesValue);case 7:return function(e,t){const n=e.split("/"),s=t.split("/");for(let e=0;e<n.length&&e<s.length;e++){const t=nr(n[e],s[e]);if(0!==t)return t}return nr(n.length,s.length)}(e.referenceValue,t.referenceValue);case 8:return function(e,t){const n=nr(yr(e.latitude),yr(t.latitude));return 0!==n?n:nr(yr(e.longitude),yr(t.longitude))}(e.geoPointValue,t.geoPointValue);case 9:return function(e,t){const n=e.values||[],s=t.values||[];for(let e=0;e<n.length&&e<s.length;++e){const t=Rr(n[e],s[e]);if(t)return t}return nr(n.length,s.length)}(e.arrayValue,t.arrayValue);case 10:return function(e,t){const n=e.fields||{},s=Object.keys(n),i=t.fields||{},r=Object.keys(i);s.sort(),r.sort();for(let e=0;e<s.length&&e<r.length;++e){const t=nr(s[e],r[e]);if(0!==t)return t;const o=Rr(n[s[e]],i[r[e]]);if(0!==o)return o}return nr(s.length,r.length)}(e.mapValue,t.mapValue);default:throw qi()}}function Dr(e,t){if("string"==typeof e&&"string"==typeof t&&e.length===t.length)return nr(e,t);const n=gr(e),s=gr(t),i=nr(n.seconds,s.seconds);return 0!==i?i:nr(n.nanos,s.nanos)}function Or(e){return Lr(e)}function Lr(e){return"nullValue"in e?"null":"booleanValue"in e?""+e.booleanValue:"integerValue"in e?""+e.integerValue:"doubleValue"in e?""+e.doubleValue:"timestampValue"in e?function(e){const t=gr(e);return`time(${t.seconds},${t.nanos})`}(e.timestampValue):"stringValue"in e?e.stringValue:"bytesValue"in e?vr(e.bytesValue).toBase64():"referenceValue"in e?(n=e.referenceValue,kr.fromName(n).toString()):"geoPointValue"in e?`geo(${(t=e.geoPointValue).latitude},${t.longitude})`:"arrayValue"in e?function(e){let t="[",n=!0;for(const s of e.values||[])n?n=!1:t+=",",t+=Lr(s);return t+"]"}(e.arrayValue):"mapValue"in e?function(e){const t=Object.keys(e.fields||{}).sort();let n="{",s=!0;for(const i of t)s?s=!1:n+=",",n+=`${i}:${Lr(e.fields[i])}`;return n+"}"}(e.mapValue):qi();var t,n}function Pr(e){return!!e&&"integerValue"in e}function xr(e){return!!e&&"arrayValue"in e}function Mr(e){return!!e&&"nullValue"in e}function Ur(e){return!!e&&"doubleValue"in e&&isNaN(Number(e.doubleValue))}function Fr(e){return!!e&&"mapValue"in e}function Vr(e){if(e.geoPointValue)return{geoPointValue:Object.assign({},e.geoPointValue)};if(e.timestampValue&&"object"==typeof e.timestampValue)return{timestampValue:Object.assign({},e.timestampValue)};if(e.mapValue){const t={mapValue:{fields:{}}};return ar(e.mapValue.fields,((e,n)=>t.mapValue.fields[e]=Vr(n))),t}if(e.arrayValue){const t={arrayValue:{values:[]}};for(let n=0;n<(e.arrayValue.values||[]).length;++n)t.arrayValue.values[n]=Vr(e.arrayValue.values[n]);return t}return Object.assign({},e)}function qr(e){return"__max__"===(((e.mapValue||{}).fields||{}).__type__||{}).stringValue}class jr{constructor(e){this.value=e}static empty(){return new jr({mapValue:{}})}field(e){if(e.isEmpty())return this.value;{let t=this.value;for(let n=0;n<e.length-1;++n)if(t=(t.mapValue.fields||{})[e.get(n)],!Fr(t))return null;return t=(t.mapValue.fields||{})[e.lastSegment()],t||null}}set(e,t){this.getFieldsMap(e.popLast())[e.lastSegment()]=Vr(t)}setAll(e){let t=dr.emptyPath(),n={},s=[];e.forEach(((e,i)=>{if(!t.isImmediateParentOf(i)){const e=this.getFieldsMap(t);this.applyChanges(e,n,s),n={},s=[],t=i.popLast()}e?n[i.lastSegment()]=Vr(e):s.push(i.lastSegment())}));const i=this.getFieldsMap(t);this.applyChanges(i,n,s)}delete(e){const t=this.field(e.popLast());Fr(t)&&t.mapValue.fields&&delete t.mapValue.fields[e.lastSegment()]}isEqual(e){return Ar(this.value,e.value)}getFieldsMap(e){let t=this.value;t.mapValue.fields||(t.mapValue={fields:{}});for(let n=0;n<e.length;++n){let s=t.mapValue.fields[e.get(n)];Fr(s)&&s.mapValue.fields||(s={mapValue:{fields:{}}},t.mapValue.fields[e.get(n)]=s),t=s}return t.mapValue.fields}applyChanges(e,t,n){ar(t,((t,n)=>e[t]=n));for(const t of n)delete e[t]}clone(){return new jr(Vr(this.value))}}function Br(e){const t=[];return ar(e.fields,((e,n)=>{const s=new dr([e]);if(Fr(n)){const e=Br(n.mapValue).fields;if(0===e.length)t.push(s);else for(const n of e)t.push(s.child(n))}else t.push(s)})),new fr(t)}class $r{constructor(e,t,n,s,i,r){this.key=e,this.documentType=t,this.version=n,this.readTime=s,this.data=i,this.documentState=r}static newInvalidDocument(e){return new $r(e,0,rr.min(),rr.min(),jr.empty(),0)}static newFoundDocument(e,t,n){return new $r(e,1,t,rr.min(),n,0)}static newNoDocument(e,t){return new $r(e,2,t,rr.min(),jr.empty(),0)}static newUnknownDocument(e,t){return new $r(e,3,t,rr.min(),jr.empty(),2)}convertToFoundDocument(e,t){return this.version=e,this.documentType=1,this.data=t,this.documentState=0,this}convertToNoDocument(e){return this.version=e,this.documentType=2,this.data=jr.empty(),this.documentState=0,this}convertToUnknownDocument(e){return this.version=e,this.documentType=3,this.data=jr.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}setReadTime(e){return this.readTime=e,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(e){return e instanceof $r&&this.key.isEqual(e.key)&&this.version.isEqual(e.version)&&this.documentType===e.documentType&&this.documentState===e.documentState&&this.data.isEqual(e.data)}mutableCopy(){return new $r(this.key,this.documentType,this.version,this.readTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}function zr(e){return new Hr(e.readTime,e.key,-1)}class Hr{constructor(e,t,n){this.readTime=e,this.documentKey=t,this.largestBatchId=n}static min(){return new Hr(rr.min(),kr.empty(),-1)}static max(){return new Hr(rr.max(),kr.empty(),-1)}}function Kr(e,t){let n=e.readTime.compareTo(t.readTime);return 0!==n?n:(n=kr.comparator(e.documentKey,t.documentKey),0!==n?n:nr(e.largestBatchId,t.largestBatchId))}class Gr{constructor(e,t=null,n=[],s=[],i=null,r=null,o=null){this.path=e,this.collectionGroup=t,this.orderBy=n,this.filters=s,this.limit=i,this.startAt=r,this.endAt=o,this.P=null}}function Wr(e,t=null,n=[],s=[],i=null,r=null,o=null){return new Gr(e,t,n,s,i,r,o)}function Xr(e){const t=Bi(e);if(null===t.P){let e=t.path.canonicalString();null!==t.collectionGroup&&(e+="|cg:"+t.collectionGroup),e+="|f:",e+=t.filters.map((e=>{return(t=e).field.canonicalString()+t.op.toString()+Or(t.value);var t})).join(","),e+="|ob:",e+=t.orderBy.map((e=>function(e){return e.field.canonicalString()+e.dir}(e))).join(","),_r(t.limit)||(e+="|l:",e+=t.limit),t.startAt&&(e+="|lb:",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((e=>Or(e))).join(",")),t.endAt&&(e+="|ub:",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((e=>Or(e))).join(",")),t.P=e}return t.P}function Yr(e,t){if(e.limit!==t.limit)return!1;if(e.orderBy.length!==t.orderBy.length)return!1;for(let n=0;n<e.orderBy.length;n++)if(!lo(e.orderBy[n],t.orderBy[n]))return!1;if(e.filters.length!==t.filters.length)return!1;for(let i=0;i<e.filters.length;i++)if(n=e.filters[i],s=t.filters[i],n.op!==s.op||!n.field.isEqual(s.field)||!Ar(n.value,s.value))return!1;var n,s;return e.collectionGroup===t.collectionGroup&&!!e.path.isEqual(t.path)&&!!ho(e.startAt,t.startAt)&&ho(e.endAt,t.endAt)}function Jr(e){return kr.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}class Qr extends class{}{constructor(e,t,n){super(),this.field=e,this.op=t,this.value=n}static create(e,t,n){return e.isKeyField()?"in"===t||"not-in"===t?this.V(e,t,n):new Zr(e,t,n):"array-contains"===t?new so(e,n):"in"===t?new io(e,n):"not-in"===t?new ro(e,n):"array-contains-any"===t?new oo(e,n):new Qr(e,t,n)}static V(e,t,n){return"in"===t?new eo(e,n):new to(e,n)}matches(e){const t=e.data.field(this.field);return"!="===this.op?null!==t&&this.v(Rr(t,this.value)):null!==t&&Cr(this.value)===Cr(t)&&this.v(Rr(t,this.value))}v(e){switch(this.op){case"<":return e<0;case"<=":return e<=0;case"==":return 0===e;case"!=":return 0!==e;case">":return e>0;case">=":return e>=0;default:return qi()}}S(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class Zr extends Qr{constructor(e,t,n){super(e,t,n),this.key=kr.fromName(n.referenceValue)}matches(e){const t=kr.comparator(e.key,this.key);return this.v(t)}}class eo extends Qr{constructor(e,t){super(e,"in",t),this.keys=no(0,t)}matches(e){return this.keys.some((t=>t.isEqual(e.key)))}}class to extends Qr{constructor(e,t){super(e,"not-in",t),this.keys=no(0,t)}matches(e){return!this.keys.some((t=>t.isEqual(e.key)))}}function no(e,t){var n;return((null===(n=t.arrayValue)||void 0===n?void 0:n.values)||[]).map((e=>kr.fromName(e.referenceValue)))}class so extends Qr{constructor(e,t){super(e,"array-contains",t)}matches(e){const t=e.data.field(this.field);return xr(t)&&Nr(t.arrayValue,this.value)}}class io extends Qr{constructor(e,t){super(e,"in",t)}matches(e){const t=e.data.field(this.field);return null!==t&&Nr(this.value.arrayValue,t)}}class ro extends Qr{constructor(e,t){super(e,"not-in",t)}matches(e){if(Nr(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const t=e.data.field(this.field);return null!==t&&!Nr(this.value.arrayValue,t)}}class oo extends Qr{constructor(e,t){super(e,"array-contains-any",t)}matches(e){const t=e.data.field(this.field);return!(!xr(t)||!t.arrayValue.values)&&t.arrayValue.values.some((e=>Nr(this.value.arrayValue,e)))}}class ao{constructor(e,t){this.position=e,this.inclusive=t}}class co{constructor(e,t="asc"){this.field=e,this.dir=t}}function lo(e,t){return e.dir===t.dir&&e.field.isEqual(t.field)}function uo(e,t,n){let s=0;for(let i=0;i<e.position.length;i++){const r=t[i],o=e.position[i];if(s=r.field.isKeyField()?kr.comparator(kr.fromName(o.referenceValue),n.key):Rr(o,n.data.field(r.field)),"desc"===r.dir&&(s*=-1),0!==s)break}return s}function ho(e,t){if(null===e)return null===t;if(null===t)return!1;if(e.inclusive!==t.inclusive||e.position.length!==t.position.length)return!1;for(let n=0;n<e.position.length;n++)if(!Ar(e.position[n],t.position[n]))return!1;return!0}class fo{constructor(e,t=null,n=[],s=[],i=null,r="F",o=null,a=null){this.path=e,this.collectionGroup=t,this.explicitOrderBy=n,this.filters=s,this.limit=i,this.limitType=r,this.startAt=o,this.endAt=a,this.D=null,this.C=null,this.startAt,this.endAt}}function po(e){return new fo(e)}function mo(e){return!_r(e.limit)&&"F"===e.limitType}function go(e){return!_r(e.limit)&&"L"===e.limitType}function yo(e){return e.explicitOrderBy.length>0?e.explicitOrderBy[0].field:null}function vo(e){for(const t of e.filters)if(t.S())return t.field;return null}function wo(e){const t=Bi(e);if(null===t.D){t.D=[];const e=vo(t),n=yo(t);if(null!==e&&null===n)e.isKeyField()||t.D.push(new co(e)),t.D.push(new co(dr.keyField(),"asc"));else{let e=!1;for(const n of t.explicitOrderBy)t.D.push(n),n.field.isKeyField()&&(e=!0);if(!e){const e=t.explicitOrderBy.length>0?t.explicitOrderBy[t.explicitOrderBy.length-1].dir:"asc";t.D.push(new co(dr.keyField(),e))}}}return t.D}function bo(e){const t=Bi(e);if(!t.C)if("F"===t.limitType)t.C=Wr(t.path,t.collectionGroup,wo(t),t.filters,t.limit,t.startAt,t.endAt);else{const e=[];for(const n of wo(t)){const t="desc"===n.dir?"asc":"desc";e.push(new co(n.field,t))}const n=t.endAt?new ao(t.endAt.position,!t.endAt.inclusive):null,s=t.startAt?new ao(t.startAt.position,!t.startAt.inclusive):null;t.C=Wr(t.path,t.collectionGroup,e,t.filters,t.limit,n,s)}return t.C}function Io(e,t,n){return new fo(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),t,n,e.startAt,e.endAt)}function Eo(e,t){return Yr(bo(e),bo(t))&&e.limitType===t.limitType}function To(e){return`${Xr(bo(e))}|lt:${e.limitType}`}function _o(e){return`Query(target=${function(e){let t=e.path.canonicalString();return null!==e.collectionGroup&&(t+=" collectionGroup="+e.collectionGroup),e.filters.length>0&&(t+=`, filters: [${e.filters.map((e=>{return`${(t=e).field.canonicalString()} ${t.op} ${Or(t.value)}`;var t})).join(", ")}]`),_r(e.limit)||(t+=", limit: "+e.limit),e.orderBy.length>0&&(t+=`, orderBy: [${e.orderBy.map((e=>function(e){return`${e.field.canonicalString()} (${e.dir})`}(e))).join(", ")}]`),e.startAt&&(t+=", startAt: ",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((e=>Or(e))).join(",")),e.endAt&&(t+=", endAt: ",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((e=>Or(e))).join(",")),`Target(${t})`}(bo(e))}; limitType=${e.limitType})`}function So(e,t){return t.isFoundDocument()&&function(e,t){const n=t.key.path;return null!==e.collectionGroup?t.key.hasCollectionId(e.collectionGroup)&&e.path.isPrefixOf(n):kr.isDocumentKey(e.path)?e.path.isEqual(n):e.path.isImmediateParentOf(n)}(e,t)&&function(e,t){for(const n of e.explicitOrderBy)if(!n.field.isKeyField()&&null===t.data.field(n.field))return!1;return!0}(e,t)&&function(e,t){for(const n of e.filters)if(!n.matches(t))return!1;return!0}(e,t)&&function(e,t){return!(e.startAt&&!function(e,t,n){const s=uo(e,t,n);return e.inclusive?s<=0:s<0}(e.startAt,wo(e),t)||e.endAt&&!function(e,t,n){const s=uo(e,t,n);return e.inclusive?s>=0:s>0}(e.endAt,wo(e),t))}(e,t)}function ko(e){return(t,n)=>{let s=!1;for(const i of wo(e)){const e=Co(i,t,n);if(0!==e)return e;s=s||i.field.isKeyField()}return 0}}function Co(e,t,n){const s=e.field.isKeyField()?kr.comparator(t.key,n.key):function(e,t,n){const s=t.data.field(e),i=n.data.field(e);return null!==s&&null!==i?Rr(s,i):qi()}(e.field,t,n);switch(e.dir){case"asc":return s;case"desc":return-1*s;default:return qi()}}function Ao(e,t){if(e.N){if(isNaN(t))return{doubleValue:"NaN"};if(t===1/0)return{doubleValue:"Infinity"};if(t===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Sr(t)?"-0":t}}function No(e){return{integerValue:""+e}}function Ro(e,t){return function(e){return"number"==typeof e&&Number.isInteger(e)&&!Sr(e)&&e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER}(t)?No(t):Ao(e,t)}class Do{constructor(){this._=void 0}}function Oo(e,t,n){return e instanceof xo?function(e,t){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:e.seconds,nanos:e.nanoseconds}}}};return t&&(n.fields.__previous_value__=t),{mapValue:n}}(n,t):e instanceof Mo?Uo(e,t):e instanceof Fo?Vo(e,t):function(e,t){const n=Po(e,t),s=jo(n)+jo(e.k);return Pr(n)&&Pr(e.k)?No(s):Ao(e.M,s)}(e,t)}function Lo(e,t,n){return e instanceof Mo?Uo(e,t):e instanceof Fo?Vo(e,t):n}function Po(e,t){return e instanceof qo?Pr(n=t)||function(e){return!!e&&"doubleValue"in e}(n)?t:{integerValue:0}:null;var n}class xo extends Do{}class Mo extends Do{constructor(e){super(),this.elements=e}}function Uo(e,t){const n=Bo(t);for(const t of e.elements)n.some((e=>Ar(e,t)))||n.push(t);return{arrayValue:{values:n}}}class Fo extends Do{constructor(e){super(),this.elements=e}}function Vo(e,t){let n=Bo(t);for(const t of e.elements)n=n.filter((e=>!Ar(e,t)));return{arrayValue:{values:n}}}class qo extends Do{constructor(e,t){super(),this.M=e,this.k=t}}function jo(e){return yr(e.integerValue||e.doubleValue)}function Bo(e){return xr(e)&&e.arrayValue.values?e.arrayValue.values.slice():[]}class $o{constructor(e,t){this.version=e,this.transformResults=t}}class zo{constructor(e,t){this.updateTime=e,this.exists=t}static none(){return new zo}static exists(e){return new zo(void 0,e)}static updateTime(e){return new zo(e)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(e){return this.exists===e.exists&&(this.updateTime?!!e.updateTime&&this.updateTime.isEqual(e.updateTime):!e.updateTime)}}function Ho(e,t){return void 0!==e.updateTime?t.isFoundDocument()&&t.version.isEqual(e.updateTime):void 0===e.exists||e.exists===t.isFoundDocument()}class Ko{}function Go(e,t,n){e instanceof Qo?function(e,t,n){const s=e.value.clone(),i=ta(e.fieldTransforms,t,n.transformResults);s.setAll(i),t.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(e,t,n):e instanceof Zo?function(e,t,n){if(!Ho(e.precondition,t))return void t.convertToUnknownDocument(n.version);const s=ta(e.fieldTransforms,t,n.transformResults),i=t.data;i.setAll(ea(e)),i.setAll(s),t.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(e,t,n):function(e,t,n){t.convertToNoDocument(n.version).setHasCommittedMutations()}(0,t,n)}function Wo(e,t,n){e instanceof Qo?function(e,t,n){if(!Ho(e.precondition,t))return;const s=e.value.clone(),i=na(e.fieldTransforms,n,t);s.setAll(i),t.convertToFoundDocument(Jo(t),s).setHasLocalMutations()}(e,t,n):e instanceof Zo?function(e,t,n){if(!Ho(e.precondition,t))return;const s=na(e.fieldTransforms,n,t),i=t.data;i.setAll(ea(e)),i.setAll(s),t.convertToFoundDocument(Jo(t),i).setHasLocalMutations()}(e,t,n):function(e,t){Ho(e.precondition,t)&&t.convertToNoDocument(rr.min())}(e,t)}function Xo(e,t){let n=null;for(const s of e.fieldTransforms){const e=t.data.field(s.field),i=Po(s.transform,e||null);null!=i&&(null==n&&(n=jr.empty()),n.set(s.field,i))}return n||null}function Yo(e,t){return e.type===t.type&&!!e.key.isEqual(t.key)&&!!e.precondition.isEqual(t.precondition)&&!!function(e,t){return void 0===e&&void 0===t||!(!e||!t)&&sr(e,t,((e,t)=>function(e,t){return e.field.isEqual(t.field)&&function(e,t){return e instanceof Mo&&t instanceof Mo||e instanceof Fo&&t instanceof Fo?sr(e.elements,t.elements,Ar):e instanceof qo&&t instanceof qo?Ar(e.k,t.k):e instanceof xo&&t instanceof xo}(e.transform,t.transform)}(e,t)))}(e.fieldTransforms,t.fieldTransforms)&&(0===e.type?e.value.isEqual(t.value):1!==e.type||e.data.isEqual(t.data)&&e.fieldMask.isEqual(t.fieldMask))}function Jo(e){return e.isFoundDocument()?e.version:rr.min()}class Qo extends Ko{constructor(e,t,n,s=[]){super(),this.key=e,this.value=t,this.precondition=n,this.fieldTransforms=s,this.type=0}}class Zo extends Ko{constructor(e,t,n,s,i=[]){super(),this.key=e,this.data=t,this.fieldMask=n,this.precondition=s,this.fieldTransforms=i,this.type=1}}function ea(e){const t=new Map;return e.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const s=e.data.field(n);t.set(n,s)}})),t}function ta(e,t,n){const s=new Map;ji(e.length===n.length);for(let i=0;i<n.length;i++){const r=e[i],o=r.transform,a=t.data.field(r.field);s.set(r.field,Lo(o,a,n[i]))}return s}function na(e,t,n){const s=new Map;for(const i of e){const e=i.transform,r=n.data.field(i.field);s.set(i.field,Oo(e,r,t))}return s}class sa extends Ko{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=2,this.fieldTransforms=[]}}class ia extends Ko{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=3,this.fieldTransforms=[]}}class ra{constructor(e){this.count=e}}var oa,aa;function ca(e){if(void 0===e)return Ui("GRPC error has no .code"),$i.UNKNOWN;switch(e){case oa.OK:return $i.OK;case oa.CANCELLED:return $i.CANCELLED;case oa.UNKNOWN:return $i.UNKNOWN;case oa.DEADLINE_EXCEEDED:return $i.DEADLINE_EXCEEDED;case oa.RESOURCE_EXHAUSTED:return $i.RESOURCE_EXHAUSTED;case oa.INTERNAL:return $i.INTERNAL;case oa.UNAVAILABLE:return $i.UNAVAILABLE;case oa.UNAUTHENTICATED:return $i.UNAUTHENTICATED;case oa.INVALID_ARGUMENT:return $i.INVALID_ARGUMENT;case oa.NOT_FOUND:return $i.NOT_FOUND;case oa.ALREADY_EXISTS:return $i.ALREADY_EXISTS;case oa.PERMISSION_DENIED:return $i.PERMISSION_DENIED;case oa.FAILED_PRECONDITION:return $i.FAILED_PRECONDITION;case oa.ABORTED:return $i.ABORTED;case oa.OUT_OF_RANGE:return $i.OUT_OF_RANGE;case oa.UNIMPLEMENTED:return $i.UNIMPLEMENTED;case oa.DATA_LOSS:return $i.DATA_LOSS;default:return qi()}}(aa=oa||(oa={}))[aa.OK=0]="OK",aa[aa.CANCELLED=1]="CANCELLED",aa[aa.UNKNOWN=2]="UNKNOWN",aa[aa.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",aa[aa.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",aa[aa.NOT_FOUND=5]="NOT_FOUND",aa[aa.ALREADY_EXISTS=6]="ALREADY_EXISTS",aa[aa.PERMISSION_DENIED=7]="PERMISSION_DENIED",aa[aa.UNAUTHENTICATED=16]="UNAUTHENTICATED",aa[aa.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",aa[aa.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",aa[aa.ABORTED=10]="ABORTED",aa[aa.OUT_OF_RANGE=11]="OUT_OF_RANGE",aa[aa.UNIMPLEMENTED=12]="UNIMPLEMENTED",aa[aa.INTERNAL=13]="INTERNAL",aa[aa.UNAVAILABLE=14]="UNAVAILABLE",aa[aa.DATA_LOSS=15]="DATA_LOSS";class la{constructor(e,t){this.mapKeyFn=e,this.equalsFn=t,this.inner={},this.innerSize=0}get(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0!==n)for(const[t,s]of n)if(this.equalsFn(t,e))return s}has(e){return void 0!==this.get(e)}set(e,t){const n=this.mapKeyFn(e),s=this.inner[n];if(void 0===s)return this.inner[n]=[[e,t]],void this.innerSize++;for(let n=0;n<s.length;n++)if(this.equalsFn(s[n][0],e))return void(s[n]=[e,t]);s.push([e,t]),this.innerSize++}delete(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0===n)return!1;for(let s=0;s<n.length;s++)if(this.equalsFn(n[s][0],e))return 1===n.length?delete this.inner[t]:n.splice(s,1),this.innerSize--,!0;return!1}forEach(e){ar(this.inner,((t,n)=>{for(const[t,s]of n)e(t,s)}))}isEmpty(){return cr(this.inner)}size(){return this.innerSize}}class ua{constructor(e,t){this.comparator=e,this.root=t||da.EMPTY}insert(e,t){return new ua(this.comparator,this.root.insert(e,t,this.comparator).copy(null,null,da.BLACK,null,null))}remove(e){return new ua(this.comparator,this.root.remove(e,this.comparator).copy(null,null,da.BLACK,null,null))}get(e){let t=this.root;for(;!t.isEmpty();){const n=this.comparator(e,t.key);if(0===n)return t.value;n<0?t=t.left:n>0&&(t=t.right)}return null}indexOf(e){let t=0,n=this.root;for(;!n.isEmpty();){const s=this.comparator(e,n.key);if(0===s)return t+n.left.size;s<0?n=n.left:(t+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(e){return this.root.inorderTraversal(e)}forEach(e){this.inorderTraversal(((t,n)=>(e(t,n),!1)))}toString(){const e=[];return this.inorderTraversal(((t,n)=>(e.push(`${t}:${n}`),!1))),`{${e.join(", ")}}`}reverseTraversal(e){return this.root.reverseTraversal(e)}getIterator(){return new ha(this.root,null,this.comparator,!1)}getIteratorFrom(e){return new ha(this.root,e,this.comparator,!1)}getReverseIterator(){return new ha(this.root,null,this.comparator,!0)}getReverseIteratorFrom(e){return new ha(this.root,e,this.comparator,!0)}}class ha{constructor(e,t,n,s){this.isReverse=s,this.nodeStack=[];let i=1;for(;!e.isEmpty();)if(i=t?n(e.key,t):1,t&&s&&(i*=-1),i<0)e=this.isReverse?e.left:e.right;else{if(0===i){this.nodeStack.push(e);break}this.nodeStack.push(e),e=this.isReverse?e.right:e.left}}getNext(){let e=this.nodeStack.pop();const t={key:e.key,value:e.value};if(this.isReverse)for(e=e.left;!e.isEmpty();)this.nodeStack.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack.push(e),e=e.left;return t}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const e=this.nodeStack[this.nodeStack.length-1];return{key:e.key,value:e.value}}}class da{constructor(e,t,n,s,i){this.key=e,this.value=t,this.color=null!=n?n:da.RED,this.left=null!=s?s:da.EMPTY,this.right=null!=i?i:da.EMPTY,this.size=this.left.size+1+this.right.size}copy(e,t,n,s,i){return new da(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=s?s:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let s=this;const i=n(e,s.key);return s=i<0?s.copy(null,null,null,s.left.insert(e,t,n),null):0===i?s.copy(null,t,null,null,null):s.copy(null,null,null,null,s.right.insert(e,t,n)),s.fixUp()}removeMin(){if(this.left.isEmpty())return da.EMPTY;let e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),e=e.copy(null,null,null,e.left.removeMin(),null),e.fixUp()}remove(e,t){let n,s=this;if(t(e,s.key)<0)s.left.isEmpty()||s.left.isRed()||s.left.left.isRed()||(s=s.moveRedLeft()),s=s.copy(null,null,null,s.left.remove(e,t),null);else{if(s.left.isRed()&&(s=s.rotateRight()),s.right.isEmpty()||s.right.isRed()||s.right.left.isRed()||(s=s.moveRedRight()),0===t(e,s.key)){if(s.right.isEmpty())return da.EMPTY;n=s.right.min(),s=s.copy(n.key,n.value,null,null,s.right.removeMin())}s=s.copy(null,null,null,null,s.right.remove(e,t))}return s.fixUp()}isRed(){return this.color}fixUp(){let e=this;return e.right.isRed()&&!e.left.isRed()&&(e=e.rotateLeft()),e.left.isRed()&&e.left.left.isRed()&&(e=e.rotateRight()),e.left.isRed()&&e.right.isRed()&&(e=e.colorFlip()),e}moveRedLeft(){let e=this.colorFlip();return e.right.left.isRed()&&(e=e.copy(null,null,null,null,e.right.rotateRight()),e=e.rotateLeft(),e=e.colorFlip()),e}moveRedRight(){let e=this.colorFlip();return e.left.left.isRed()&&(e=e.rotateRight(),e=e.colorFlip()),e}rotateLeft(){const e=this.copy(null,null,da.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight(){const e=this.copy(null,null,da.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth(){const e=this.check();return Math.pow(2,e)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw qi();if(this.right.isRed())throw qi();const e=this.left.check();if(e!==this.right.check())throw qi();return e+(this.isRed()?0:1)}}da.EMPTY=null,da.RED=!0,da.BLACK=!1,da.EMPTY=new class{constructor(){this.size=0}get key(){throw qi()}get value(){throw qi()}get color(){throw qi()}get left(){throw qi()}get right(){throw qi()}copy(e,t,n,s,i){return this}insert(e,t,n){return new da(e,t)}remove(e,t){return this}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class fa{constructor(e){this.comparator=e,this.data=new ua(this.comparator)}has(e){return null!==this.data.get(e)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(e){return this.data.indexOf(e)}forEach(e){this.data.inorderTraversal(((t,n)=>(e(t),!1)))}forEachInRange(e,t){const n=this.data.getIteratorFrom(e[0]);for(;n.hasNext();){const s=n.getNext();if(this.comparator(s.key,e[1])>=0)return;t(s.key)}}forEachWhile(e,t){let n;for(n=void 0!==t?this.data.getIteratorFrom(t):this.data.getIterator();n.hasNext();)if(!e(n.getNext().key))return}firstAfterOrEqual(e){const t=this.data.getIteratorFrom(e);return t.hasNext()?t.getNext().key:null}getIterator(){return new pa(this.data.getIterator())}getIteratorFrom(e){return new pa(this.data.getIteratorFrom(e))}add(e){return this.copy(this.data.remove(e).insert(e,!0))}delete(e){return this.has(e)?this.copy(this.data.remove(e)):this}isEmpty(){return this.data.isEmpty()}unionWith(e){let t=this;return t.size<e.size&&(t=e,e=this),e.forEach((e=>{t=t.add(e)})),t}isEqual(e){if(!(e instanceof fa))return!1;if(this.size!==e.size)return!1;const t=this.data.getIterator(),n=e.data.getIterator();for(;t.hasNext();){const e=t.getNext().key,s=n.getNext().key;if(0!==this.comparator(e,s))return!1}return!0}toArray(){const e=[];return this.forEach((t=>{e.push(t)})),e}toString(){const e=[];return this.forEach((t=>e.push(t))),"SortedSet("+e.toString()+")"}copy(e){const t=new fa(this.comparator);return t.data=e,t}}class pa{constructor(e){this.iter=e}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const ma=new ua(kr.comparator);function ga(){return ma}const ya=new ua(kr.comparator);function va(){return ya}function wa(){return new la((e=>e.toString()),((e,t)=>e.isEqual(t)))}const ba=new ua(kr.comparator),Ia=new fa(kr.comparator);function Ea(...e){let t=Ia;for(const n of e)t=t.add(n);return t}const Ta=new fa(nr);function _a(){return Ta}class Sa{constructor(e,t,n,s,i){this.snapshotVersion=e,this.targetChanges=t,this.targetMismatches=n,this.documentUpdates=s,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(e,t){const n=new Map;return n.set(e,ka.createSynthesizedTargetChangeForCurrentChange(e,t)),new Sa(rr.min(),n,_a(),ga(),Ea())}}class ka{constructor(e,t,n,s,i){this.resumeToken=e,this.current=t,this.addedDocuments=n,this.modifiedDocuments=s,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(e,t){return new ka(pr.EMPTY_BYTE_STRING,t,Ea(),Ea(),Ea())}}class Ca{constructor(e,t,n,s){this.O=e,this.removedTargetIds=t,this.key=n,this.F=s}}class Aa{constructor(e,t){this.targetId=e,this.$=t}}class Na{constructor(e,t,n=pr.EMPTY_BYTE_STRING,s=null){this.state=e,this.targetIds=t,this.resumeToken=n,this.cause=s}}class Ra{constructor(){this.B=0,this.L=La(),this.U=pr.EMPTY_BYTE_STRING,this.q=!1,this.G=!0}get current(){return this.q}get resumeToken(){return this.U}get K(){return 0!==this.B}get j(){return this.G}W(e){e.approximateByteSize()>0&&(this.G=!0,this.U=e)}H(){let e=Ea(),t=Ea(),n=Ea();return this.L.forEach(((s,i)=>{switch(i){case 0:e=e.add(s);break;case 2:t=t.add(s);break;case 1:n=n.add(s);break;default:qi()}})),new ka(this.U,this.q,e,t,n)}J(){this.G=!1,this.L=La()}Y(e,t){this.G=!0,this.L=this.L.insert(e,t)}X(e){this.G=!0,this.L=this.L.remove(e)}Z(){this.B+=1}tt(){this.B-=1}et(){this.G=!0,this.q=!0}}class Da{constructor(e){this.nt=e,this.st=new Map,this.it=ga(),this.rt=Oa(),this.ot=new fa(nr)}ut(e){for(const t of e.O)e.F&&e.F.isFoundDocument()?this.at(t,e.F):this.ct(t,e.key,e.F);for(const t of e.removedTargetIds)this.ct(t,e.key,e.F)}ht(e){this.forEachTarget(e,(t=>{const n=this.lt(t);switch(e.state){case 0:this.ft(t)&&n.W(e.resumeToken);break;case 1:n.tt(),n.K||n.J(),n.W(e.resumeToken);break;case 2:n.tt(),n.K||this.removeTarget(t);break;case 3:this.ft(t)&&(n.et(),n.W(e.resumeToken));break;case 4:this.ft(t)&&(this.dt(t),n.W(e.resumeToken));break;default:qi()}}))}forEachTarget(e,t){e.targetIds.length>0?e.targetIds.forEach(t):this.st.forEach(((e,n)=>{this.ft(n)&&t(n)}))}_t(e){const t=e.targetId,n=e.$.count,s=this.wt(t);if(s){const e=s.target;if(Jr(e))if(0===n){const n=new kr(e.path);this.ct(t,n,$r.newNoDocument(n,rr.min()))}else ji(1===n);else this.gt(t)!==n&&(this.dt(t),this.ot=this.ot.add(t))}}yt(e){const t=new Map;this.st.forEach(((n,s)=>{const i=this.wt(s);if(i){if(n.current&&Jr(i.target)){const t=new kr(i.target.path);null!==this.it.get(t)||this.It(s,t)||this.ct(s,t,$r.newNoDocument(t,e))}n.j&&(t.set(s,n.H()),n.J())}}));let n=Ea();this.rt.forEach(((e,t)=>{let s=!0;t.forEachWhile((e=>{const t=this.wt(e);return!t||2===t.purpose||(s=!1,!1)})),s&&(n=n.add(e))})),this.it.forEach(((t,n)=>n.setReadTime(e)));const s=new Sa(e,t,this.ot,this.it,n);return this.it=ga(),this.rt=Oa(),this.ot=new fa(nr),s}at(e,t){if(!this.ft(e))return;const n=this.It(e,t.key)?2:0;this.lt(e).Y(t.key,n),this.it=this.it.insert(t.key,t),this.rt=this.rt.insert(t.key,this.Tt(t.key).add(e))}ct(e,t,n){if(!this.ft(e))return;const s=this.lt(e);this.It(e,t)?s.Y(t,1):s.X(t),this.rt=this.rt.insert(t,this.Tt(t).delete(e)),n&&(this.it=this.it.insert(t,n))}removeTarget(e){this.st.delete(e)}gt(e){const t=this.lt(e).H();return this.nt.getRemoteKeysForTarget(e).size+t.addedDocuments.size-t.removedDocuments.size}Z(e){this.lt(e).Z()}lt(e){let t=this.st.get(e);return t||(t=new Ra,this.st.set(e,t)),t}Tt(e){let t=this.rt.get(e);return t||(t=new fa(nr),this.rt=this.rt.insert(e,t)),t}ft(e){const t=null!==this.wt(e);return t||Mi("WatchChangeAggregator","Detected inactive target",e),t}wt(e){const t=this.st.get(e);return t&&t.K?null:this.nt.Et(e)}dt(e){this.st.set(e,new Ra),this.nt.getRemoteKeysForTarget(e).forEach((t=>{this.ct(e,t,null)}))}It(e,t){return this.nt.getRemoteKeysForTarget(e).has(t)}}function Oa(){return new ua(kr.comparator)}function La(){return new ua(kr.comparator)}const Pa={asc:"ASCENDING",desc:"DESCENDING"},xa={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class Ma{constructor(e,t){this.databaseId=e,this.N=t}}function Ua(e,t){return e.N?`${new Date(1e3*t.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+t.nanoseconds).slice(-9)}Z`:{seconds:""+t.seconds,nanos:t.nanoseconds}}function Fa(e,t){return e.N?t.toBase64():t.toUint8Array()}function Va(e,t){return Ua(e,t.toTimestamp())}function qa(e){return ji(!!e),rr.fromTimestamp(function(e){const t=gr(e);return new ir(t.seconds,t.nanos)}(e))}function ja(e,t){return function(e){return new ur(["projects",e.projectId,"databases",e.database])}(e).child("documents").child(t).canonicalString()}function Ba(e){const t=ur.fromString(e);return ji(oc(t)),t}function $a(e,t){return ja(e.databaseId,t.path)}function za(e,t){const n=Ba(t);if(n.get(1)!==e.databaseId.projectId)throw new zi($i.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+e.databaseId.projectId);if(n.get(3)!==e.databaseId.database)throw new zi($i.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+e.databaseId.database);return new kr(Ga(n))}function Ha(e,t){return ja(e.databaseId,t)}function Ka(e){return new ur(["projects",e.databaseId.projectId,"databases",e.databaseId.database]).canonicalString()}function Ga(e){return ji(e.length>4&&"documents"===e.get(4)),e.popFirst(5)}function Wa(e,t,n){return{name:$a(e,t),fields:n.value.mapValue.fields}}function Xa(e,t){return{documents:[Ha(e,t.path)]}}function Ya(e,t){const n={structuredQuery:{}},s=t.path;null!==t.collectionGroup?(n.parent=Ha(e,s),n.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(n.parent=Ha(e,s.popLast()),n.structuredQuery.from=[{collectionId:s.lastSegment()}]);const i=function(e){if(0===e.length)return;const t=e.map((e=>function(e){if("=="===e.op){if(Ur(e.value))return{unaryFilter:{field:tc(e.field),op:"IS_NAN"}};if(Mr(e.value))return{unaryFilter:{field:tc(e.field),op:"IS_NULL"}}}else if("!="===e.op){if(Ur(e.value))return{unaryFilter:{field:tc(e.field),op:"IS_NOT_NAN"}};if(Mr(e.value))return{unaryFilter:{field:tc(e.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:tc(e.field),op:ec(e.op),value:e.value}}}(e)));return 1===t.length?t[0]:{compositeFilter:{op:"AND",filters:t}}}(t.filters);i&&(n.structuredQuery.where=i);const r=function(e){if(0!==e.length)return e.map((e=>function(e){return{field:tc(e.field),direction:Za(e.dir)}}(e)))}(t.orderBy);r&&(n.structuredQuery.orderBy=r);const o=function(e,t){return e.N||_r(t)?t:{value:t}}(e,t.limit);var a;return null!==o&&(n.structuredQuery.limit=o),t.startAt&&(n.structuredQuery.startAt={before:(a=t.startAt).inclusive,values:a.position}),t.endAt&&(n.structuredQuery.endAt=function(e){return{before:!e.inclusive,values:e.position}}(t.endAt)),n}function Ja(e){let t=function(e){const t=Ba(e);return 4===t.length?ur.emptyPath():Ga(t)}(e.parent);const n=e.structuredQuery,s=n.from?n.from.length:0;let i=null;if(s>0){ji(1===s);const e=n.from[0];e.allDescendants?i=e.collectionId:t=t.child(e.collectionId)}let r=[];n.where&&(r=Qa(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((e=>function(e){return new co(nc(e.field),function(e){switch(e){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(e.direction))}(e))));let a=null;n.limit&&(a=function(e){let t;return t="object"==typeof e?e.value:e,_r(t)?null:t}(n.limit));let c=null;n.startAt&&(c=function(e){const t=!!e.before,n=e.values||[];return new ao(n,t)}(n.startAt));let l=null;return n.endAt&&(l=function(e){const t=!e.before,n=e.values||[];return new ao(n,t)}(n.endAt)),function(e,t,n,s,i,r,o,a){return new fo(e,t,n,s,i,r,o,a)}(t,i,o,r,a,"F",c,l)}function Qa(e){return e?void 0!==e.unaryFilter?[ic(e)]:void 0!==e.fieldFilter?[sc(e)]:void 0!==e.compositeFilter?e.compositeFilter.filters.map((e=>Qa(e))).reduce(((e,t)=>e.concat(t))):qi():[]}function Za(e){return Pa[e]}function ec(e){return xa[e]}function tc(e){return{fieldPath:e.canonicalString()}}function nc(e){return dr.fromServerFormat(e.fieldPath)}function sc(e){return Qr.create(nc(e.fieldFilter.field),function(e){switch(e){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return qi()}}(e.fieldFilter.op),e.fieldFilter.value)}function ic(e){switch(e.unaryFilter.op){case"IS_NAN":const t=nc(e.unaryFilter.field);return Qr.create(t,"==",{doubleValue:NaN});case"IS_NULL":const n=nc(e.unaryFilter.field);return Qr.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const s=nc(e.unaryFilter.field);return Qr.create(s,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=nc(e.unaryFilter.field);return Qr.create(i,"!=",{nullValue:"NULL_VALUE"});default:return qi()}}function rc(e){const t=[];return e.fields.forEach((e=>t.push(e.canonicalString()))),{fieldPaths:t}}function oc(e){return e.length>=4&&"projects"===e.get(0)&&"databases"===e.get(2)}class ac{constructor(e){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,e((e=>{this.isDone=!0,this.result=e,this.nextCallback&&this.nextCallback(e)}),(e=>{this.isDone=!0,this.error=e,this.catchCallback&&this.catchCallback(e)}))}catch(e){return this.next(void 0,e)}next(e,t){return this.callbackAttached&&qi(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(t,this.error):this.wrapSuccess(e,this.result):new ac(((n,s)=>{this.nextCallback=t=>{this.wrapSuccess(e,t).next(n,s)},this.catchCallback=e=>{this.wrapFailure(t,e).next(n,s)}}))}toPromise(){return new Promise(((e,t)=>{this.next(e,t)}))}wrapUserFunction(e){try{const t=e();return t instanceof ac?t:ac.resolve(t)}catch(e){return ac.reject(e)}}wrapSuccess(e,t){return e?this.wrapUserFunction((()=>e(t))):ac.resolve(t)}wrapFailure(e,t){return e?this.wrapUserFunction((()=>e(t))):ac.reject(t)}static resolve(e){return new ac(((t,n)=>{t(e)}))}static reject(e){return new ac(((t,n)=>{n(e)}))}static waitFor(e){return new ac(((t,n)=>{let s=0,i=0,r=!1;e.forEach((e=>{++s,e.next((()=>{++i,r&&i===s&&t()}),(e=>n(e)))})),r=!0,i===s&&t()}))}static or(e){let t=ac.resolve(!1);for(const n of e)t=t.next((e=>e?ac.resolve(e):n()));return t}static forEach(e,t){const n=[];return e.forEach(((e,s)=>{n.push(t.call(this,e,s))})),this.waitFor(n)}}function cc(e){return"IndexedDbTransactionError"===e.name}class lc{constructor(e,t,n,s){this.batchId=e,this.localWriteTime=t,this.baseMutations=n,this.mutations=s}applyToRemoteDocument(e,t){const n=t.mutationResults;for(let t=0;t<this.mutations.length;t++){const s=this.mutations[t];s.key.isEqual(e.key)&&Go(s,e,n[t])}}applyToLocalView(e){for(const t of this.baseMutations)t.key.isEqual(e.key)&&Wo(t,e,this.localWriteTime);for(const t of this.mutations)t.key.isEqual(e.key)&&Wo(t,e,this.localWriteTime)}applyToLocalDocumentSet(e){this.mutations.forEach((t=>{const n=e.get(t.key),s=n;this.applyToLocalView(s),n.isValidDocument()||s.convertToNoDocument(rr.min())}))}keys(){return this.mutations.reduce(((e,t)=>e.add(t.key)),Ea())}isEqual(e){return this.batchId===e.batchId&&sr(this.mutations,e.mutations,((e,t)=>Yo(e,t)))&&sr(this.baseMutations,e.baseMutations,((e,t)=>Yo(e,t)))}}class uc{constructor(e,t,n,s){this.batch=e,this.commitVersion=t,this.mutationResults=n,this.docVersions=s}static from(e,t,n){ji(e.mutations.length===n.length);let s=ba;const i=e.mutations;for(let e=0;e<i.length;e++)s=s.insert(i[e].key,n[e].version);return new uc(e,t,n,s)}}class hc{constructor(e,t){this.largestBatchId=e,this.mutation=t}getKey(){return this.mutation.key}isEqual(e){return null!==e&&this.mutation===e.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class dc{constructor(e,t,n,s,i=rr.min(),r=rr.min(),o=pr.EMPTY_BYTE_STRING){this.target=e,this.targetId=t,this.purpose=n,this.sequenceNumber=s,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=r,this.resumeToken=o}withSequenceNumber(e){return new dc(this.target,this.targetId,this.purpose,e,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(e,t){return new dc(this.target,this.targetId,this.purpose,this.sequenceNumber,t,this.lastLimboFreeSnapshotVersion,e)}withLastLimboFreeSnapshotVersion(e){return new dc(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,e,this.resumeToken)}}class fc{constructor(e){this.Jt=e}}function pc(e){const t=Ja({parent:e.parent,structuredQuery:e.structuredQuery});return"LAST"===e.limitType?Io(t,t.limit,"L"):t}class mc{constructor(){}Zt(e,t){this.te(e,t),t.ee()}te(e,t){if("nullValue"in e)this.ne(t,5);else if("booleanValue"in e)this.ne(t,10),t.se(e.booleanValue?1:0);else if("integerValue"in e)this.ne(t,15),t.se(yr(e.integerValue));else if("doubleValue"in e){const n=yr(e.doubleValue);isNaN(n)?this.ne(t,13):(this.ne(t,15),Sr(n)?t.se(0):t.se(n))}else if("timestampValue"in e){const n=e.timestampValue;this.ne(t,20),"string"==typeof n?t.ie(n):(t.ie(`${n.seconds||""}`),t.se(n.nanos||0))}else if("stringValue"in e)this.re(e.stringValue,t),this.oe(t);else if("bytesValue"in e)this.ne(t,30),t.ue(vr(e.bytesValue)),this.oe(t);else if("referenceValue"in e)this.ae(e.referenceValue,t);else if("geoPointValue"in e){const n=e.geoPointValue;this.ne(t,45),t.se(n.latitude||0),t.se(n.longitude||0)}else"mapValue"in e?qr(e)?this.ne(t,Number.MAX_SAFE_INTEGER):(this.ce(e.mapValue,t),this.oe(t)):"arrayValue"in e?(this.he(e.arrayValue,t),this.oe(t)):qi()}re(e,t){this.ne(t,25),this.le(e,t)}le(e,t){t.ie(e)}ce(e,t){const n=e.fields||{};this.ne(t,55);for(const e of Object.keys(n))this.re(e,t),this.te(n[e],t)}he(e,t){const n=e.values||[];this.ne(t,50);for(const e of n)this.te(e,t)}ae(e,t){this.ne(t,37),kr.fromName(e).path.forEach((e=>{this.ne(t,60),this.le(e,t)}))}ne(e,t){e.se(t)}oe(e){e.se(2)}}mc.fe=new mc;class gc{constructor(){this.qe=new yc}addToCollectionParentIndex(e,t){return this.qe.add(t),ac.resolve()}getCollectionParents(e,t){return ac.resolve(this.qe.getEntries(t))}addFieldIndex(e,t){return ac.resolve()}deleteFieldIndex(e,t){return ac.resolve()}getDocumentsMatchingTarget(e,t){return ac.resolve(null)}getFieldIndex(e,t){return ac.resolve(null)}getFieldIndexes(e,t){return ac.resolve([])}getNextCollectionGroupToUpdate(e){return ac.resolve(null)}updateCollectionGroup(e,t,n){return ac.resolve()}updateIndexEntries(e,t){return ac.resolve()}}class yc{constructor(){this.index={}}add(e){const t=e.lastSegment(),n=e.popLast(),s=this.index[t]||new fa(ur.comparator),i=!s.has(n);return this.index[t]=s.add(n),i}has(e){const t=e.lastSegment(),n=e.popLast(),s=this.index[t];return s&&s.has(n)}getEntries(e){return(this.index[e]||new fa(ur.comparator)).toArray()}}new Uint8Array(0);class vc{constructor(e,t,n){this.cacheSizeCollectionThreshold=e,this.percentileToCollect=t,this.maximumSequenceNumbersToCollect=n}static withCacheSize(e){return new vc(e,vc.DEFAULT_COLLECTION_PERCENTILE,vc.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}vc.DEFAULT_COLLECTION_PERCENTILE=10,vc.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,vc.DEFAULT=new vc(41943040,vc.DEFAULT_COLLECTION_PERCENTILE,vc.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),vc.DISABLED=new vc(-1,0,0);class wc{constructor(e){this.wn=e}next(){return this.wn+=2,this.wn}static mn(){return new wc(0)}static gn(){return new wc(-1)}}async function bc(e){if(e.code!==$i.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==e.message)throw e;Mi("LocalStore","Unexpectedly lost primary lease")}class Ic{constructor(e,t,n){this.fs=e,this.$s=t,this.indexManager=n}Bs(e,t){return this.$s.getAllMutationBatchesAffectingDocumentKey(e,t).next((n=>this.Ls(e,t,n)))}Ls(e,t,n){return this.fs.getEntry(e,t).next((e=>{for(const t of n)t.applyToLocalView(e);return e}))}Us(e,t){e.forEach(((e,n)=>{for(const e of t)e.applyToLocalView(n)}))}qs(e,t){return this.fs.getEntries(e,t).next((t=>this.Gs(e,t).next((()=>t))))}Gs(e,t){return this.$s.getAllMutationBatchesAffectingDocumentKeys(e,t).next((e=>this.Us(t,e)))}Ks(e,t,n){return function(e){return kr.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}(t)?this.Qs(e,t.path):function(e){return null!==e.collectionGroup}(t)?this.js(e,t,n):this.Ws(e,t,n)}Qs(e,t){return this.Bs(e,new kr(t)).next((e=>{let t=va();return e.isFoundDocument()&&(t=t.insert(e.key,e)),t}))}js(e,t,n){const s=t.collectionGroup;let i=va();return this.indexManager.getCollectionParents(e,s).next((r=>ac.forEach(r,(r=>{const o=function(e,t){return new fo(t,null,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(t,r.child(s));return this.Ws(e,o,n).next((e=>{e.forEach(((e,t)=>{i=i.insert(e,t)}))}))})).next((()=>i))))}Ws(e,t,n){let s;return this.fs.getAllFromCollection(e,t.path,n).next((n=>(s=n,this.$s.getAllMutationBatchesAffectingQuery(e,t)))).next((e=>{for(const t of e)for(const e of t.mutations){const n=e.key;let i=s.get(n);null==i&&(i=$r.newInvalidDocument(n),s=s.insert(n,i)),Wo(e,i,t.localWriteTime),i.isFoundDocument()||(s=s.remove(n))}})).next((()=>(s.forEach(((e,n)=>{So(t,n)||(s=s.remove(e))})),s)))}}class Ec{constructor(e,t,n,s){this.targetId=e,this.fromCache=t,this.zs=n,this.Hs=s}static Js(e,t){let n=Ea(),s=Ea();for(const e of t.docChanges)switch(e.type){case 0:n=n.add(e.doc.key);break;case 1:s=s.add(e.doc.key)}return new Ec(e,t.fromCache,n,s)}}class Tc{Ys(e){this.Xs=e}Ks(e,t,n,s){return function(e){return 0===e.filters.length&&null===e.limit&&null==e.startAt&&null==e.endAt&&(0===e.explicitOrderBy.length||1===e.explicitOrderBy.length&&e.explicitOrderBy[0].field.isKeyField())}(t)||n.isEqual(rr.min())?this.Zs(e,t):this.Xs.qs(e,s).next((i=>{const r=this.ti(t,i);return(mo(t)||go(t))&&this.ei(t.limitType,r,s,n)?this.Zs(e,t):(xi()<=$.DEBUG&&Mi("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),_o(t)),this.Xs.Ks(e,t,function(e,t){const n=e.toTimestamp().seconds,s=e.toTimestamp().nanoseconds+1,i=rr.fromTimestamp(1e9===s?new ir(n+1,0):new ir(n,s));return new Hr(i,kr.empty(),t)}(n,-1)).next((e=>(r.forEach((t=>{e=e.insert(t.key,t)})),e))))}))}ti(e,t){let n=new fa(ko(e));return t.forEach(((t,s)=>{So(e,s)&&(n=n.add(s))})),n}ei(e,t,n,s){if(n.size!==t.size)return!0;const i="F"===e?t.last():t.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(s)>0)}Zs(e,t){return xi()<=$.DEBUG&&Mi("QueryEngine","Using full collection scan to execute query:",_o(t)),this.Xs.Ks(e,t,Hr.min())}}class _c{constructor(e,t,n,s){this.persistence=e,this.ni=t,this.M=s,this.si=new ua(nr),this.ii=new la((e=>Xr(e)),Yr),this.ri=new Map,this.oi=e.getRemoteDocumentCache(),this.ls=e.getTargetCache(),this.ds=e.getBundleCache(),this.ui(n)}ui(e){this.indexManager=this.persistence.getIndexManager(e),this.$s=this.persistence.getMutationQueue(e,this.indexManager),this.ai=new Ic(this.oi,this.$s,this.indexManager),this.oi.setIndexManager(this.indexManager),this.ni.Ys(this.ai)}collectGarbage(e){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(t=>e.collect(t,this.si)))}}async function Sc(e,t){const n=Bi(e);return await n.persistence.runTransaction("Handle user change","readonly",(e=>{let s;return n.$s.getAllMutationBatches(e).next((i=>(s=i,n.ui(t),n.$s.getAllMutationBatches(e)))).next((t=>{const i=[],r=[];let o=Ea();for(const e of s){i.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}for(const e of t){r.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}return n.ai.qs(e,o).next((e=>({ci:e,removedBatchIds:i,addedBatchIds:r})))}))}))}function kc(e){const t=Bi(e);return t.persistence.runTransaction("Get last remote snapshot version","readonly",(e=>t.ls.getLastRemoteSnapshotVersion(e)))}function Cc(e,t){const n=Bi(e);return n.persistence.runTransaction("Get next mutation batch","readonly",(e=>(void 0===t&&(t=-1),n.$s.getNextMutationBatchAfterBatchId(e,t))))}async function Ac(e,t,n){const s=Bi(e),i=s.si.get(t),r=n?"readwrite":"readwrite-primary";try{n||await s.persistence.runTransaction("Release target",r,(e=>s.persistence.referenceDelegate.removeTarget(e,i)))}catch(e){if(!cc(e))throw e;Mi("LocalStore",`Failed to update sequence numbers for target ${t}: ${e}`)}s.si=s.si.remove(t),s.ii.delete(i.target)}function Nc(e,t,n){const s=Bi(e);let i=rr.min(),r=Ea();return s.persistence.runTransaction("Execute query","readonly",(e=>function(e,t,n){const s=Bi(e),i=s.ii.get(n);return void 0!==i?ac.resolve(s.si.get(i)):s.ls.getTargetData(t,n)}(s,e,bo(t)).next((t=>{if(t)return i=t.lastLimboFreeSnapshotVersion,s.ls.getMatchingKeysForTargetId(e,t.targetId).next((e=>{r=e}))})).next((()=>s.ni.Ks(e,t,n?i:rr.min(),n?r:Ea()))).next((e=>(function(e,t,n){let s=rr.min();n.forEach(((e,t)=>{t.readTime.compareTo(s)>0&&(s=t.readTime)})),e.ri.set(t,s)}(s,function(e){return e.collectionGroup||(e.path.length%2==1?e.path.lastSegment():e.path.get(e.path.length-2))}(t),e),{documents:e,hi:r})))))}class Rc{constructor(e){this.M=e,this._i=new Map,this.wi=new Map}getBundleMetadata(e,t){return ac.resolve(this._i.get(t))}saveBundleMetadata(e,t){var n;return this._i.set(t.id,{id:(n=t).id,version:n.version,createTime:qa(n.createTime)}),ac.resolve()}getNamedQuery(e,t){return ac.resolve(this.wi.get(t))}saveNamedQuery(e,t){return this.wi.set(t.name,function(e){return{name:e.name,query:pc(e.bundledQuery),readTime:qa(e.readTime)}}(t)),ac.resolve()}}class Dc{constructor(){this.overlays=new ua(kr.comparator),this.mi=new Map}getOverlay(e,t){return ac.resolve(this.overlays.get(t))}saveOverlays(e,t,n){return n.forEach(((n,s)=>{this.Xt(e,t,s)})),ac.resolve()}removeOverlaysForBatchId(e,t,n){const s=this.mi.get(n);return void 0!==s&&(s.forEach((e=>this.overlays=this.overlays.remove(e))),this.mi.delete(n)),ac.resolve()}getOverlaysForCollection(e,t,n){const s=wa(),i=t.length+1,r=new kr(t.child("")),o=this.overlays.getIteratorFrom(r);for(;o.hasNext();){const e=o.getNext().value,r=e.getKey();if(!t.isPrefixOf(r.path))break;r.path.length===i&&e.largestBatchId>n&&s.set(e.getKey(),e)}return ac.resolve(s)}getOverlaysForCollectionGroup(e,t,n,s){let i=new ua(((e,t)=>e-t));const r=this.overlays.getIterator();for(;r.hasNext();){const e=r.getNext().value;if(e.getKey().getCollectionGroup()===t&&e.largestBatchId>n){let t=i.get(e.largestBatchId);null===t&&(t=wa(),i=i.insert(e.largestBatchId,t)),t.set(e.getKey(),e)}}const o=wa(),a=i.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((e,t)=>o.set(e,t))),!(o.size()>=s)););return ac.resolve(o)}Xt(e,t,n){if(null===n)return;const s=this.overlays.get(n.key);if(null!==s){const e=this.mi.get(s.largestBatchId).delete(n.key);this.mi.set(s.largestBatchId,e)}this.overlays=this.overlays.insert(n.key,new hc(t,n));let i=this.mi.get(t);void 0===i&&(i=Ea(),this.mi.set(t,i)),this.mi.set(t,i.add(n.key))}}class Oc{constructor(){this.gi=new fa(Lc.yi),this.pi=new fa(Lc.Ii)}isEmpty(){return this.gi.isEmpty()}addReference(e,t){const n=new Lc(e,t);this.gi=this.gi.add(n),this.pi=this.pi.add(n)}Ti(e,t){e.forEach((e=>this.addReference(e,t)))}removeReference(e,t){this.Ei(new Lc(e,t))}Ai(e,t){e.forEach((e=>this.removeReference(e,t)))}Ri(e){const t=new kr(new ur([])),n=new Lc(t,e),s=new Lc(t,e+1),i=[];return this.pi.forEachInRange([n,s],(e=>{this.Ei(e),i.push(e.key)})),i}bi(){this.gi.forEach((e=>this.Ei(e)))}Ei(e){this.gi=this.gi.delete(e),this.pi=this.pi.delete(e)}Pi(e){const t=new kr(new ur([])),n=new Lc(t,e),s=new Lc(t,e+1);let i=Ea();return this.pi.forEachInRange([n,s],(e=>{i=i.add(e.key)})),i}containsKey(e){const t=new Lc(e,0),n=this.gi.firstAfterOrEqual(t);return null!==n&&e.isEqual(n.key)}}class Lc{constructor(e,t){this.key=e,this.Vi=t}static yi(e,t){return kr.comparator(e.key,t.key)||nr(e.Vi,t.Vi)}static Ii(e,t){return nr(e.Vi,t.Vi)||kr.comparator(e.key,t.key)}}class Pc{constructor(e,t){this.indexManager=e,this.referenceDelegate=t,this.$s=[],this.vi=1,this.Si=new fa(Lc.yi)}checkEmpty(e){return ac.resolve(0===this.$s.length)}addMutationBatch(e,t,n,s){const i=this.vi;this.vi++,this.$s.length>0&&this.$s[this.$s.length-1];const r=new lc(i,t,n,s);this.$s.push(r);for(const t of s)this.Si=this.Si.add(new Lc(t.key,i)),this.indexManager.addToCollectionParentIndex(e,t.key.path.popLast());return ac.resolve(r)}lookupMutationBatch(e,t){return ac.resolve(this.Di(t))}getNextMutationBatchAfterBatchId(e,t){const n=t+1,s=this.Ci(n),i=s<0?0:s;return ac.resolve(this.$s.length>i?this.$s[i]:null)}getHighestUnacknowledgedBatchId(){return ac.resolve(0===this.$s.length?-1:this.vi-1)}getAllMutationBatches(e){return ac.resolve(this.$s.slice())}getAllMutationBatchesAffectingDocumentKey(e,t){const n=new Lc(t,0),s=new Lc(t,Number.POSITIVE_INFINITY),i=[];return this.Si.forEachInRange([n,s],(e=>{const t=this.Di(e.Vi);i.push(t)})),ac.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(e,t){let n=new fa(nr);return t.forEach((e=>{const t=new Lc(e,0),s=new Lc(e,Number.POSITIVE_INFINITY);this.Si.forEachInRange([t,s],(e=>{n=n.add(e.Vi)}))})),ac.resolve(this.xi(n))}getAllMutationBatchesAffectingQuery(e,t){const n=t.path,s=n.length+1;let i=n;kr.isDocumentKey(i)||(i=i.child(""));const r=new Lc(new kr(i),0);let o=new fa(nr);return this.Si.forEachWhile((e=>{const t=e.key.path;return!!n.isPrefixOf(t)&&(t.length===s&&(o=o.add(e.Vi)),!0)}),r),ac.resolve(this.xi(o))}xi(e){const t=[];return e.forEach((e=>{const n=this.Di(e);null!==n&&t.push(n)})),t}removeMutationBatch(e,t){ji(0===this.Ni(t.batchId,"removed")),this.$s.shift();let n=this.Si;return ac.forEach(t.mutations,(s=>{const i=new Lc(s.key,t.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(e,s.key)})).next((()=>{this.Si=n}))}dn(e){}containsKey(e,t){const n=new Lc(t,0),s=this.Si.firstAfterOrEqual(n);return ac.resolve(t.isEqual(s&&s.key))}performConsistencyCheck(e){return this.$s.length,ac.resolve()}Ni(e,t){return this.Ci(e)}Ci(e){return 0===this.$s.length?0:e-this.$s[0].batchId}Di(e){const t=this.Ci(e);return t<0||t>=this.$s.length?null:this.$s[t]}}class xc{constructor(e){this.ki=e,this.docs=new ua(kr.comparator),this.size=0}setIndexManager(e){this.indexManager=e}addEntry(e,t){const n=t.key,s=this.docs.get(n),i=s?s.size:0,r=this.ki(t);return this.docs=this.docs.insert(n,{document:t.mutableCopy(),size:r}),this.size+=r-i,this.indexManager.addToCollectionParentIndex(e,n.path.popLast())}removeEntry(e){const t=this.docs.get(e);t&&(this.docs=this.docs.remove(e),this.size-=t.size)}getEntry(e,t){const n=this.docs.get(t);return ac.resolve(n?n.document.mutableCopy():$r.newInvalidDocument(t))}getEntries(e,t){let n=ga();return t.forEach((e=>{const t=this.docs.get(e);n=n.insert(e,t?t.document.mutableCopy():$r.newInvalidDocument(e))})),ac.resolve(n)}getAllFromCollection(e,t,n){let s=ga();const i=new kr(t.child("")),r=this.docs.getIteratorFrom(i);for(;r.hasNext();){const{key:e,value:{document:i}}=r.getNext();if(!t.isPrefixOf(e.path))break;e.path.length>t.length+1||Kr(zr(i),n)<=0||(s=s.insert(i.key,i.mutableCopy()))}return ac.resolve(s)}getAllFromCollectionGroup(e,t,n,s){qi()}Mi(e,t){return ac.forEach(this.docs,(e=>t(e)))}newChangeBuffer(e){return new Mc(this)}getSize(e){return ac.resolve(this.size)}}class Mc extends class{constructor(){this.changes=new la((e=>e.toString()),((e,t)=>e.isEqual(t))),this.changesApplied=!1}addEntry(e){this.assertNotApplied(),this.changes.set(e.key,e)}removeEntry(e,t){this.assertNotApplied(),this.changes.set(e,$r.newInvalidDocument(e).setReadTime(t))}getEntry(e,t){this.assertNotApplied();const n=this.changes.get(t);return void 0!==n?ac.resolve(n):this.getFromCache(e,t)}getEntries(e,t){return this.getAllFromCache(e,t)}apply(e){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(e)}assertNotApplied(){}}{constructor(e){super(),this.qn=e}applyChanges(e){const t=[];return this.changes.forEach(((n,s)=>{s.isValidDocument()?t.push(this.qn.addEntry(e,s)):this.qn.removeEntry(n)})),ac.waitFor(t)}getFromCache(e,t){return this.qn.getEntry(e,t)}getAllFromCache(e,t){return this.qn.getEntries(e,t)}}class Uc{constructor(e){this.persistence=e,this.Oi=new la((e=>Xr(e)),Yr),this.lastRemoteSnapshotVersion=rr.min(),this.highestTargetId=0,this.Fi=0,this.$i=new Oc,this.targetCount=0,this.Bi=wc.mn()}forEachTarget(e,t){return this.Oi.forEach(((e,n)=>t(n))),ac.resolve()}getLastRemoteSnapshotVersion(e){return ac.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(e){return ac.resolve(this.Fi)}allocateTargetId(e){return this.highestTargetId=this.Bi.next(),ac.resolve(this.highestTargetId)}setTargetsMetadata(e,t,n){return n&&(this.lastRemoteSnapshotVersion=n),t>this.Fi&&(this.Fi=t),ac.resolve()}In(e){this.Oi.set(e.target,e);const t=e.targetId;t>this.highestTargetId&&(this.Bi=new wc(t),this.highestTargetId=t),e.sequenceNumber>this.Fi&&(this.Fi=e.sequenceNumber)}addTargetData(e,t){return this.In(t),this.targetCount+=1,ac.resolve()}updateTargetData(e,t){return this.In(t),ac.resolve()}removeTargetData(e,t){return this.Oi.delete(t.target),this.$i.Ri(t.targetId),this.targetCount-=1,ac.resolve()}removeTargets(e,t,n){let s=0;const i=[];return this.Oi.forEach(((r,o)=>{o.sequenceNumber<=t&&null===n.get(o.targetId)&&(this.Oi.delete(r),i.push(this.removeMatchingKeysForTargetId(e,o.targetId)),s++)})),ac.waitFor(i).next((()=>s))}getTargetCount(e){return ac.resolve(this.targetCount)}getTargetData(e,t){const n=this.Oi.get(t)||null;return ac.resolve(n)}addMatchingKeys(e,t,n){return this.$i.Ti(t,n),ac.resolve()}removeMatchingKeys(e,t,n){this.$i.Ai(t,n);const s=this.persistence.referenceDelegate,i=[];return s&&t.forEach((t=>{i.push(s.markPotentiallyOrphaned(e,t))})),ac.waitFor(i)}removeMatchingKeysForTargetId(e,t){return this.$i.Ri(t),ac.resolve()}getMatchingKeysForTargetId(e,t){const n=this.$i.Pi(t);return ac.resolve(n)}containsKey(e,t){return ac.resolve(this.$i.containsKey(t))}}class Fc{constructor(e,t){this.Li={},this.overlays={},this.ts=new Zi(0),this.es=!1,this.es=!0,this.referenceDelegate=e(this),this.ls=new Uc(this),this.indexManager=new gc,this.fs=function(e){return new xc(e)}((e=>this.referenceDelegate.Ui(e))),this.M=new fc(t),this.ds=new Rc(this.M)}start(){return Promise.resolve()}shutdown(){return this.es=!1,Promise.resolve()}get started(){return this.es}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(e){return this.indexManager}getDocumentOverlayCache(e){let t=this.overlays[e.toKey()];return t||(t=new Dc,this.overlays[e.toKey()]=t),t}getMutationQueue(e,t){let n=this.Li[e.toKey()];return n||(n=new Pc(t,this.referenceDelegate),this.Li[e.toKey()]=n),n}getTargetCache(){return this.ls}getRemoteDocumentCache(){return this.fs}getBundleCache(){return this.ds}runTransaction(e,t,n){Mi("MemoryPersistence","Starting transaction:",e);const s=new Vc(this.ts.next());return this.referenceDelegate.qi(),n(s).next((e=>this.referenceDelegate.Gi(s).next((()=>e)))).toPromise().then((e=>(s.raiseOnCommittedEvent(),e)))}Ki(e,t){return ac.or(Object.values(this.Li).map((n=>()=>n.containsKey(e,t))))}}class Vc extends class{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(e){this.onCommittedListeners.push(e)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((e=>e()))}}{constructor(e){super(),this.currentSequenceNumber=e}}class qc{constructor(e){this.persistence=e,this.Qi=new Oc,this.ji=null}static Wi(e){return new qc(e)}get zi(){if(this.ji)return this.ji;throw qi()}addReference(e,t,n){return this.Qi.addReference(n,t),this.zi.delete(n.toString()),ac.resolve()}removeReference(e,t,n){return this.Qi.removeReference(n,t),this.zi.add(n.toString()),ac.resolve()}markPotentiallyOrphaned(e,t){return this.zi.add(t.toString()),ac.resolve()}removeTarget(e,t){this.Qi.Ri(t.targetId).forEach((e=>this.zi.add(e.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(e,t.targetId).next((e=>{e.forEach((e=>this.zi.add(e.toString())))})).next((()=>n.removeTargetData(e,t)))}qi(){this.ji=new Set}Gi(e){const t=this.persistence.getRemoteDocumentCache().newChangeBuffer();return ac.forEach(this.zi,(n=>{const s=kr.fromPath(n);return this.Hi(e,s).next((e=>{e||t.removeEntry(s,rr.min())}))})).next((()=>(this.ji=null,t.apply(e))))}updateLimboDocument(e,t){return this.Hi(e,t).next((e=>{e?this.zi.delete(t.toString()):this.zi.add(t.toString())}))}Ui(e){return 0}Hi(e,t){return ac.or([()=>ac.resolve(this.Qi.containsKey(t)),()=>this.persistence.getTargetCache().containsKey(e,t),()=>this.persistence.Ki(e,t)])}}class jc{constructor(){this.activeTargetIds=_a()}Xi(e){this.activeTargetIds=this.activeTargetIds.add(e)}Zi(e){this.activeTargetIds=this.activeTargetIds.delete(e)}Yi(){const e={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(e)}}class Bc{constructor(){this.Fr=new jc,this.$r={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(e){}updateMutationState(e,t,n){}addLocalQueryTarget(e){return this.Fr.Xi(e),this.$r[e]||"not-current"}updateQueryState(e,t,n){this.$r[e]=t}removeLocalQueryTarget(e){this.Fr.Zi(e)}isLocalQueryTarget(e){return this.Fr.activeTargetIds.has(e)}clearQueryState(e){delete this.$r[e]}getAllActiveQueryTargets(){return this.Fr.activeTargetIds}isActiveQueryTarget(e){return this.Fr.activeTargetIds.has(e)}start(){return this.Fr=new jc,Promise.resolve()}handleUserChange(e,t,n){}setOnlineState(e){}shutdown(){}writeSequenceNumber(e){}notifyBundleLoaded(e){}}class $c{Br(e){}shutdown(){}}class zc{constructor(){this.Lr=()=>this.Ur(),this.qr=()=>this.Gr(),this.Kr=[],this.Qr()}Br(e){this.Kr.push(e)}shutdown(){window.removeEventListener("online",this.Lr),window.removeEventListener("offline",this.qr)}Qr(){window.addEventListener("online",this.Lr),window.addEventListener("offline",this.qr)}Ur(){Mi("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const e of this.Kr)e(0)}Gr(){Mi("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const e of this.Kr)e(1)}static vt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Hc={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Kc{constructor(e){this.jr=e.jr,this.Wr=e.Wr}zr(e){this.Hr=e}Jr(e){this.Yr=e}onMessage(e){this.Xr=e}close(){this.Wr()}send(e){this.jr(e)}Zr(){this.Hr()}eo(e){this.Yr(e)}no(e){this.Xr(e)}}class Gc extends class{constructor(e){this.databaseInfo=e,this.databaseId=e.databaseId;const t=e.ssl?"https":"http";this.so=t+"://"+e.host,this.io="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}ro(e,t,n,s,i){const r=this.oo(e,t);Mi("RestConnection","Sending: ",r,n);const o={};return this.uo(o,s,i),this.ao(e,r,o,n).then((e=>(Mi("RestConnection","Received: ",e),e)),(t=>{throw Fi("RestConnection",`${e} failed with error: `,t,"url: ",r,"request:",n),t}))}co(e,t,n,s,i){return this.ro(e,t,n,s,i)}uo(e,t,n){e["X-Goog-Api-Client"]="gl-js/ fire/"+Li,e["Content-Type"]="text/plain",this.databaseInfo.appId&&(e["X-Firebase-GMPID"]=this.databaseInfo.appId),t&&t.headers.forEach(((t,n)=>e[n]=t)),n&&n.headers.forEach(((t,n)=>e[n]=t))}oo(e,t){const n=Hc[e];return`${this.so}/v1/${t}:${n}`}}{constructor(e){super(e),this.forceLongPolling=e.forceLongPolling,this.autoDetectLongPolling=e.autoDetectLongPolling,this.useFetchStreams=e.useFetchStreams}ao(e,t,n,s){return new Promise(((i,r)=>{const o=new Ri;o.listenOnce(Si.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case _i.NO_ERROR:const t=o.getResponseJson();Mi("Connection","XHR received:",JSON.stringify(t)),i(t);break;case _i.TIMEOUT:Mi("Connection",'RPC "'+e+'" timed out'),r(new zi($i.DEADLINE_EXCEEDED,"Request time out"));break;case _i.HTTP_ERROR:const n=o.getStatus();if(Mi("Connection",'RPC "'+e+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const e=o.getResponseJson().error;if(e&&e.status&&e.message){const t=function(e){const t=e.toLowerCase().replace(/_/g,"-");return Object.values($i).indexOf(t)>=0?t:$i.UNKNOWN}(e.status);r(new zi(t,e.message))}else r(new zi($i.UNKNOWN,"Server responded with status "+o.getStatus()))}else r(new zi($i.UNAVAILABLE,"Connection failed."));break;default:qi()}}finally{Mi("Connection",'RPC "'+e+'" completed.')}}));const a=JSON.stringify(s);o.send(t,"POST",a,n,15)}))}ho(e,t,n){const s=[this.so,"/","google.firestore.v1.Firestore","/",e,"/channel"],i=Ei(),r=Ti(),o={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(o.xmlHttpFactory=new Ai({})),this.uo(o.initMessageHeaders,t,n),v()||b()||y().indexOf("Electron/")>=0||I()||y().indexOf("MSAppHost/")>=0||w()||(o.httpHeadersOverwriteParam="$httpHeaders");const a=s.join("");Mi("Connection","Creating WebChannel: "+a,o);const c=i.createWebChannel(a,o);let l=!1,u=!1;const h=new Kc({jr:e=>{u?Mi("Connection","Not sending because WebChannel is closed:",e):(l||(Mi("Connection","Opening WebChannel transport."),c.open(),l=!0),Mi("Connection","WebChannel sending:",e),c.send(e))},Wr:()=>c.close()}),d=(e,t,n)=>{e.listen(t,(e=>{try{n(e)}catch(e){setTimeout((()=>{throw e}),0)}}))};return d(c,Ni.EventType.OPEN,(()=>{u||Mi("Connection","WebChannel transport opened.")})),d(c,Ni.EventType.CLOSE,(()=>{u||(u=!0,Mi("Connection","WebChannel transport closed"),h.eo())})),d(c,Ni.EventType.ERROR,(e=>{u||(u=!0,Fi("Connection","WebChannel transport errored:",e),h.eo(new zi($i.UNAVAILABLE,"The operation could not be completed")))})),d(c,Ni.EventType.MESSAGE,(e=>{var t;if(!u){const n=e.data[0];ji(!!n);const s=n,i=s.error||(null===(t=s[0])||void 0===t?void 0:t.error);if(i){Mi("Connection","WebChannel received error:",i);const e=i.status;let t=function(e){const t=oa[e];if(void 0!==t)return ca(t)}(e),n=i.message;void 0===t&&(t=$i.INTERNAL,n="Unknown error status: "+e+" with message "+i.message),u=!0,h.eo(new zi(t,n)),c.close()}else Mi("Connection","WebChannel received:",n),h.no(n)}})),d(r,ki.STAT_EVENT,(e=>{e.stat===Ci.PROXY?Mi("Connection","Detected buffering proxy"):e.stat===Ci.NOPROXY&&Mi("Connection","Detected no buffering proxy")})),setTimeout((()=>{h.Zr()}),0),h}}function Wc(){return"undefined"!=typeof document?document:null}function Xc(e){return new Ma(e,!0)}class Yc{constructor(e,t,n=1e3,s=1.5,i=6e4){this.Jn=e,this.timerId=t,this.lo=n,this.fo=s,this._o=i,this.wo=0,this.mo=null,this.yo=Date.now(),this.reset()}reset(){this.wo=0}po(){this.wo=this._o}Io(e){this.cancel();const t=Math.floor(this.wo+this.To()),n=Math.max(0,Date.now()-this.yo),s=Math.max(0,t-n);s>0&&Mi("ExponentialBackoff",`Backing off for ${s} ms (base delay: ${this.wo} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`),this.mo=this.Jn.enqueueAfterDelay(this.timerId,s,(()=>(this.yo=Date.now(),e()))),this.wo*=this.fo,this.wo<this.lo&&(this.wo=this.lo),this.wo>this._o&&(this.wo=this._o)}Eo(){null!==this.mo&&(this.mo.skipDelay(),this.mo=null)}cancel(){null!==this.mo&&(this.mo.cancel(),this.mo=null)}To(){return(Math.random()-.5)*this.wo}}class Jc{constructor(e,t,n,s,i,r,o,a){this.Jn=e,this.Ao=n,this.Ro=s,this.bo=i,this.authCredentialsProvider=r,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.Po=0,this.Vo=null,this.vo=null,this.stream=null,this.So=new Yc(e,t)}Do(){return 1===this.state||5===this.state||this.Co()}Co(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.xo()}async stop(){this.Do()&&await this.close(0)}No(){this.state=0,this.So.reset()}ko(){this.Co()&&null===this.Vo&&(this.Vo=this.Jn.enqueueAfterDelay(this.Ao,6e4,(()=>this.Mo())))}Oo(e){this.Fo(),this.stream.send(e)}async Mo(){if(this.Co())return this.close(0)}Fo(){this.Vo&&(this.Vo.cancel(),this.Vo=null)}$o(){this.vo&&(this.vo.cancel(),this.vo=null)}async close(e,t){this.Fo(),this.$o(),this.So.cancel(),this.Po++,4!==e?this.So.reset():t&&t.code===$i.RESOURCE_EXHAUSTED?(Ui(t.toString()),Ui("Using maximum backoff delay to prevent overloading the backend."),this.So.po()):t&&t.code===$i.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Bo(),this.stream.close(),this.stream=null),this.state=e,await this.listener.Jr(t)}Bo(){}auth(){this.state=1;const e=this.Lo(this.Po),t=this.Po;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([e,n])=>{this.Po===t&&this.Uo(e,n)}),(t=>{e((()=>{const e=new zi($i.UNKNOWN,"Fetching auth token failed: "+t.message);return this.qo(e)}))}))}Uo(e,t){const n=this.Lo(this.Po);this.stream=this.Go(e,t),this.stream.zr((()=>{n((()=>(this.state=2,this.vo=this.Jn.enqueueAfterDelay(this.Ro,1e4,(()=>(this.Co()&&(this.state=3),Promise.resolve()))),this.listener.zr())))})),this.stream.Jr((e=>{n((()=>this.qo(e)))})),this.stream.onMessage((e=>{n((()=>this.onMessage(e)))}))}xo(){this.state=5,this.So.Io((async()=>{this.state=0,this.start()}))}qo(e){return Mi("PersistentStream",`close with error: ${e}`),this.stream=null,this.close(4,e)}Lo(e){return t=>{this.Jn.enqueueAndForget((()=>this.Po===e?t():(Mi("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Qc extends Jc{constructor(e,t,n,s,i,r){super(e,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",t,n,s,r),this.M=i}Go(e,t){return this.bo.ho("Listen",e,t)}onMessage(e){this.So.reset();const t=function(e,t){let n;if("targetChange"in t){t.targetChange;const s=function(e){return"NO_CHANGE"===e?0:"ADD"===e?1:"REMOVE"===e?2:"CURRENT"===e?3:"RESET"===e?4:qi()}(t.targetChange.targetChangeType||"NO_CHANGE"),i=t.targetChange.targetIds||[],r=function(e,t){return e.N?(ji(void 0===t||"string"==typeof t),pr.fromBase64String(t||"")):(ji(void 0===t||t instanceof Uint8Array),pr.fromUint8Array(t||new Uint8Array))}(e,t.targetChange.resumeToken),o=t.targetChange.cause,a=o&&function(e){const t=void 0===e.code?$i.UNKNOWN:ca(e.code);return new zi(t,e.message||"")}(o);n=new Na(s,i,r,a||null)}else if("documentChange"in t){t.documentChange;const s=t.documentChange;s.document,s.document.name,s.document.updateTime;const i=za(e,s.document.name),r=qa(s.document.updateTime),o=new jr({mapValue:{fields:s.document.fields}}),a=$r.newFoundDocument(i,r,o),c=s.targetIds||[],l=s.removedTargetIds||[];n=new Ca(c,l,a.key,a)}else if("documentDelete"in t){t.documentDelete;const s=t.documentDelete;s.document;const i=za(e,s.document),r=s.readTime?qa(s.readTime):rr.min(),o=$r.newNoDocument(i,r),a=s.removedTargetIds||[];n=new Ca([],a,o.key,o)}else if("documentRemove"in t){t.documentRemove;const s=t.documentRemove;s.document;const i=za(e,s.document),r=s.removedTargetIds||[];n=new Ca([],r,i,null)}else{if(!("filter"in t))return qi();{t.filter;const e=t.filter;e.targetId;const s=e.count||0,i=new ra(s),r=e.targetId;n=new Aa(r,i)}}return n}(this.M,e),n=function(e){if(!("targetChange"in e))return rr.min();const t=e.targetChange;return t.targetIds&&t.targetIds.length?rr.min():t.readTime?qa(t.readTime):rr.min()}(e);return this.listener.Ko(t,n)}Qo(e){const t={};t.database=Ka(this.M),t.addTarget=function(e,t){let n;const s=t.target;return n=Jr(s)?{documents:Xa(e,s)}:{query:Ya(e,s)},n.targetId=t.targetId,t.resumeToken.approximateByteSize()>0?n.resumeToken=Fa(e,t.resumeToken):t.snapshotVersion.compareTo(rr.min())>0&&(n.readTime=Ua(e,t.snapshotVersion.toTimestamp())),n}(this.M,e);const n=function(e,t){const n=function(e,t){switch(t){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return qi()}}(0,t.purpose);return null==n?null:{"goog-listen-tags":n}}(this.M,e);n&&(t.labels=n),this.Oo(t)}jo(e){const t={};t.database=Ka(this.M),t.removeTarget=e,this.Oo(t)}}class Zc extends Jc{constructor(e,t,n,s,i,r){super(e,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",t,n,s,r),this.M=i,this.Wo=!1}get zo(){return this.Wo}start(){this.Wo=!1,this.lastStreamToken=void 0,super.start()}Bo(){this.Wo&&this.Ho([])}Go(e,t){return this.bo.ho("Write",e,t)}onMessage(e){if(ji(!!e.streamToken),this.lastStreamToken=e.streamToken,this.Wo){this.So.reset();const t=function(e,t){return e&&e.length>0?(ji(void 0!==t),e.map((e=>function(e,t){let n=e.updateTime?qa(e.updateTime):qa(t);return n.isEqual(rr.min())&&(n=qa(t)),new $o(n,e.transformResults||[])}(e,t)))):[]}(e.writeResults,e.commitTime),n=qa(e.commitTime);return this.listener.Jo(n,t)}return ji(!e.writeResults||0===e.writeResults.length),this.Wo=!0,this.listener.Yo()}Xo(){const e={};e.database=Ka(this.M),this.Oo(e)}Ho(e){const t={streamToken:this.lastStreamToken,writes:e.map((e=>function(e,t){let n;if(t instanceof Qo)n={update:Wa(e,t.key,t.value)};else if(t instanceof sa)n={delete:$a(e,t.key)};else if(t instanceof Zo)n={update:Wa(e,t.key,t.data),updateMask:rc(t.fieldMask)};else{if(!(t instanceof ia))return qi();n={verify:$a(e,t.key)}}return t.fieldTransforms.length>0&&(n.updateTransforms=t.fieldTransforms.map((e=>function(e,t){const n=t.transform;if(n instanceof xo)return{fieldPath:t.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof Mo)return{fieldPath:t.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof Fo)return{fieldPath:t.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof qo)return{fieldPath:t.field.canonicalString(),increment:n.k};throw qi()}(0,e)))),t.precondition.isNone||(n.currentDocument=function(e,t){return void 0!==t.updateTime?{updateTime:Va(e,t.updateTime)}:void 0!==t.exists?{exists:t.exists}:qi()}(e,t.precondition)),n}(this.M,e)))};this.Oo(t)}}class el extends class{}{constructor(e,t,n,s){super(),this.authCredentials=e,this.appCheckCredentials=t,this.bo=n,this.M=s,this.Zo=!1}tu(){if(this.Zo)throw new zi($i.FAILED_PRECONDITION,"The client has already been terminated.")}ro(e,t,n){return this.tu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,i])=>this.bo.ro(e,t,n,s,i))).catch((e=>{throw"FirebaseError"===e.name?(e.code===$i.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new zi($i.UNKNOWN,e.toString())}))}co(e,t,n){return this.tu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,i])=>this.bo.co(e,t,n,s,i))).catch((e=>{throw"FirebaseError"===e.name?(e.code===$i.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new zi($i.UNKNOWN,e.toString())}))}terminate(){this.Zo=!0}}class tl{constructor(e,t){this.asyncQueue=e,this.onlineStateHandler=t,this.state="Unknown",this.eu=0,this.nu=null,this.su=!0}iu(){0===this.eu&&(this.ru("Unknown"),this.nu=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.nu=null,this.ou("Backend didn't respond within 10 seconds."),this.ru("Offline"),Promise.resolve()))))}uu(e){"Online"===this.state?this.ru("Unknown"):(this.eu++,this.eu>=1&&(this.au(),this.ou(`Connection failed 1 times. Most recent error: ${e.toString()}`),this.ru("Offline")))}set(e){this.au(),this.eu=0,"Online"===e&&(this.su=!1),this.ru(e)}ru(e){e!==this.state&&(this.state=e,this.onlineStateHandler(e))}ou(e){const t=`Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.su?(Ui(t),this.su=!1):Mi("OnlineStateTracker",t)}au(){null!==this.nu&&(this.nu.cancel(),this.nu=null)}}class nl{constructor(e,t,n,s,i){this.localStore=e,this.datastore=t,this.asyncQueue=n,this.remoteSyncer={},this.cu=[],this.hu=new Map,this.lu=new Set,this.fu=[],this.du=i,this.du.Br((e=>{n.enqueueAndForget((async()=>{hl(this)&&(Mi("RemoteStore","Restarting streams for network reachability change."),await async function(e){const t=Bi(e);t.lu.add(4),await il(t),t._u.set("Unknown"),t.lu.delete(4),await sl(t)}(this))}))})),this._u=new tl(n,s)}}async function sl(e){if(hl(e))for(const t of e.fu)await t(!0)}async function il(e){for(const t of e.fu)await t(!1)}function rl(e,t){const n=Bi(e);n.hu.has(t.targetId)||(n.hu.set(t.targetId,t),ul(n)?ll(n):Al(n).Co()&&al(n,t))}function ol(e,t){const n=Bi(e),s=Al(n);n.hu.delete(t),s.Co()&&cl(n,t),0===n.hu.size&&(s.Co()?s.ko():hl(n)&&n._u.set("Unknown"))}function al(e,t){e.wu.Z(t.targetId),Al(e).Qo(t)}function cl(e,t){e.wu.Z(t),Al(e).jo(t)}function ll(e){e.wu=new Da({getRemoteKeysForTarget:t=>e.remoteSyncer.getRemoteKeysForTarget(t),Et:t=>e.hu.get(t)||null}),Al(e).start(),e._u.iu()}function ul(e){return hl(e)&&!Al(e).Do()&&e.hu.size>0}function hl(e){return 0===Bi(e).lu.size}function dl(e){e.wu=void 0}async function fl(e){e.hu.forEach(((t,n)=>{al(e,t)}))}async function pl(e,t){dl(e),ul(e)?(e._u.uu(t),ll(e)):e._u.set("Unknown")}async function ml(e,t,n){if(e._u.set("Online"),t instanceof Na&&2===t.state&&t.cause)try{await async function(e,t){const n=t.cause;for(const s of t.targetIds)e.hu.has(s)&&(await e.remoteSyncer.rejectListen(s,n),e.hu.delete(s),e.wu.removeTarget(s))}(e,t)}catch(n){Mi("RemoteStore","Failed to remove targets %s: %s ",t.targetIds.join(","),n),await gl(e,n)}else if(t instanceof Ca?e.wu.ut(t):t instanceof Aa?e.wu._t(t):e.wu.ht(t),!n.isEqual(rr.min()))try{const t=await kc(e.localStore);n.compareTo(t)>=0&&await function(e,t){const n=e.wu.yt(t);return n.targetChanges.forEach(((n,s)=>{if(n.resumeToken.approximateByteSize()>0){const i=e.hu.get(s);i&&e.hu.set(s,i.withResumeToken(n.resumeToken,t))}})),n.targetMismatches.forEach((t=>{const n=e.hu.get(t);if(!n)return;e.hu.set(t,n.withResumeToken(pr.EMPTY_BYTE_STRING,n.snapshotVersion)),cl(e,t);const s=new dc(n.target,t,1,n.sequenceNumber);al(e,s)})),e.remoteSyncer.applyRemoteEvent(n)}(e,n)}catch(t){Mi("RemoteStore","Failed to raise snapshot:",t),await gl(e,t)}}async function gl(e,t,n){if(!cc(t))throw t;e.lu.add(1),await il(e),e._u.set("Offline"),n||(n=()=>kc(e.localStore)),e.asyncQueue.enqueueRetryable((async()=>{Mi("RemoteStore","Retrying IndexedDB access"),await n(),e.lu.delete(1),await sl(e)}))}function yl(e,t){return t().catch((n=>gl(e,n,t)))}async function vl(e){const t=Bi(e),n=Nl(t);let s=t.cu.length>0?t.cu[t.cu.length-1].batchId:-1;for(;wl(t);)try{const e=await Cc(t.localStore,s);if(null===e){0===t.cu.length&&n.ko();break}s=e.batchId,bl(t,e)}catch(e){await gl(t,e)}Il(t)&&El(t)}function wl(e){return hl(e)&&e.cu.length<10}function bl(e,t){e.cu.push(t);const n=Nl(e);n.Co()&&n.zo&&n.Ho(t.mutations)}function Il(e){return hl(e)&&!Nl(e).Do()&&e.cu.length>0}function El(e){Nl(e).start()}async function Tl(e){Nl(e).Xo()}async function _l(e){const t=Nl(e);for(const n of e.cu)t.Ho(n.mutations)}async function Sl(e,t,n){const s=e.cu.shift(),i=uc.from(s,t,n);await yl(e,(()=>e.remoteSyncer.applySuccessfulWrite(i))),await vl(e)}async function kl(e,t){t&&Nl(e).zo&&await async function(e,t){if(function(e){switch(e){default:return qi();case $i.CANCELLED:case $i.UNKNOWN:case $i.DEADLINE_EXCEEDED:case $i.RESOURCE_EXHAUSTED:case $i.INTERNAL:case $i.UNAVAILABLE:case $i.UNAUTHENTICATED:return!1;case $i.INVALID_ARGUMENT:case $i.NOT_FOUND:case $i.ALREADY_EXISTS:case $i.PERMISSION_DENIED:case $i.FAILED_PRECONDITION:case $i.ABORTED:case $i.OUT_OF_RANGE:case $i.UNIMPLEMENTED:case $i.DATA_LOSS:return!0}}(n=t.code)&&n!==$i.ABORTED){const n=e.cu.shift();Nl(e).No(),await yl(e,(()=>e.remoteSyncer.rejectFailedWrite(n.batchId,t))),await vl(e)}var n}(e,t),Il(e)&&El(e)}async function Cl(e,t){const n=Bi(e);n.asyncQueue.verifyOperationInProgress(),Mi("RemoteStore","RemoteStore received new credentials");const s=hl(n);n.lu.add(3),await il(n),s&&n._u.set("Unknown"),await n.remoteSyncer.handleCredentialChange(t),n.lu.delete(3),await sl(n)}function Al(e){return e.mu||(e.mu=function(e,t,n){const s=Bi(e);return s.tu(),new Qc(t,s.bo,s.authCredentials,s.appCheckCredentials,s.M,n)}(e.datastore,e.asyncQueue,{zr:fl.bind(null,e),Jr:pl.bind(null,e),Ko:ml.bind(null,e)}),e.fu.push((async t=>{t?(e.mu.No(),ul(e)?ll(e):e._u.set("Unknown")):(await e.mu.stop(),dl(e))}))),e.mu}function Nl(e){return e.gu||(e.gu=function(e,t,n){const s=Bi(e);return s.tu(),new Zc(t,s.bo,s.authCredentials,s.appCheckCredentials,s.M,n)}(e.datastore,e.asyncQueue,{zr:Tl.bind(null,e),Jr:kl.bind(null,e),Yo:_l.bind(null,e),Jo:Sl.bind(null,e)}),e.fu.push((async t=>{t?(e.gu.No(),await vl(e)):(await e.gu.stop(),e.cu.length>0&&(Mi("RemoteStore",`Stopping write stream with ${e.cu.length} pending writes`),e.cu=[]))}))),e.gu}class Rl{constructor(e,t,n,s,i){this.asyncQueue=e,this.timerId=t,this.targetTimeMs=n,this.op=s,this.removalCallback=i,this.deferred=new Hi,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((e=>{}))}static createAndSchedule(e,t,n,s,i){const r=Date.now()+n,o=new Rl(e,t,r,s,i);return o.start(n),o}start(e){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),e)}skipDelay(){return this.handleDelayElapsed()}cancel(e){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new zi($i.CANCELLED,"Operation cancelled"+(e?": "+e:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((e=>this.deferred.resolve(e)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function Dl(e,t){if(Ui("AsyncQueue",`${t}: ${e}`),cc(e))return new zi($i.UNAVAILABLE,`${t}: ${e}`);throw e}class Ol{constructor(e){this.comparator=e?(t,n)=>e(t,n)||kr.comparator(t.key,n.key):(e,t)=>kr.comparator(e.key,t.key),this.keyedMap=va(),this.sortedSet=new ua(this.comparator)}static emptySet(e){return new Ol(e.comparator)}has(e){return null!=this.keyedMap.get(e)}get(e){return this.keyedMap.get(e)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(e){const t=this.keyedMap.get(e);return t?this.sortedSet.indexOf(t):-1}get size(){return this.sortedSet.size}forEach(e){this.sortedSet.inorderTraversal(((t,n)=>(e(t),!1)))}add(e){const t=this.delete(e.key);return t.copy(t.keyedMap.insert(e.key,e),t.sortedSet.insert(e,null))}delete(e){const t=this.get(e);return t?this.copy(this.keyedMap.remove(e),this.sortedSet.remove(t)):this}isEqual(e){if(!(e instanceof Ol))return!1;if(this.size!==e.size)return!1;const t=this.sortedSet.getIterator(),n=e.sortedSet.getIterator();for(;t.hasNext();){const e=t.getNext().key,s=n.getNext().key;if(!e.isEqual(s))return!1}return!0}toString(){const e=[];return this.forEach((t=>{e.push(t.toString())})),0===e.length?"DocumentSet ()":"DocumentSet (\n  "+e.join("  \n")+"\n)"}copy(e,t){const n=new Ol;return n.comparator=this.comparator,n.keyedMap=e,n.sortedSet=t,n}}class Ll{constructor(){this.yu=new ua(kr.comparator)}track(e){const t=e.doc.key,n=this.yu.get(t);n?0!==e.type&&3===n.type?this.yu=this.yu.insert(t,e):3===e.type&&1!==n.type?this.yu=this.yu.insert(t,{type:n.type,doc:e.doc}):2===e.type&&2===n.type?this.yu=this.yu.insert(t,{type:2,doc:e.doc}):2===e.type&&0===n.type?this.yu=this.yu.insert(t,{type:0,doc:e.doc}):1===e.type&&0===n.type?this.yu=this.yu.remove(t):1===e.type&&2===n.type?this.yu=this.yu.insert(t,{type:1,doc:n.doc}):0===e.type&&1===n.type?this.yu=this.yu.insert(t,{type:2,doc:e.doc}):qi():this.yu=this.yu.insert(t,e)}pu(){const e=[];return this.yu.inorderTraversal(((t,n)=>{e.push(n)})),e}}class Pl{constructor(e,t,n,s,i,r,o,a){this.query=e,this.docs=t,this.oldDocs=n,this.docChanges=s,this.mutatedKeys=i,this.fromCache=r,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(e,t,n,s){const i=[];return t.forEach((e=>{i.push({type:0,doc:e})})),new Pl(e,t,Ol.emptySet(t),i,n,s,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(e){if(!(this.fromCache===e.fromCache&&this.syncStateChanged===e.syncStateChanged&&this.mutatedKeys.isEqual(e.mutatedKeys)&&Eo(this.query,e.query)&&this.docs.isEqual(e.docs)&&this.oldDocs.isEqual(e.oldDocs)))return!1;const t=this.docChanges,n=e.docChanges;if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(t[e].type!==n[e].type||!t[e].doc.isEqual(n[e].doc))return!1;return!0}}class xl{constructor(){this.Iu=void 0,this.listeners=[]}}class Ml{constructor(){this.queries=new la((e=>To(e)),Eo),this.onlineState="Unknown",this.Tu=new Set}}async function Ul(e,t){const n=Bi(e),s=t.query;let i=!1,r=n.queries.get(s);if(r||(i=!0,r=new xl),i)try{r.Iu=await n.onListen(s)}catch(e){const n=Dl(e,`Initialization of query '${_o(t.query)}' failed`);return void t.onError(n)}n.queries.set(s,r),r.listeners.push(t),t.Eu(n.onlineState),r.Iu&&t.Au(r.Iu)&&ql(n)}function Fl(e,t){const n=Bi(e);let s=!1;for(const e of t){const t=e.query,i=n.queries.get(t);if(i){for(const t of i.listeners)t.Au(e)&&(s=!0);i.Iu=e}}s&&ql(n)}function Vl(e,t,n){const s=Bi(e),i=s.queries.get(t);if(i)for(const e of i.listeners)e.onError(n);s.queries.delete(t)}function ql(e){e.Tu.forEach((e=>{e.next()}))}class jl{constructor(e,t,n){this.query=e,this.Ru=t,this.bu=!1,this.Pu=null,this.onlineState="Unknown",this.options=n||{}}Au(e){if(!this.options.includeMetadataChanges){const t=[];for(const n of e.docChanges)3!==n.type&&t.push(n);e=new Pl(e.query,e.docs,e.oldDocs,t,e.mutatedKeys,e.fromCache,e.syncStateChanged,!0)}let t=!1;return this.bu?this.Vu(e)&&(this.Ru.next(e),t=!0):this.vu(e,this.onlineState)&&(this.Su(e),t=!0),this.Pu=e,t}onError(e){this.Ru.error(e)}Eu(e){this.onlineState=e;let t=!1;return this.Pu&&!this.bu&&this.vu(this.Pu,e)&&(this.Su(this.Pu),t=!0),t}vu(e,t){if(!e.fromCache)return!0;const n="Offline"!==t;return!(this.options.Du&&n||e.docs.isEmpty()&&"Offline"!==t)}Vu(e){if(e.docChanges.length>0)return!0;const t=this.Pu&&this.Pu.hasPendingWrites!==e.hasPendingWrites;return!(!e.syncStateChanged&&!t)&&!0===this.options.includeMetadataChanges}Su(e){e=Pl.fromInitialDocuments(e.query,e.docs,e.mutatedKeys,e.fromCache),this.bu=!0,this.Ru.next(e)}}class Bl{constructor(e){this.key=e}}class $l{constructor(e){this.key=e}}class zl{constructor(e,t){this.query=e,this.Fu=t,this.$u=null,this.current=!1,this.Bu=Ea(),this.mutatedKeys=Ea(),this.Lu=ko(e),this.Uu=new Ol(this.Lu)}get qu(){return this.Fu}Gu(e,t){const n=t?t.Ku:new Ll,s=t?t.Uu:this.Uu;let i=t?t.mutatedKeys:this.mutatedKeys,r=s,o=!1;const a=mo(this.query)&&s.size===this.query.limit?s.last():null,c=go(this.query)&&s.size===this.query.limit?s.first():null;if(e.inorderTraversal(((e,t)=>{const l=s.get(e),u=So(this.query,t)?t:null,h=!!l&&this.mutatedKeys.has(l.key),d=!!u&&(u.hasLocalMutations||this.mutatedKeys.has(u.key)&&u.hasCommittedMutations);let f=!1;l&&u?l.data.isEqual(u.data)?h!==d&&(n.track({type:3,doc:u}),f=!0):this.Qu(l,u)||(n.track({type:2,doc:u}),f=!0,(a&&this.Lu(u,a)>0||c&&this.Lu(u,c)<0)&&(o=!0)):!l&&u?(n.track({type:0,doc:u}),f=!0):l&&!u&&(n.track({type:1,doc:l}),f=!0,(a||c)&&(o=!0)),f&&(u?(r=r.add(u),i=d?i.add(e):i.delete(e)):(r=r.delete(e),i=i.delete(e)))})),mo(this.query)||go(this.query))for(;r.size>this.query.limit;){const e=mo(this.query)?r.last():r.first();r=r.delete(e.key),i=i.delete(e.key),n.track({type:1,doc:e})}return{Uu:r,Ku:n,ei:o,mutatedKeys:i}}Qu(e,t){return e.hasLocalMutations&&t.hasCommittedMutations&&!t.hasLocalMutations}applyChanges(e,t,n){const s=this.Uu;this.Uu=e.Uu,this.mutatedKeys=e.mutatedKeys;const i=e.Ku.pu();i.sort(((e,t)=>function(e,t){const n=e=>{switch(e){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return qi()}};return n(e)-n(t)}(e.type,t.type)||this.Lu(e.doc,t.doc))),this.ju(n);const r=t?this.Wu():[],o=0===this.Bu.size&&this.current?1:0,a=o!==this.$u;return this.$u=o,0!==i.length||a?{snapshot:new Pl(this.query,e.Uu,s,i,e.mutatedKeys,0===o,a,!1),zu:r}:{zu:r}}Eu(e){return this.current&&"Offline"===e?(this.current=!1,this.applyChanges({Uu:this.Uu,Ku:new Ll,mutatedKeys:this.mutatedKeys,ei:!1},!1)):{zu:[]}}Hu(e){return!this.Fu.has(e)&&!!this.Uu.has(e)&&!this.Uu.get(e).hasLocalMutations}ju(e){e&&(e.addedDocuments.forEach((e=>this.Fu=this.Fu.add(e))),e.modifiedDocuments.forEach((e=>{})),e.removedDocuments.forEach((e=>this.Fu=this.Fu.delete(e))),this.current=e.current)}Wu(){if(!this.current)return[];const e=this.Bu;this.Bu=Ea(),this.Uu.forEach((e=>{this.Hu(e.key)&&(this.Bu=this.Bu.add(e.key))}));const t=[];return e.forEach((e=>{this.Bu.has(e)||t.push(new $l(e))})),this.Bu.forEach((n=>{e.has(n)||t.push(new Bl(n))})),t}Ju(e){this.Fu=e.hi,this.Bu=Ea();const t=this.Gu(e.documents);return this.applyChanges(t,!0)}Yu(){return Pl.fromInitialDocuments(this.query,this.Uu,this.mutatedKeys,0===this.$u)}}class Hl{constructor(e,t,n){this.query=e,this.targetId=t,this.view=n}}class Kl{constructor(e){this.key=e,this.Xu=!1}}class Gl{constructor(e,t,n,s,i,r){this.localStore=e,this.remoteStore=t,this.eventManager=n,this.sharedClientState=s,this.currentUser=i,this.maxConcurrentLimboResolutions=r,this.Zu={},this.ta=new la((e=>To(e)),Eo),this.ea=new Map,this.na=new Set,this.sa=new ua(kr.comparator),this.ia=new Map,this.ra=new Oc,this.oa={},this.ua=new Map,this.aa=wc.gn(),this.onlineState="Unknown",this.ca=void 0}get isPrimaryClient(){return!0===this.ca}}async function Wl(e,t){const n=function(e){const t=Bi(e);return t.remoteStore.remoteSyncer.applyRemoteEvent=Yl.bind(null,t),t.remoteStore.remoteSyncer.getRemoteKeysForTarget=uu.bind(null,t),t.remoteStore.remoteSyncer.rejectListen=Ql.bind(null,t),t.Zu.Ko=Fl.bind(null,t.eventManager),t.Zu.la=Vl.bind(null,t.eventManager),t}(e);let s,i;const r=n.ta.get(t);if(r)s=r.targetId,n.sharedClientState.addLocalQueryTarget(s),i=r.view.Yu();else{const e=await function(e,t){const n=Bi(e);return n.persistence.runTransaction("Allocate target","readwrite",(e=>{let s;return n.ls.getTargetData(e,t).next((i=>i?(s=i,ac.resolve(s)):n.ls.allocateTargetId(e).next((i=>(s=new dc(t,i,0,e.currentSequenceNumber),n.ls.addTargetData(e,s).next((()=>s)))))))})).then((e=>{const s=n.si.get(e.targetId);return(null===s||e.snapshotVersion.compareTo(s.snapshotVersion)>0)&&(n.si=n.si.insert(e.targetId,e),n.ii.set(t,e.targetId)),e}))}(n.localStore,bo(t));n.isPrimaryClient&&rl(n.remoteStore,e);const r=n.sharedClientState.addLocalQueryTarget(e.targetId);s=e.targetId,i=await async function(e,t,n,s){e.ha=(t,n,s)=>async function(e,t,n,s){let i=t.view.Gu(n);i.ei&&(i=await Nc(e.localStore,t.query,!1).then((({documents:e})=>t.view.Gu(e,i))));const r=s&&s.targetChanges.get(t.targetId),o=t.view.applyChanges(i,e.isPrimaryClient,r);return ru(e,t.targetId,o.zu),o.snapshot}(e,t,n,s);const i=await Nc(e.localStore,t,!0),r=new zl(t,i.hi),o=r.Gu(i.documents),a=ka.createSynthesizedTargetChangeForCurrentChange(n,s&&"Offline"!==e.onlineState),c=r.applyChanges(o,e.isPrimaryClient,a);ru(e,n,c.zu);const l=new Hl(t,n,r);return e.ta.set(t,l),e.ea.has(n)?e.ea.get(n).push(t):e.ea.set(n,[t]),c.snapshot}(n,t,s,"current"===r)}return i}async function Xl(e,t){const n=Bi(e),s=n.ta.get(t),i=n.ea.get(s.targetId);if(i.length>1)return n.ea.set(s.targetId,i.filter((e=>!Eo(e,t)))),void n.ta.delete(t);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(s.targetId),n.sharedClientState.isActiveQueryTarget(s.targetId)||await Ac(n.localStore,s.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(s.targetId),ol(n.remoteStore,s.targetId),su(n,s.targetId)})).catch(bc)):(su(n,s.targetId),await Ac(n.localStore,s.targetId,!0))}async function Yl(e,t){const n=Bi(e);try{const e=await function(e,t){const n=Bi(e),s=t.snapshotVersion;let i=n.si;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(e=>{const r=n.oi.newChangeBuffer({trackRemovals:!0});i=n.si;const o=[];t.targetChanges.forEach(((r,a)=>{const c=i.get(a);if(!c)return;o.push(n.ls.removeMatchingKeys(e,r.removedDocuments,a).next((()=>n.ls.addMatchingKeys(e,r.addedDocuments,a))));let l=c.withSequenceNumber(e.currentSequenceNumber);t.targetMismatches.has(a)?l=l.withResumeToken(pr.EMPTY_BYTE_STRING,rr.min()).withLastLimboFreeSnapshotVersion(rr.min()):r.resumeToken.approximateByteSize()>0&&(l=l.withResumeToken(r.resumeToken,s)),i=i.insert(a,l),function(e,t,n){return 0===e.resumeToken.approximateByteSize()||t.snapshotVersion.toMicroseconds()-e.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(c,l,r)&&o.push(n.ls.updateTargetData(e,l))}));let a=ga();if(t.documentUpdates.forEach((s=>{t.resolvedLimboDocuments.has(s)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(e,s))})),o.push(function(e,t,n){let s=Ea();return n.forEach((e=>s=s.add(e))),t.getEntries(e,s).next((e=>{let s=ga();return n.forEach(((n,i)=>{const r=e.get(n);i.isNoDocument()&&i.version.isEqual(rr.min())?(t.removeEntry(n,i.readTime),s=s.insert(n,i)):!r.isValidDocument()||i.version.compareTo(r.version)>0||0===i.version.compareTo(r.version)&&r.hasPendingWrites?(t.addEntry(i),s=s.insert(n,i)):Mi("LocalStore","Ignoring outdated watch update for ",n,". Current version:",r.version," Watch version:",i.version)})),s}))}(e,r,t.documentUpdates).next((e=>{a=e}))),!s.isEqual(rr.min())){const t=n.ls.getLastRemoteSnapshotVersion(e).next((t=>n.ls.setTargetsMetadata(e,e.currentSequenceNumber,s)));o.push(t)}return ac.waitFor(o).next((()=>r.apply(e))).next((()=>n.ai.Gs(e,a))).next((()=>a))})).then((e=>(n.si=i,e)))}(n.localStore,t);t.targetChanges.forEach(((e,t)=>{const s=n.ia.get(t);s&&(ji(e.addedDocuments.size+e.modifiedDocuments.size+e.removedDocuments.size<=1),e.addedDocuments.size>0?s.Xu=!0:e.modifiedDocuments.size>0?ji(s.Xu):e.removedDocuments.size>0&&(ji(s.Xu),s.Xu=!1))})),await cu(n,e,t)}catch(e){await bc(e)}}function Jl(e,t,n){const s=Bi(e);if(s.isPrimaryClient&&0===n||!s.isPrimaryClient&&1===n){const e=[];s.ta.forEach(((n,s)=>{const i=s.view.Eu(t);i.snapshot&&e.push(i.snapshot)})),function(e,t){const n=Bi(e);n.onlineState=t;let s=!1;n.queries.forEach(((e,n)=>{for(const e of n.listeners)e.Eu(t)&&(s=!0)})),s&&ql(n)}(s.eventManager,t),e.length&&s.Zu.Ko(e),s.onlineState=t,s.isPrimaryClient&&s.sharedClientState.setOnlineState(t)}}async function Ql(e,t,n){const s=Bi(e);s.sharedClientState.updateQueryState(t,"rejected",n);const i=s.ia.get(t),r=i&&i.key;if(r){let e=new ua(kr.comparator);e=e.insert(r,$r.newNoDocument(r,rr.min()));const n=Ea().add(r),i=new Sa(rr.min(),new Map,new fa(nr),e,n);await Yl(s,i),s.sa=s.sa.remove(r),s.ia.delete(t),au(s)}else await Ac(s.localStore,t,!1).then((()=>su(s,t,n))).catch(bc)}async function Zl(e,t){const n=Bi(e),s=t.batch.batchId;try{const e=await function(e,t){const n=Bi(e);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(e=>{const s=t.batch.keys(),i=n.oi.newChangeBuffer({trackRemovals:!0});return function(e,t,n,s){const i=n.batch,r=i.keys();let o=ac.resolve();return r.forEach((e=>{o=o.next((()=>s.getEntry(t,e))).next((t=>{const r=n.docVersions.get(e);ji(null!==r),t.version.compareTo(r)<0&&(i.applyToRemoteDocument(t,n),t.isValidDocument()&&(t.setReadTime(n.commitVersion),s.addEntry(t)))}))})),o.next((()=>e.$s.removeMutationBatch(t,i)))}(n,e,t,i).next((()=>i.apply(e))).next((()=>n.$s.performConsistencyCheck(e))).next((()=>n.ai.qs(e,s)))}))}(n.localStore,t);nu(n,s,null),tu(n,s),n.sharedClientState.updateMutationState(s,"acknowledged"),await cu(n,e)}catch(e){await bc(e)}}async function eu(e,t,n){const s=Bi(e);try{const e=await function(e,t){const n=Bi(e);return n.persistence.runTransaction("Reject batch","readwrite-primary",(e=>{let s;return n.$s.lookupMutationBatch(e,t).next((t=>(ji(null!==t),s=t.keys(),n.$s.removeMutationBatch(e,t)))).next((()=>n.$s.performConsistencyCheck(e))).next((()=>n.ai.qs(e,s)))}))}(s.localStore,t);nu(s,t,n),tu(s,t),s.sharedClientState.updateMutationState(t,"rejected",n),await cu(s,e)}catch(n){await bc(n)}}function tu(e,t){(e.ua.get(t)||[]).forEach((e=>{e.resolve()})),e.ua.delete(t)}function nu(e,t,n){const s=Bi(e);let i=s.oa[s.currentUser.toKey()];if(i){const e=i.get(t);e&&(n?e.reject(n):e.resolve(),i=i.remove(t)),s.oa[s.currentUser.toKey()]=i}}function su(e,t,n=null){e.sharedClientState.removeLocalQueryTarget(t);for(const s of e.ea.get(t))e.ta.delete(s),n&&e.Zu.la(s,n);e.ea.delete(t),e.isPrimaryClient&&e.ra.Ri(t).forEach((t=>{e.ra.containsKey(t)||iu(e,t)}))}function iu(e,t){e.na.delete(t.path.canonicalString());const n=e.sa.get(t);null!==n&&(ol(e.remoteStore,n),e.sa=e.sa.remove(t),e.ia.delete(n),au(e))}function ru(e,t,n){for(const s of n)s instanceof Bl?(e.ra.addReference(s.key,t),ou(e,s)):s instanceof $l?(Mi("SyncEngine","Document no longer in limbo: "+s.key),e.ra.removeReference(s.key,t),e.ra.containsKey(s.key)||iu(e,s.key)):qi()}function ou(e,t){const n=t.key,s=n.path.canonicalString();e.sa.get(n)||e.na.has(s)||(Mi("SyncEngine","New document in limbo: "+n),e.na.add(s),au(e))}function au(e){for(;e.na.size>0&&e.sa.size<e.maxConcurrentLimboResolutions;){const t=e.na.values().next().value;e.na.delete(t);const n=new kr(ur.fromString(t)),s=e.aa.next();e.ia.set(s,new Kl(n)),e.sa=e.sa.insert(n,s),rl(e.remoteStore,new dc(bo(po(n.path)),s,2,Zi.A))}}async function cu(e,t,n){const s=Bi(e),i=[],r=[],o=[];s.ta.isEmpty()||(s.ta.forEach(((e,a)=>{o.push(s.ha(a,t,n).then((e=>{if(e){s.isPrimaryClient&&s.sharedClientState.updateQueryState(a.targetId,e.fromCache?"not-current":"current"),i.push(e);const t=Ec.Js(a.targetId,e);r.push(t)}})))})),await Promise.all(o),s.Zu.Ko(i),await async function(e,t){const n=Bi(e);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(e=>ac.forEach(t,(t=>ac.forEach(t.zs,(s=>n.persistence.referenceDelegate.addReference(e,t.targetId,s))).next((()=>ac.forEach(t.Hs,(s=>n.persistence.referenceDelegate.removeReference(e,t.targetId,s)))))))))}catch(e){if(!cc(e))throw e;Mi("LocalStore","Failed to update sequence numbers: "+e)}for(const e of t){const t=e.targetId;if(!e.fromCache){const e=n.si.get(t),s=e.snapshotVersion,i=e.withLastLimboFreeSnapshotVersion(s);n.si=n.si.insert(t,i)}}}(s.localStore,r))}async function lu(e,t){const n=Bi(e);if(!n.currentUser.isEqual(t)){Mi("SyncEngine","User change. New user:",t.toKey());const e=await Sc(n.localStore,t);n.currentUser=t,function(e,t){e.ua.forEach((e=>{e.forEach((e=>{e.reject(new zi($i.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),e.ua.clear()}(n),n.sharedClientState.handleUserChange(t,e.removedBatchIds,e.addedBatchIds),await cu(n,e.ci)}}function uu(e,t){const n=Bi(e),s=n.ia.get(t);if(s&&s.Xu)return Ea().add(s.key);{let e=Ea();const s=n.ea.get(t);if(!s)return e;for(const t of s){const s=n.ta.get(t);e=e.unionWith(s.view.qu)}return e}}function hu(e){const t=Bi(e);return t.remoteStore.remoteSyncer.applySuccessfulWrite=Zl.bind(null,t),t.remoteStore.remoteSyncer.rejectFailedWrite=eu.bind(null,t),t}class du{constructor(){this.synchronizeTabs=!1}async initialize(e){this.M=Xc(e.databaseInfo.databaseId),this.sharedClientState=this.da(e),this.persistence=this._a(e),await this.persistence.start(),this.gcScheduler=this.wa(e),this.localStore=this.ma(e)}wa(e){return null}ma(e){return function(e,t,n,s){return new _c(e,t,n,s)}(this.persistence,new Tc,e.initialUser,this.M)}_a(e){return new Fc(qc.Wi,this.M)}da(e){return new Bc}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class fu{async initialize(e,t){this.localStore||(this.localStore=e.localStore,this.sharedClientState=e.sharedClientState,this.datastore=this.createDatastore(t),this.remoteStore=this.createRemoteStore(t),this.eventManager=this.createEventManager(t),this.syncEngine=this.createSyncEngine(t,!e.synchronizeTabs),this.sharedClientState.onlineStateHandler=e=>Jl(this.syncEngine,e,1),this.remoteStore.remoteSyncer.handleCredentialChange=lu.bind(null,this.syncEngine),await async function(e,t){const n=Bi(e);t?(n.lu.delete(2),await sl(n)):t||(n.lu.add(2),await il(n),n._u.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(e){return new Ml}createDatastore(e){const t=Xc(e.databaseInfo.databaseId),n=(s=e.databaseInfo,new Gc(s));var s;return function(e,t,n,s){return new el(e,t,n,s)}(e.authCredentials,e.appCheckCredentials,n,t)}createRemoteStore(e){return t=this.localStore,n=this.datastore,s=e.asyncQueue,i=e=>Jl(this.syncEngine,e,0),r=zc.vt()?new zc:new $c,new nl(t,n,s,i,r);var t,n,s,i,r}createSyncEngine(e,t){return function(e,t,n,s,i,r,o){const a=new Gl(e,t,n,s,i,r);return o&&(a.ca=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,e.initialUser,e.maxConcurrentLimboResolutions,t)}terminate(){return async function(e){const t=Bi(e);Mi("RemoteStore","RemoteStore shutting down."),t.lu.add(5),await il(t),t.du.shutdown(),t._u.set("Unknown")}(this.remoteStore)}}class pu{constructor(e){this.observer=e,this.muted=!1}next(e){this.observer.next&&this.ya(this.observer.next,e)}error(e){this.observer.error?this.ya(this.observer.error,e):console.error("Uncaught Error in snapshot listener:",e)}pa(){this.muted=!0}ya(e,t){this.muted||setTimeout((()=>{this.muted||e(t)}),0)}}class mu{constructor(e,t,n,s){this.authCredentials=e,this.appCheckCredentials=t,this.asyncQueue=n,this.databaseInfo=s,this.user=Oi.UNAUTHENTICATED,this.clientId=tr.R(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async e=>{Mi("FirestoreClient","Received user=",e.uid),await this.authCredentialListener(e),this.user=e})),this.appCheckCredentials.start(n,(e=>(Mi("FirestoreClient","Received new app check token=",e),this.appCheckCredentialListener(e,this.user))))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(e){this.authCredentialListener=e}setAppCheckTokenChangeListener(e){this.appCheckCredentialListener=e}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new zi($i.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const e=new Hi;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),e.resolve()}catch(t){const n=Dl(t,"Failed to shutdown persistence");e.reject(n)}})),e.promise}}async function gu(e,t){e.asyncQueue.verifyOperationInProgress();const n=await async function(e){return e.offlineComponents||(Mi("FirestoreClient","Using default OfflineComponentProvider"),await async function(e,t){e.asyncQueue.verifyOperationInProgress(),Mi("FirestoreClient","Initializing OfflineComponentProvider");const n=await e.getConfiguration();await t.initialize(n);let s=n.initialUser;e.setCredentialChangeListener((async e=>{s.isEqual(e)||(await Sc(t.localStore,e),s=e)})),t.persistence.setDatabaseDeletedListener((()=>e.terminate())),e.offlineComponents=t}(e,new du)),e.offlineComponents}(e);Mi("FirestoreClient","Initializing OnlineComponentProvider");const s=await e.getConfiguration();await t.initialize(n,s),e.setCredentialChangeListener((e=>Cl(t.remoteStore,e))),e.setAppCheckTokenChangeListener(((e,n)=>Cl(t.remoteStore,n))),e.onlineComponents=t}async function yu(e){return e.onlineComponents||(Mi("FirestoreClient","Using default OnlineComponentProvider"),await gu(e,new fu)),e.onlineComponents}async function vu(e){const t=await yu(e),n=t.eventManager;return n.onListen=Wl.bind(null,t.syncEngine),n.onUnlisten=Xl.bind(null,t.syncEngine),n}function wu(e,t,n={}){const s=new Hi;return e.asyncQueue.enqueueAndForget((async()=>function(e,t,n,s,i){const r=new pu({next:r=>{t.enqueueAndForget((()=>async function(e,t){const n=Bi(e),s=t.query;let i=!1;const r=n.queries.get(s);if(r){const e=r.listeners.indexOf(t);e>=0&&(r.listeners.splice(e,1),i=0===r.listeners.length)}if(i)return n.queries.delete(s),n.onUnlisten(s)}(e,o)));const a=r.docs.has(n);!a&&r.fromCache?i.reject(new zi($i.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&r.fromCache&&s&&"server"===s.source?i.reject(new zi($i.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):i.resolve(r)},error:e=>i.reject(e)}),o=new jl(po(n.path),r,{includeMetadataChanges:!0,Du:!0});return Ul(e,o)}(await vu(e),e.asyncQueue,t,n,s))),s.promise}const bu=new Map;function Iu(e,t,n){if(!n)throw new zi($i.INVALID_ARGUMENT,`Function ${e}() cannot be called with an empty ${t}.`)}function Eu(e){if(!kr.isDocumentKey(e))throw new zi($i.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`)}function Tu(e){if(kr.isDocumentKey(e))throw new zi($i.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`)}function _u(e){if(void 0===e)return"undefined";if(null===e)return"null";if("string"==typeof e)return e.length>20&&(e=`${e.substring(0,20)}...`),JSON.stringify(e);if("number"==typeof e||"boolean"==typeof e)return""+e;if("object"==typeof e){if(e instanceof Array)return"an array";{const t=function(e){return e.constructor?e.constructor.name:null}(e);return t?`a custom ${t} object`:"an object"}}return"function"==typeof e?"a function":qi()}function Su(e,t){if("_delegate"in e&&(e=e._delegate),!(e instanceof t)){if(t.name===e.constructor.name)throw new zi($i.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=_u(e);throw new zi($i.INVALID_ARGUMENT,`Expected type '${t.name}', but it was: ${n}`)}}return e}class ku{constructor(e){var t;if(void 0===e.host){if(void 0!==e.ssl)throw new zi($i.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=e.host,this.ssl=null===(t=e.ssl)||void 0===t||t;if(this.credentials=e.credentials,this.ignoreUndefinedProperties=!!e.ignoreUndefinedProperties,void 0===e.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new zi($i.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=e.cacheSizeBytes}this.experimentalForceLongPolling=!!e.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!e.experimentalAutoDetectLongPolling,this.useFetchStreams=!!e.useFetchStreams,function(e,t,n,s){if(!0===t&&!0===s)throw new zi($i.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,e.experimentalForceLongPolling,0,e.experimentalAutoDetectLongPolling)}isEqual(e){return this.host===e.host&&this.ssl===e.ssl&&this.credentials===e.credentials&&this.cacheSizeBytes===e.cacheSizeBytes&&this.experimentalForceLongPolling===e.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===e.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===e.ignoreUndefinedProperties&&this.useFetchStreams===e.useFetchStreams}}class Cu{constructor(e,t,n){this._authCredentials=t,this._appCheckCredentials=n,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new ku({}),this._settingsFrozen=!1,e instanceof Tr?this._databaseId=e:(this._app=e,this._databaseId=function(e){if(!Object.prototype.hasOwnProperty.apply(e.options,["projectId"]))throw new zi($i.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new Tr(e.options.projectId)}(e))}get app(){if(!this._app)throw new zi($i.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(e){if(this._settingsFrozen)throw new zi($i.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new ku(e),void 0!==e.credentials&&(this._authCredentials=function(e){if(!e)return new Gi;switch(e.type){case"gapi":const t=e.client;return ji(!("object"!=typeof t||null===t||!t.auth||!t.auth.getAuthHeaderValueForFirstParty)),new Yi(t,e.sessionIndex||"0",e.iamToken||null);case"provider":return e.client;default:throw new zi($i.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(e.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(e){const t=bu.get(e);t&&(Mi("ComponentProvider","Removing Datastore"),bu.delete(e),t.terminate())}(this),Promise.resolve()}}class Au{constructor(e,t,n){this.converter=t,this._key=n,this.type="document",this.firestore=e}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new Ru(this.firestore,this.converter,this._key.path.popLast())}withConverter(e){return new Au(this.firestore,e,this._key)}}class Nu{constructor(e,t,n){this.converter=t,this._query=n,this.type="query",this.firestore=e}withConverter(e){return new Nu(this.firestore,e,this._query)}}class Ru extends Nu{constructor(e,t,n){super(e,t,po(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const e=this._path.popLast();return e.isEmpty()?null:new Au(this.firestore,null,new kr(e))}withConverter(e){return new Ru(this.firestore,e,this._path)}}function Du(e,t,...n){if(e=O(e),Iu("collection","path",t),e instanceof Cu){const s=ur.fromString(t,...n);return Tu(s),new Ru(e,null,s)}{if(!(e instanceof Au||e instanceof Ru))throw new zi($i.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=e._path.child(ur.fromString(t,...n));return Tu(s),new Ru(e.firestore,null,s)}}function Ou(e,t,...n){if(e=O(e),1===arguments.length&&(t=tr.R()),Iu("doc","path",t),e instanceof Cu){const s=ur.fromString(t,...n);return Eu(s),new Au(e,null,new kr(s))}{if(!(e instanceof Au||e instanceof Ru))throw new zi($i.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=e._path.child(ur.fromString(t,...n));return Eu(s),new Au(e.firestore,e instanceof Ru?e.converter:null,new kr(s))}}class Lu{constructor(){this.Na=Promise.resolve(),this.ka=[],this.Ma=!1,this.Oa=[],this.Fa=null,this.$a=!1,this.Ba=!1,this.La=[],this.So=new Yc(this,"async_queue_retry"),this.Ua=()=>{const e=Wc();e&&Mi("AsyncQueue","Visibility state changed to "+e.visibilityState),this.So.Eo()};const e=Wc();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.Ua)}get isShuttingDown(){return this.Ma}enqueueAndForget(e){this.enqueue(e)}enqueueAndForgetEvenWhileRestricted(e){this.qa(),this.Ga(e)}enterRestrictedMode(e){if(!this.Ma){this.Ma=!0,this.Ba=e||!1;const t=Wc();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.Ua)}}enqueue(e){if(this.qa(),this.Ma)return new Promise((()=>{}));const t=new Hi;return this.Ga((()=>this.Ma&&this.Ba?Promise.resolve():(e().then(t.resolve,t.reject),t.promise))).then((()=>t.promise))}enqueueRetryable(e){this.enqueueAndForget((()=>(this.ka.push(e),this.Ka())))}async Ka(){if(0!==this.ka.length){try{await this.ka[0](),this.ka.shift(),this.So.reset()}catch(e){if(!cc(e))throw e;Mi("AsyncQueue","Operation failed with retryable error: "+e)}this.ka.length>0&&this.So.Io((()=>this.Ka()))}}Ga(e){const t=this.Na.then((()=>(this.$a=!0,e().catch((e=>{this.Fa=e,this.$a=!1;const t=function(e){let t=e.message||"";return e.stack&&(t=e.stack.includes(e.message)?e.stack:e.message+"\n"+e.stack),t}(e);throw Ui("INTERNAL UNHANDLED ERROR: ",t),e})).then((e=>(this.$a=!1,e))))));return this.Na=t,t}enqueueAfterDelay(e,t,n){this.qa(),this.La.indexOf(e)>-1&&(t=0);const s=Rl.createAndSchedule(this,e,t,n,(e=>this.Qa(e)));return this.Oa.push(s),s}qa(){this.Fa&&qi()}verifyOperationInProgress(){}async ja(){let e;do{e=this.Na,await e}while(e!==this.Na)}Wa(e){for(const t of this.Oa)if(t.timerId===e)return!0;return!1}za(e){return this.ja().then((()=>{this.Oa.sort(((e,t)=>e.targetTimeMs-t.targetTimeMs));for(const t of this.Oa)if(t.skipDelay(),"all"!==e&&t.timerId===e)break;return this.ja()}))}Ha(e){this.La.push(e)}Qa(e){const t=this.Oa.indexOf(e);this.Oa.splice(t,1)}}function Pu(e){return function(e,t){if("object"!=typeof e||null===e)return!1;const n=e;for(const e of["next","error","complete"])if(e in n&&"function"==typeof n[e])return!0;return!1}(e)}class xu extends Cu{constructor(e,t,n){super(e,t,n),this.type="firestore",this._queue=new Lu,this._persistenceKey="name"in e?e.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||Uu(this),this._firestoreClient.terminate()}}function Mu(e){return e._firestoreClient||Uu(e),e._firestoreClient.verifyNotTerminated(),e._firestoreClient}function Uu(e){var t;const n=e._freezeSettings(),s=function(e,t,n,s){return new Er(e,t,n,s.host,s.ssl,s.experimentalForceLongPolling,s.experimentalAutoDetectLongPolling,s.useFetchStreams)}(e._databaseId,(null===(t=e._app)||void 0===t?void 0:t.options.appId)||"",e._persistenceKey,n);e._firestoreClient=new mu(e._authCredentials,e._appCheckCredentials,e._queue,s)}class Fu{constructor(...e){for(let t=0;t<e.length;++t)if(0===e[t].length)throw new zi($i.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new dr(e)}isEqual(e){return this._internalPath.isEqual(e._internalPath)}}class Vu{constructor(e){this._byteString=e}static fromBase64String(e){try{return new Vu(pr.fromBase64String(e))}catch(e){throw new zi($i.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+e)}}static fromUint8Array(e){return new Vu(pr.fromUint8Array(e))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(e){return this._byteString.isEqual(e._byteString)}}class qu{constructor(e){this._methodName=e}}class ju{constructor(e,t){if(!isFinite(e)||e<-90||e>90)throw new zi($i.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+e);if(!isFinite(t)||t<-180||t>180)throw new zi($i.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+t);this._lat=e,this._long=t}get latitude(){return this._lat}get longitude(){return this._long}isEqual(e){return this._lat===e._lat&&this._long===e._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(e){return nr(this._lat,e._lat)||nr(this._long,e._long)}}const Bu=/^__.*__$/;class $u{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return null!==this.fieldMask?new Zo(e,this.data,this.fieldMask,t,this.fieldTransforms):new Qo(e,this.data,t,this.fieldTransforms)}}class zu{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return new Zo(e,this.data,this.fieldMask,t,this.fieldTransforms)}}function Hu(e){switch(e){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw qi()}}class Ku{constructor(e,t,n,s,i,r){this.settings=e,this.databaseId=t,this.M=n,this.ignoreUndefinedProperties=s,void 0===i&&this.Ja(),this.fieldTransforms=i||[],this.fieldMask=r||[]}get path(){return this.settings.path}get Ya(){return this.settings.Ya}Xa(e){return new Ku(Object.assign(Object.assign({},this.settings),e),this.databaseId,this.M,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Za(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),s=this.Xa({path:n,tc:!1});return s.ec(e),s}nc(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),s=this.Xa({path:n,tc:!1});return s.Ja(),s}sc(e){return this.Xa({path:void 0,tc:!0})}ic(e){return ih(e,this.settings.methodName,this.settings.rc||!1,this.path,this.settings.oc)}contains(e){return void 0!==this.fieldMask.find((t=>e.isPrefixOf(t)))||void 0!==this.fieldTransforms.find((t=>e.isPrefixOf(t.field)))}Ja(){if(this.path)for(let e=0;e<this.path.length;e++)this.ec(this.path.get(e))}ec(e){if(0===e.length)throw this.ic("Document fields must not be empty");if(Hu(this.Ya)&&Bu.test(e))throw this.ic('Document fields cannot begin and end with "__"')}}class Gu{constructor(e,t,n){this.databaseId=e,this.ignoreUndefinedProperties=t,this.M=n||Xc(e)}uc(e,t,n,s=!1){return new Ku({Ya:e,methodName:t,oc:n,path:dr.emptyPath(),tc:!1,rc:s},this.databaseId,this.M,this.ignoreUndefinedProperties)}}function Wu(e){const t=e._freezeSettings(),n=Xc(e._databaseId);return new Gu(e._databaseId,!!t.ignoreUndefinedProperties,n)}function Xu(e,t,n,s,i,r={}){const o=e.uc(r.merge||r.mergeFields?2:0,t,n,i);eh("Data must be an object, but it was:",o,s);const a=Qu(s,o);let c,l;if(r.merge)c=new fr(o.fieldMask),l=o.fieldTransforms;else if(r.mergeFields){const e=[];for(const s of r.mergeFields){const i=th(t,s,n);if(!o.contains(i))throw new zi($i.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);rh(e,i)||e.push(i)}c=new fr(e),l=o.fieldTransforms.filter((e=>c.covers(e.field)))}else c=null,l=o.fieldTransforms;return new $u(new jr(a),c,l)}class Yu extends qu{_toFieldTransform(e){if(2!==e.Ya)throw 1===e.Ya?e.ic(`${this._methodName}() can only appear at the top level of your update data`):e.ic(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return e.fieldMask.push(e.path),null}isEqual(e){return e instanceof Yu}}function Ju(e,t){if(Zu(e=O(e)))return eh("Unsupported field value:",t,e),Qu(e,t);if(e instanceof qu)return function(e,t){if(!Hu(t.Ya))throw t.ic(`${e._methodName}() can only be used with update() and set()`);if(!t.path)throw t.ic(`${e._methodName}() is not currently supported inside arrays`);const n=e._toFieldTransform(t);n&&t.fieldTransforms.push(n)}(e,t),null;if(void 0===e&&t.ignoreUndefinedProperties)return null;if(t.path&&t.fieldMask.push(t.path),e instanceof Array){if(t.settings.tc&&4!==t.Ya)throw t.ic("Nested arrays are not supported");return function(e,t){const n=[];let s=0;for(const i of e){let e=Ju(i,t.sc(s));null==e&&(e={nullValue:"NULL_VALUE"}),n.push(e),s++}return{arrayValue:{values:n}}}(e,t)}return function(e,t){if(null===(e=O(e)))return{nullValue:"NULL_VALUE"};if("number"==typeof e)return Ro(t.M,e);if("boolean"==typeof e)return{booleanValue:e};if("string"==typeof e)return{stringValue:e};if(e instanceof Date){const n=ir.fromDate(e);return{timestampValue:Ua(t.M,n)}}if(e instanceof ir){const n=new ir(e.seconds,1e3*Math.floor(e.nanoseconds/1e3));return{timestampValue:Ua(t.M,n)}}if(e instanceof ju)return{geoPointValue:{latitude:e.latitude,longitude:e.longitude}};if(e instanceof Vu)return{bytesValue:Fa(t.M,e._byteString)};if(e instanceof Au){const n=t.databaseId,s=e.firestore._databaseId;if(!s.isEqual(n))throw t.ic(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:ja(e.firestore._databaseId||t.databaseId,e._key.path)}}throw t.ic(`Unsupported field value: ${_u(e)}`)}(e,t)}function Qu(e,t){const n={};return cr(e)?t.path&&t.path.length>0&&t.fieldMask.push(t.path):ar(e,((e,s)=>{const i=Ju(s,t.Za(e));null!=i&&(n[e]=i)})),{mapValue:{fields:n}}}function Zu(e){return!("object"!=typeof e||null===e||e instanceof Array||e instanceof Date||e instanceof ir||e instanceof ju||e instanceof Vu||e instanceof Au||e instanceof qu)}function eh(e,t,n){if(!Zu(n)||!function(e){return"object"==typeof e&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}(n)){const s=_u(n);throw"an object"===s?t.ic(e+" a custom object"):t.ic(e+" "+s)}}function th(e,t,n){if((t=O(t))instanceof Fu)return t._internalPath;if("string"==typeof t)return sh(e,t);throw ih("Field path arguments must be of type string or ",e,!1,void 0,n)}const nh=new RegExp("[~\\*/\\[\\]]");function sh(e,t,n){if(t.search(nh)>=0)throw ih(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`,e,!1,void 0,n);try{return new Fu(...t.split("."))._internalPath}catch(s){throw ih(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,e,!1,void 0,n)}}function ih(e,t,n,s,i){const r=s&&!s.isEmpty(),o=void 0!==i;let a=`Function ${t}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(r||o)&&(c+=" (found",r&&(c+=` in field ${s}`),o&&(c+=` in document ${i}`),c+=")"),new zi($i.INVALID_ARGUMENT,a+e+c)}function rh(e,t){return e.some((e=>e.isEqual(t)))}class oh{constructor(e,t,n,s,i){this._firestore=e,this._userDataWriter=t,this._key=n,this._document=s,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new Au(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const e=new ah(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(e)}return this._userDataWriter.convertValue(this._document.data.value)}}get(e){if(this._document){const t=this._document.data.field(ch("DocumentSnapshot.get",e));if(null!==t)return this._userDataWriter.convertValue(t)}}}class ah extends oh{data(){return super.data()}}function ch(e,t){return"string"==typeof t?sh(e,t):t instanceof Fu?t._internalPath:t._delegate._internalPath}class lh{constructor(e,t){this.hasPendingWrites=e,this.fromCache=t}isEqual(e){return this.hasPendingWrites===e.hasPendingWrites&&this.fromCache===e.fromCache}}class uh extends oh{constructor(e,t,n,s,i,r){super(e,t,n,s,r),this._firestore=e,this._firestoreImpl=e,this.metadata=i}exists(){return super.exists()}data(e={}){if(this._document){if(this._converter){const t=new hh(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(t,e)}return this._userDataWriter.convertValue(this._document.data.value,e.serverTimestamps)}}get(e,t={}){if(this._document){const n=this._document.data.field(ch("DocumentSnapshot.get",e));if(null!==n)return this._userDataWriter.convertValue(n,t.serverTimestamps)}}}class hh extends uh{data(e={}){return super.data(e)}}class dh{constructor(e,t,n,s){this._firestore=e,this._userDataWriter=t,this._snapshot=s,this.metadata=new lh(s.hasPendingWrites,s.fromCache),this.query=n}get docs(){const e=[];return this.forEach((t=>e.push(t))),e}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(e,t){this._snapshot.docs.forEach((n=>{e.call(t,new hh(this._firestore,this._userDataWriter,n.key,n,new lh(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(e={}){const t=!!e.includeMetadataChanges;if(t&&this._snapshot.excludesMetadataChanges)throw new zi($i.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===t||(this._cachedChanges=function(e,t){if(e._snapshot.oldDocs.isEmpty()){let t=0;return e._snapshot.docChanges.map((n=>({type:"added",doc:new hh(e._firestore,e._userDataWriter,n.doc.key,n.doc,new lh(e._snapshot.mutatedKeys.has(n.doc.key),e._snapshot.fromCache),e.query.converter),oldIndex:-1,newIndex:t++})))}{let n=e._snapshot.oldDocs;return e._snapshot.docChanges.filter((e=>t||3!==e.type)).map((t=>{const s=new hh(e._firestore,e._userDataWriter,t.doc.key,t.doc,new lh(e._snapshot.mutatedKeys.has(t.doc.key),e._snapshot.fromCache),e.query.converter);let i=-1,r=-1;return 0!==t.type&&(i=n.indexOf(t.doc.key),n=n.delete(t.doc.key)),1!==t.type&&(n=n.add(t.doc),r=n.indexOf(t.doc.key)),{type:fh(t.type),doc:s,oldIndex:i,newIndex:r}}))}}(this,t),this._cachedChangesIncludeMetadataChanges=t),this._cachedChanges}}function fh(e){switch(e){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return qi()}}class ph{}class mh extends ph{constructor(e,t){super(),this.hc=e,this.dc=t,this.type="orderBy"}_apply(e){const t=function(e,t,n){if(null!==e.startAt)throw new zi($i.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==e.endAt)throw new zi($i.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");const s=new co(t,n);return function(e,t){if(null===yo(e)){const n=vo(e);null!==n&&function(e,t,n){if(!n.isEqual(t))throw new zi($i.INVALID_ARGUMENT,`Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${t.toString()}' and so you must also use '${t.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`)}(0,n,t.field)}}(e,s),s}(e._query,this.hc,this.dc);return new Nu(e.firestore,e.converter,function(e,t){const n=e.explicitOrderBy.concat([t]);return new fo(e.path,e.collectionGroup,n,e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(e._query,t))}}class gh extends ph{constructor(e,t,n){super(),this.type=e,this._c=t,this.wc=n}_apply(e){return new Nu(e.firestore,e.converter,Io(e._query,this._c,this.wc))}}function yh(e){e=Su(e,Au);const t=Su(e.firestore,xu);return wu(Mu(t),e._key).then((n=>Ih(t,e,n)))}class vh extends class{convertValue(e,t="none"){switch(Cr(e)){case 0:return null;case 1:return e.booleanValue;case 2:return yr(e.integerValue||e.doubleValue);case 3:return this.convertTimestamp(e.timestampValue);case 4:return this.convertServerTimestamp(e,t);case 5:return e.stringValue;case 6:return this.convertBytes(vr(e.bytesValue));case 7:return this.convertReference(e.referenceValue);case 8:return this.convertGeoPoint(e.geoPointValue);case 9:return this.convertArray(e.arrayValue,t);case 10:return this.convertObject(e.mapValue,t);default:throw qi()}}convertObject(e,t){const n={};return ar(e.fields,((e,s)=>{n[e]=this.convertValue(s,t)})),n}convertGeoPoint(e){return new ju(yr(e.latitude),yr(e.longitude))}convertArray(e,t){return(e.values||[]).map((e=>this.convertValue(e,t)))}convertServerTimestamp(e,t){switch(t){case"previous":const n=br(e);return null==n?null:this.convertValue(n,t);case"estimate":return this.convertTimestamp(Ir(e));default:return null}}convertTimestamp(e){const t=gr(e);return new ir(t.seconds,t.nanos)}convertDocumentKey(e,t){const n=ur.fromString(e);ji(oc(n));const s=new Tr(n.get(1),n.get(3)),i=new kr(n.popFirst(5));return s.isEqual(t)||Ui(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`),i}}{constructor(e){super(),this.firestore=e}convertBytes(e){return new Vu(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new Au(this.firestore,null,t)}}function wh(e,t,n){e=Su(e,Au);const s=Su(e.firestore,xu),i=function(e,t,n){let s;return s=e?n&&(n.merge||n.mergeFields)?e.toFirestore(t,n):e.toFirestore(t):t,s}(e.converter,t,n);return bh(s,[Xu(Wu(s),"setDoc",e._key,i,null!==e.converter,n).toMutation(e._key,zo.none())])}function bh(e,t){return function(e,t){const n=new Hi;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){const s=hu(e);try{const e=await function(e,t){const n=Bi(e),s=ir.now(),i=t.reduce(((e,t)=>e.add(t.key)),Ea());let r;return n.persistence.runTransaction("Locally write mutations","readwrite",(e=>n.ai.qs(e,i).next((i=>{r=i;const o=[];for(const e of t){const t=Xo(e,r.get(e.key));null!=t&&o.push(new Zo(e.key,t,Br(t.value.mapValue),zo.exists(!0)))}return n.$s.addMutationBatch(e,s,o,t)})))).then((e=>(e.applyToLocalDocumentSet(r),{batchId:e.batchId,changes:r})))}(s.localStore,t);s.sharedClientState.addPendingMutation(e.batchId),function(e,t,n){let s=e.oa[e.currentUser.toKey()];s||(s=new ua(nr)),s=s.insert(t,n),e.oa[e.currentUser.toKey()]=s}(s,e.batchId,n),await cu(s,e.changes),await vl(s.remoteStore)}catch(e){const t=Dl(e,"Failed to persist write");n.reject(t)}}(await function(e){return yu(e).then((e=>e.syncEngine))}(e),t,n))),n.promise}(Mu(e),t)}function Ih(e,t,n){const s=n.docs.get(t._key),i=new vh(e);return new uh(e,i,t._key,s,new lh(n.hasPendingWrites,n.fromCache),t.converter)}function Eh(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(s=Object.getOwnPropertySymbols(e);i<s.length;i++)t.indexOf(s[i])<0&&Object.prototype.propertyIsEnumerable.call(e,s[i])&&(n[s[i]]=e[s[i]])}return n}!function(e,t=!0){Li="9.6.10",ie(new F("firestore",((e,{options:n})=>{const s=e.getProvider("app").getImmediate(),i=new xu(s,new Wi(e.getProvider("auth-internal")),new Qi(e.getProvider("app-check-internal")));return n=Object.assign({useFetchStreams:t},n),i._setSettings(n),i}),"PUBLIC")),ue(Di,"3.4.7",e),ue(Di,"3.4.7","esm2017")}(),Object.create,Object.create;const Th=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},_h=new T("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),Sh=new X("@firebase/auth");function kh(e,...t){Sh.logLevel<=$.ERROR&&Sh.error(`Auth (9.6.10): ${e}`,...t)}function Ch(e,...t){throw Nh(e,...t)}function Ah(e,...t){return Nh(e,...t)}function Nh(e,...t){if("string"!=typeof e){const n=t[0],s=[...t.slice(1)];return s[0]&&(s[0].appName=e.name),e._errorFactory.create(n,...s)}return _h.create(e,...t)}function Rh(e,t,...n){if(!e)throw Nh(t,...n)}function Dh(e){const t="INTERNAL ASSERTION FAILED: "+e;throw kh(t),new Error(t)}function Oh(e,t){e||Dh(t)}const Lh=new Map;function Ph(e){Oh(e instanceof Function,"Expected a class definition");let t=Lh.get(e);return t?(Oh(t instanceof e,"Instance stored in cache mismatched with class"),t):(t=new e,Lh.set(e,t),t)}function xh(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function Mh(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}class Uh{constructor(e,t){this.shortDelay=e,this.longDelay=t,Oh(t>e,"Short delay should be less than long delay!"),this.isMobile=v()||b()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===Mh()||"https:"===Mh()||w()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function Fh(e,t){Oh(e.emulator,"Emulator should always be set here");const{url:n}=e.emulator;return t?`${n}${t.startsWith("/")?t.slice(1):t}`:n}class Vh{static initialize(e,t,n){this.fetchImpl=e,t&&(this.headersImpl=t),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void Dh("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void Dh("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void Dh("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const qh={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error"},jh=new Uh(3e4,6e4);function Bh(e,t){return e.tenantId&&!t.tenantId?Object.assign(Object.assign({},t),{tenantId:e.tenantId}):t}async function $h(e,t,n,s,i={}){return zh(e,i,(async()=>{let i={},r={};s&&("GET"===t?r=s:i={body:JSON.stringify(s)});const o=C(Object.assign({key:e.config.apiKey},r)).slice(1),a=await e._getAdditionalHeaders();return a["Content-Type"]="application/json",e.languageCode&&(a["X-Firebase-Locale"]=e.languageCode),Vh.fetch()(Kh(e,e.config.apiHost,n,o),Object.assign({method:t,headers:a,referrerPolicy:"no-referrer"},i))}))}async function zh(e,t,n){e._canInitEmulator=!1;const s=Object.assign(Object.assign({},qh),t);try{const t=new Gh(e),i=await Promise.race([n(),t.promise]);t.clearNetworkTimeout();const r=await i.json();if("needConfirmation"in r)throw Wh(e,"account-exists-with-different-credential",r);if(i.ok&&!("errorMessage"in r))return r;{const t=i.ok?r.errorMessage:r.error.message,[n,o]=t.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw Wh(e,"credential-already-in-use",r);if("EMAIL_EXISTS"===n)throw Wh(e,"email-already-in-use",r);const a=s[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(o)throw function(e,t,n){const s=Object.assign(Object.assign({},Th()),{[t]:n});return new T("auth","Firebase",s).create(t,{appName:e.name})}(e,a,o);Ch(e,a)}}catch(t){if(t instanceof E)throw t;Ch(e,"network-request-failed")}}async function Hh(e,t,n,s,i={}){const r=await $h(e,t,n,s,i);return"mfaPendingCredential"in r&&Ch(e,"multi-factor-auth-required",{_serverResponse:r}),r}function Kh(e,t,n,s){const i=`${t}${n}?${s}`;return e.config.emulator?Fh(e.config,i):`${e.config.apiScheme}://${i}`}class Gh{constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,t)=>{this.timer=setTimeout((()=>t(Ah(this.auth,"network-request-failed"))),jh.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function Wh(e,t,n){const s={appName:e.name};n.email&&(s.email=n.email),n.phoneNumber&&(s.phoneNumber=n.phoneNumber);const i=Ah(e,t,s);return i.customData._tokenResponse=n,i}function Xh(e){if(e)try{const t=new Date(Number(e));if(!isNaN(t.getTime()))return t.toUTCString()}catch(e){}}function Yh(e){return 1e3*Number(e)}function Jh(e){const[t,n,s]=e.split(".");if(void 0===t||void 0===n||void 0===s)return kh("JWT malformed, contained fewer than 3 sections"),null;try{const e=function(e){try{return p.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(n);return e?JSON.parse(e):(kh("Failed to decode base64 JWT payload"),null)}catch(e){return kh("Caught error parsing JWT payload as JSON",e),null}}async function Qh(e,t,n=!1){if(n)return t;try{return await t}catch(t){throw t instanceof E&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(t)&&e.auth.currentUser===e&&await e.auth.signOut(),t}}class Zh{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var t;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(t=this.user.stsTokenManager.expirationTime)&&void 0!==t?t:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const t=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),t)}async iteration(){try{await this.user.getIdToken(!0)}catch(e){return void("auth/network-request-failed"===e.code&&this.schedule(!0))}this.schedule()}}class ed{constructor(e,t){this.createdAt=e,this.lastLoginAt=t,this._initializeTime()}_initializeTime(){this.lastSignInTime=Xh(this.lastLoginAt),this.creationTime=Xh(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function td(e){var t;const n=e.auth,s=await e.getIdToken(),i=await Qh(e,async function(e,t){return $h(e,"POST","/v1/accounts:lookup",t)}(n,{idToken:s}));Rh(null==i?void 0:i.users.length,n,"internal-error");const r=i.users[0];e._notifyReloadListener(r);const o=(null===(t=r.providerUserInfo)||void 0===t?void 0:t.length)?r.providerUserInfo.map((e=>{var{providerId:t}=e,n=Eh(e,["providerId"]);return{providerId:t,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],a=(c=e.providerData,l=o,[...c.filter((e=>!l.some((t=>t.providerId===e.providerId)))),...l]);var c,l;const u=e.isAnonymous,h=!(e.email&&r.passwordHash||(null==a?void 0:a.length)),d=!!u&&h,f={uid:r.localId,displayName:r.displayName||null,photoURL:r.photoUrl||null,email:r.email||null,emailVerified:r.emailVerified||!1,phoneNumber:r.phoneNumber||null,tenantId:r.tenantId||null,providerData:a,metadata:new ed(r.createdAt,r.lastLoginAt),isAnonymous:d};Object.assign(e,f)}class nd{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){Rh(e.idToken,"internal-error"),Rh(void 0!==e.idToken,"internal-error"),Rh(void 0!==e.refreshToken,"internal-error");const t="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):function(e){const t=Jh(e);return Rh(t,"internal-error"),Rh(void 0!==t.exp,"internal-error"),Rh(void 0!==t.iat,"internal-error"),Number(t.exp)-Number(t.iat)}(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,t)}async getToken(e,t=!1){return Rh(!this.accessToken||this.refreshToken,e,"user-token-expired"),t||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,t){const{accessToken:n,refreshToken:s,expiresIn:i}=await async function(e,t){const n=await zh(e,{},(async()=>{const n=C({grant_type:"refresh_token",refresh_token:t}).slice(1),{tokenApiHost:s,apiKey:i}=e.config,r=Kh(e,s,"/v1/token",`key=${i}`),o=await e._getAdditionalHeaders();return o["Content-Type"]="application/x-www-form-urlencoded",Vh.fetch()(r,{method:"POST",headers:o,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(e,t);this.updateTokensAndExpiration(n,s,Number(i))}updateTokensAndExpiration(e,t,n){this.refreshToken=t||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(e,t){const{refreshToken:n,accessToken:s,expirationTime:i}=t,r=new nd;return n&&(Rh("string"==typeof n,"internal-error",{appName:e}),r.refreshToken=n),s&&(Rh("string"==typeof s,"internal-error",{appName:e}),r.accessToken=s),i&&(Rh("number"==typeof i,"internal-error",{appName:e}),r.expirationTime=i),r}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new nd,this.toJSON())}_performRefresh(){return Dh("not implemented")}}function sd(e,t){Rh("string"==typeof e||void 0===e,"internal-error",{appName:t})}class id{constructor(e){var{uid:t,auth:n,stsTokenManager:s}=e,i=Eh(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new Zh(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=t,this.auth=n,this.stsTokenManager=s,this.accessToken=s.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.emailVerified=i.emailVerified||!1,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.tenantId=i.tenantId||null,this.providerData=i.providerData?[...i.providerData]:[],this.metadata=new ed(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(e){const t=await Qh(this,this.stsTokenManager.getToken(this.auth,e));return Rh(t,this.auth,"internal-error"),this.accessToken!==t&&(this.accessToken=t,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),t}getIdTokenResult(e){return async function(e,t=!1){const n=O(e),s=await n.getIdToken(t),i=Jh(s);Rh(i&&i.exp&&i.auth_time&&i.iat,n.auth,"internal-error");const r="object"==typeof i.firebase?i.firebase:void 0,o=null==r?void 0:r.sign_in_provider;return{claims:i,token:s,authTime:Xh(Yh(i.auth_time)),issuedAtTime:Xh(Yh(i.iat)),expirationTime:Xh(Yh(i.exp)),signInProvider:o||null,signInSecondFactor:(null==r?void 0:r.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const t=O(e);await td(t),await t.auth._persistUserIfCurrent(t),t.auth._notifyListenersIfCurrent(t)}(this)}_assign(e){this!==e&&(Rh(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){return new id(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(e){Rh(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,t=!1){let n=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),n=!0),t&&await td(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const e=await this.getIdToken();return await Qh(this,async function(e,t){return $h(e,"POST","/v1/accounts:delete",t)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,t){var n,s,i,r,o,a,c,l;const u=null!==(n=t.displayName)&&void 0!==n?n:void 0,h=null!==(s=t.email)&&void 0!==s?s:void 0,d=null!==(i=t.phoneNumber)&&void 0!==i?i:void 0,f=null!==(r=t.photoURL)&&void 0!==r?r:void 0,p=null!==(o=t.tenantId)&&void 0!==o?o:void 0,m=null!==(a=t._redirectEventId)&&void 0!==a?a:void 0,g=null!==(c=t.createdAt)&&void 0!==c?c:void 0,y=null!==(l=t.lastLoginAt)&&void 0!==l?l:void 0,{uid:v,emailVerified:w,isAnonymous:b,providerData:I,stsTokenManager:E}=t;Rh(v&&E,e,"internal-error");const T=nd.fromJSON(this.name,E);Rh("string"==typeof v,e,"internal-error"),sd(u,e.name),sd(h,e.name),Rh("boolean"==typeof w,e,"internal-error"),Rh("boolean"==typeof b,e,"internal-error"),sd(d,e.name),sd(f,e.name),sd(p,e.name),sd(m,e.name),sd(g,e.name),sd(y,e.name);const _=new id({uid:v,auth:e,email:h,emailVerified:w,displayName:u,isAnonymous:b,photoURL:f,phoneNumber:d,tenantId:p,stsTokenManager:T,createdAt:g,lastLoginAt:y});return I&&Array.isArray(I)&&(_.providerData=I.map((e=>Object.assign({},e)))),m&&(_._redirectEventId=m),_}static async _fromIdTokenResponse(e,t,n=!1){const s=new nd;s.updateFromServerResponse(t);const i=new id({uid:t.localId,auth:e,stsTokenManager:s,isAnonymous:n});return await td(i),i}}class rd{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,t){this.storage[e]=t}async _get(e){const t=this.storage[e];return void 0===t?null:t}async _remove(e){delete this.storage[e]}_addListener(e,t){}_removeListener(e,t){}}rd.type="NONE";const od=rd;function ad(e,t,n){return`firebase:${e}:${t}:${n}`}class cd{constructor(e,t,n){this.persistence=e,this.auth=t,this.userKey=n;const{config:s,name:i}=this.auth;this.fullUserKey=ad(this.userKey,s.apiKey,i),this.fullPersistenceKey=ad("persistence",s.apiKey,i),this.boundEventHandler=t._onStorageEvent.bind(t),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);return e?id._fromJSON(this.auth,e):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const t=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,t?this.setCurrentUser(t):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,t,n="authUser"){if(!t.length)return new cd(Ph(od),e,n);const s=(await Promise.all(t.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let i=s[0]||Ph(od);const r=ad(n,e.config.apiKey,e.name);let o=null;for(const n of t)try{const t=await n._get(r);if(t){const s=id._fromJSON(e,t);n!==i&&(o=s),i=n;break}}catch(e){}const a=s.filter((e=>e._shouldAllowMigration));return i._shouldAllowMigration&&a.length?(i=a[0],o&&await i._set(r,o.toJSON()),await Promise.all(t.map((async e=>{if(e!==i)try{await e._remove(r)}catch(e){}}))),new cd(i,e,n)):new cd(i,e,n)}}function ld(e){const t=e.toLowerCase();if(t.includes("opera/")||t.includes("opr/")||t.includes("opios/"))return"Opera";if(fd(t))return"IEMobile";if(t.includes("msie")||t.includes("trident/"))return"IE";if(t.includes("edge/"))return"Edge";if(ud(t))return"Firefox";if(t.includes("silk/"))return"Silk";if(md(t))return"Blackberry";if(gd(t))return"Webos";if(hd(t))return"Safari";if((t.includes("chrome/")||dd(t))&&!t.includes("edge/"))return"Chrome";if(pd(t))return"Android";{const t=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=e.match(t);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function ud(e=y()){return/firefox\//i.test(e)}function hd(e=y()){const t=e.toLowerCase();return t.includes("safari/")&&!t.includes("chrome/")&&!t.includes("crios/")&&!t.includes("android")}function dd(e=y()){return/crios\//i.test(e)}function fd(e=y()){return/iemobile/i.test(e)}function pd(e=y()){return/android/i.test(e)}function md(e=y()){return/blackberry/i.test(e)}function gd(e=y()){return/webos/i.test(e)}function yd(e=y()){return/iphone|ipad|ipod/i.test(e)}function vd(e=y()){return yd(e)||pd(e)||gd(e)||md(e)||/windows phone/i.test(e)||fd(e)}function wd(e,t=[]){let n;switch(e){case"Browser":n=ld(y());break;case"Worker":n=`${ld(y())}-${e}`;break;default:n=e}return`${n}/JsCore/9.6.10/${t.length?t.join(","):"FirebaseCore-web"}`}class bd{constructor(e,t,n){this.app=e,this.heartbeatServiceProvider=t,this.config=n,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new Ed(this),this.idTokenSubscription=new Ed(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=_h,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=n.sdkClientVersion}_initializeWithPersistence(e,t){return t&&(this._popupRedirectResolver=Ph(t)),this._initializationPromise=this.queue((async()=>{var n,s;if(!this._deleted&&(this.persistenceManager=await cd.create(this,e),!this._deleted)){if(null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(t),this.lastNotifiedUid=(null===(s=this.currentUser)||void 0===s?void 0:s.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e):void 0}async initializeCurrentUser(e){var t;let n=await this.assertedPersistence.getCurrentUser();if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const s=null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId,i=null==n?void 0:n._redirectEventId,r=await this.tryRedirectSignIn(e);s&&s!==i||!(null==r?void 0:r.user)||(n=r.user)}return n?n._redirectEventId?(Rh(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===n._redirectEventId?this.directlySetCurrentUser(n):this.reloadAndSetCurrentUserOrClear(n)):this.reloadAndSetCurrentUserOrClear(n):this.directlySetCurrentUser(null)}async tryRedirectSignIn(e){let t=null;try{t=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return t}async reloadAndSetCurrentUserOrClear(e){try{await td(e)}catch(e){if("auth/network-request-failed"!==e.code)return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){const t=e?O(e):null;return t&&Rh(t.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(t&&t._clone(this))}async _updateCurrentUser(e){if(!this._deleted)return e&&Rh(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null)}setPersistence(e){return this.queue((async()=>{await this.assertedPersistence.setPersistence(Ph(e))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(e){this._errorFactory=new T("auth","Firebase",e())}onAuthStateChanged(e,t,n){return this.registerStateListener(this.authStateSubscription,e,t,n)}onIdTokenChanged(e,t,n){return this.registerStateListener(this.idTokenSubscription,e,t,n)}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,t){const n=await this.getOrInitRedirectPersistenceManager(t);return null===e?n.removeCurrentUser():n.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const t=e&&Ph(e)||this._popupRedirectResolver;Rh(t,this,"argument-error"),this.redirectPersistenceManager=await cd.create(this,[Ph(t._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var t,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(t=this._currentUser)||void 0===t?void 0:t._redirectEventId)===e?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,t;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(t=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==t?t:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,t,n,s){if(this._deleted)return()=>{};const i="function"==typeof t?t:t.next.bind(t),r=this._isInitialized?Promise.resolve():this._initializationPromise;return Rh(r,this,"internal-error"),r.then((()=>i(this.currentUser))),"function"==typeof t?e.addObserver(t,n,s):e.addObserver(t)}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&(this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh()),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return Rh(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=wd(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const t={"X-Client-Version":this.clientVersion};this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId);const n=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());return n&&(t["X-Firebase-Client"]=n),t}}function Id(e){return O(e)}class Ed{constructor(e){this.auth=e,this.observer=null,this.addObserver=function(e,t){const n=new R(e,void 0);return n.subscribe.bind(n)}((e=>this.observer=e))}get next(){return Rh(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class Td{constructor(e,t){this.providerId=e,this.signInMethod=t}toJSON(){return Dh("not implemented")}_getIdTokenResponse(e){return Dh("not implemented")}_linkToIdToken(e,t){return Dh("not implemented")}_getReauthenticationResolver(e){return Dh("not implemented")}}class _d extends Td{constructor(e,t,n,s=null){super("password",n),this._email=e,this._password=t,this._tenantId=s}static _fromEmailAndPassword(e,t){return new _d(e,t,"password")}static _fromEmailAndCode(e,t,n=null){return new _d(e,t,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e;if((null==t?void 0:t.email)&&(null==t?void 0:t.password)){if("password"===t.signInMethod)return this._fromEmailAndPassword(t.email,t.password);if("emailLink"===t.signInMethod)return this._fromEmailAndCode(t.email,t.password,t.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return async function(e,t){return Hh(e,"POST","/v1/accounts:signInWithPassword",Bh(e,t))}(e,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return Hh(e,"POST","/v1/accounts:signInWithEmailLink",Bh(e,t))}(e,{email:this._email,oobCode:this._password});default:Ch(e,"internal-error")}}async _linkToIdToken(e,t){switch(this.signInMethod){case"password":return async function(e,t){return $h(e,"POST","/v1/accounts:update",t)}(e,{idToken:t,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return Hh(e,"POST","/v1/accounts:signInWithEmailLink",Bh(e,t))}(e,{idToken:t,email:this._email,oobCode:this._password});default:Ch(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function Sd(e,t){return Hh(e,"POST","/v1/accounts:signInWithIdp",Bh(e,t))}class kd extends Td{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const t=new kd(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(t.idToken=e.idToken),e.accessToken&&(t.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(t.nonce=e.nonce),e.pendingToken&&(t.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(t.accessToken=e.oauthToken,t.secret=e.oauthTokenSecret):Ch("argument-error"),t}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e,{providerId:n,signInMethod:s}=t,i=Eh(t,["providerId","signInMethod"]);if(!n||!s)return null;const r=new kd(n,s);return r.idToken=i.idToken||void 0,r.accessToken=i.accessToken||void 0,r.secret=i.secret,r.nonce=i.nonce,r.pendingToken=i.pendingToken||null,r}_getIdTokenResponse(e){return Sd(e,this.buildRequest())}_linkToIdToken(e,t){const n=this.buildRequest();return n.idToken=t,Sd(e,n)}_getReauthenticationResolver(e){const t=this.buildRequest();return t.autoCreate=!1,Sd(e,t)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const t={};this.idToken&&(t.id_token=this.idToken),this.accessToken&&(t.access_token=this.accessToken),this.secret&&(t.oauth_token_secret=this.secret),t.providerId=this.providerId,this.nonce&&!this.pendingToken&&(t.nonce=this.nonce),e.postBody=C(t)}return e}}const Cd={USER_NOT_FOUND:"user-not-found"};class Ad extends Td{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,t){return new Ad({verificationId:e,verificationCode:t})}static _fromTokenResponse(e,t){return new Ad({phoneNumber:e,temporaryProof:t})}_getIdTokenResponse(e){return async function(e,t){return Hh(e,"POST","/v1/accounts:signInWithPhoneNumber",Bh(e,t))}(e,this._makeVerificationRequest())}_linkToIdToken(e,t){return async function(e,t){const n=await Hh(e,"POST","/v1/accounts:signInWithPhoneNumber",Bh(e,t));if(n.temporaryProof)throw Wh(e,"account-exists-with-different-credential",n);return n}(e,Object.assign({idToken:t},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,t){return Hh(e,"POST","/v1/accounts:signInWithPhoneNumber",Bh(e,Object.assign(Object.assign({},t),{operation:"REAUTH"})),Cd)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:t,verificationId:n,verificationCode:s}=this.params;return e&&t?{temporaryProof:e,phoneNumber:t}:{sessionInfo:n,code:s}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:t,verificationCode:n,phoneNumber:s,temporaryProof:i}=e;return n||t||s||i?new Ad({verificationId:t,verificationCode:n,phoneNumber:s,temporaryProof:i}):null}}class Nd{constructor(e){var t,n,s,i,r,o;const a=A(N(e)),c=null!==(t=a.apiKey)&&void 0!==t?t:null,l=null!==(n=a.oobCode)&&void 0!==n?n:null,u=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(s=a.mode)&&void 0!==s?s:null);Rh(c&&l&&u,"argument-error"),this.apiKey=c,this.operation=u,this.code=l,this.continueUrl=null!==(i=a.continueUrl)&&void 0!==i?i:null,this.languageCode=null!==(r=a.languageCode)&&void 0!==r?r:null,this.tenantId=null!==(o=a.tenantId)&&void 0!==o?o:null}static parseLink(e){const t=function(e){const t=A(N(e)).link,n=t?A(N(t)).deep_link_id:null,s=A(N(e)).deep_link_id;return(s?A(N(s)).link:null)||s||n||t||e}(e);try{return new Nd(t)}catch(e){return null}}}class Rd{constructor(){this.providerId=Rd.PROVIDER_ID}static credential(e,t){return _d._fromEmailAndPassword(e,t)}static credentialWithLink(e,t){const n=Nd.parseLink(t);return Rh(n,"argument-error"),_d._fromEmailAndCode(e,n.code,n.tenantId)}}Rd.PROVIDER_ID="password",Rd.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Rd.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class Dd{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class Od extends Dd{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class Ld extends Od{constructor(){super("facebook.com")}static credential(e){return kd._fromParams({providerId:Ld.PROVIDER_ID,signInMethod:Ld.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Ld.credentialFromTaggedObject(e)}static credentialFromError(e){return Ld.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Ld.credential(e.oauthAccessToken)}catch(e){return null}}}Ld.FACEBOOK_SIGN_IN_METHOD="facebook.com",Ld.PROVIDER_ID="facebook.com";class Pd extends Od{constructor(){super("google.com"),this.addScope("profile")}static credential(e,t){return kd._fromParams({providerId:Pd.PROVIDER_ID,signInMethod:Pd.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:t})}static credentialFromResult(e){return Pd.credentialFromTaggedObject(e)}static credentialFromError(e){return Pd.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:t,oauthAccessToken:n}=e;if(!t&&!n)return null;try{return Pd.credential(t,n)}catch(e){return null}}}Pd.GOOGLE_SIGN_IN_METHOD="google.com",Pd.PROVIDER_ID="google.com";class xd extends Od{constructor(){super("github.com")}static credential(e){return kd._fromParams({providerId:xd.PROVIDER_ID,signInMethod:xd.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return xd.credentialFromTaggedObject(e)}static credentialFromError(e){return xd.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return xd.credential(e.oauthAccessToken)}catch(e){return null}}}xd.GITHUB_SIGN_IN_METHOD="github.com",xd.PROVIDER_ID="github.com";class Md extends Od{constructor(){super("twitter.com")}static credential(e,t){return kd._fromParams({providerId:Md.PROVIDER_ID,signInMethod:Md.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:t})}static credentialFromResult(e){return Md.credentialFromTaggedObject(e)}static credentialFromError(e){return Md.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:t,oauthTokenSecret:n}=e;if(!t||!n)return null;try{return Md.credential(t,n)}catch(e){return null}}}Md.TWITTER_SIGN_IN_METHOD="twitter.com",Md.PROVIDER_ID="twitter.com";class Ud{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,t,n,s=!1){const i=await id._fromIdTokenResponse(e,n,s),r=Fd(n);return new Ud({user:i,providerId:r,_tokenResponse:n,operationType:t})}static async _forOperation(e,t,n){await e._updateTokensIfNecessary(n,!0);const s=Fd(n);return new Ud({user:e,providerId:s,_tokenResponse:n,operationType:t})}}function Fd(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class Vd extends E{constructor(e,t,n,s){var i;super(t.code,t.message),this.operationType=n,this.user=s,Object.setPrototypeOf(this,Vd.prototype),this.customData={appName:e.name,tenantId:null!==(i=e.tenantId)&&void 0!==i?i:void 0,_serverResponse:t.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(e,t,n,s){return new Vd(e,t,n,s)}}function qd(e,t,n,s){return("reauthenticate"===t?n._getReauthenticationResolver(e):n._getIdTokenResponse(e)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw Vd._fromErrorAndOperation(e,n,t,s);throw n}))}async function jd(e,t,n=!1){const s="signIn",i=await qd(e,s,t),r=await Ud._fromIdTokenResponse(e,s,i);return n||await e._updateCurrentUser(r.user),r}async function Bd(e,t,n){const s=O(e),i={requestType:"PASSWORD_RESET",email:t};n&&function(e,t,n){var s;Rh((null===(s=n.url)||void 0===s?void 0:s.length)>0,e,"invalid-continue-uri"),Rh(void 0===n.dynamicLinkDomain||n.dynamicLinkDomain.length>0,e,"invalid-dynamic-link-domain"),t.continueUrl=n.url,t.dynamicLinkDomain=n.dynamicLinkDomain,t.canHandleCodeInApp=n.handleCodeInApp,n.iOS&&(Rh(n.iOS.bundleId.length>0,e,"missing-ios-bundle-id"),t.iOSBundleId=n.iOS.bundleId),n.android&&(Rh(n.android.packageName.length>0,e,"missing-android-pkg-name"),t.androidInstallApp=n.android.installApp,t.androidMinimumVersionCode=n.android.minimumVersion,t.androidPackageName=n.android.packageName)}(s,i,n),await async function(e,t){return async function(e,t){return $h(e,"POST","/v1/accounts:sendOobCode",Bh(e,t))}(e,t)}(s,i)}new WeakMap;const $d="__sak";class zd{constructor(e,t){this.storageRetriever=e,this.type=t}_isAvailable(){try{return this.storage?(this.storage.setItem($d,"1"),this.storage.removeItem($d),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,t){return this.storage.setItem(e,JSON.stringify(t)),Promise.resolve()}_get(e){const t=this.storage.getItem(e);return Promise.resolve(t?JSON.parse(t):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class Hd extends zd{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,t)=>this.onStorageEvent(e,t),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const e=y();return hd(e)||yd(e)}()&&function(){try{return!(!window||window===window.top)}catch(e){return!1}}(),this.fallbackToPolling=vd(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const t of Object.keys(this.listeners)){const n=this.storage.getItem(t),s=this.localCache[t];n!==s&&e(t,s,n)}}onStorageEvent(e,t=!1){if(!e.key)return void this.forAllChangedKeys(((e,t,n)=>{this.notifyListeners(e,n)}));const n=e.key;if(t?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const s=this.storage.getItem(n);if(e.newValue!==s)null!==e.newValue?this.storage.setItem(n,e.newValue):this.storage.removeItem(n);else if(this.localCache[n]===e.newValue&&!t)return}const s=()=>{const e=this.storage.getItem(n);(t||this.localCache[n]!==e)&&this.notifyListeners(n,e)},i=this.storage.getItem(n);I()&&10===document.documentMode&&i!==e.newValue&&e.newValue!==e.oldValue?setTimeout(s,10):s()}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t?JSON.parse(t):t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,t,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:t,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,t){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,t){await super._set(e,t),this.localCache[e]=JSON.stringify(t)}async _get(e){const t=await super._get(e);return this.localCache[e]=JSON.stringify(t),t}async _remove(e){await super._remove(e),delete this.localCache[e]}}Hd.type="LOCAL";const Kd=Hd;class Gd extends zd{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,t){}_removeListener(e,t){}}Gd.type="SESSION";const Wd=Gd;class Xd{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const t=this.receivers.find((t=>t.isListeningto(e)));if(t)return t;const n=new Xd(e);return this.receivers.push(n),n}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const t=e,{eventId:n,eventType:s,data:i}=t.data,r=this.handlersMap[s];if(!(null==r?void 0:r.size))return;t.ports[0].postMessage({status:"ack",eventId:n,eventType:s});const o=Array.from(r).map((async e=>e(t.origin,i))),a=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(o);t.ports[0].postMessage({status:"done",eventId:n,eventType:s,response:a})}_subscribe(e,t){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(t)}_unsubscribe(e,t){this.handlersMap[e]&&t&&this.handlersMap[e].delete(t),t&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Yd(e="",t=10){let n="";for(let e=0;e<t;e++)n+=Math.floor(10*Math.random());return e+n}Xd.receivers=[];class Jd{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,t,n=50){const s="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!s)throw new Error("connection_unavailable");let i,r;return new Promise(((o,a)=>{const c=Yd("",20);s.port1.start();const l=setTimeout((()=>{a(new Error("unsupported_event"))}),n);r={messageChannel:s,onMessage(e){const t=e;if(t.data.eventId===c)switch(t.data.status){case"ack":clearTimeout(l),i=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),o(t.data.response);break;default:clearTimeout(l),clearTimeout(i),a(new Error("invalid_response"))}}},this.handlers.add(r),s.port1.addEventListener("message",r.onMessage),this.target.postMessage({eventType:e,eventId:c,data:t},[s.port2])})).finally((()=>{r&&this.removeMessageHandler(r)}))}}function Qd(){return window}function Zd(){return void 0!==Qd().WorkerGlobalScope&&"function"==typeof Qd().importScripts}const ef="firebaseLocalStorageDb",tf="firebaseLocalStorage",nf="fbase_key";class sf{constructor(e){this.request=e}toPromise(){return new Promise(((e,t)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{t(this.request.error)}))}))}}function rf(e,t){return e.transaction([tf],t?"readwrite":"readonly").objectStore(tf)}function of(){const e=indexedDB.open(ef,1);return new Promise(((t,n)=>{e.addEventListener("error",(()=>{n(e.error)})),e.addEventListener("upgradeneeded",(()=>{const t=e.result;try{t.createObjectStore(tf,{keyPath:nf})}catch(e){n(e)}})),e.addEventListener("success",(async()=>{const n=e.result;n.objectStoreNames.contains(tf)?t(n):(n.close(),await function(){const e=indexedDB.deleteDatabase(ef);return new sf(e).toPromise()}(),t(await of()))}))}))}async function af(e,t,n){const s=rf(e,!0).put({[nf]:t,value:n});return new sf(s).toPromise()}function cf(e,t){const n=rf(e,!0).delete(t);return new sf(n).toPromise()}class lf{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await of()),this.db}async _withRetries(e){let t=0;for(;;)try{const t=await this._openDb();return await e(t)}catch(e){if(t++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return Zd()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Xd._getInstance(Zd()?self:null),this.receiver._subscribe("keyChanged",(async(e,t)=>({keyProcessed:(await this._poll()).includes(t.key)}))),this.receiver._subscribe("ping",(async(e,t)=>["keyChanged"]))}async initializeSender(){var e,t;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new Jd(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(e=n[0])||void 0===e?void 0:e.fulfilled)&&(null===(t=n[0])||void 0===t?void 0:t.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){if(this.sender&&this.activeServiceWorker&&((null===(t=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===t?void 0:t.controller)||null)===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(t){}var t}async _isAvailable(){try{if(!indexedDB)return!1;const e=await of();return await af(e,$d,"1"),await cf(e,$d),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,t){return this._withPendingWrite((async()=>(await this._withRetries((n=>af(n,e,t))),this.localCache[e]=t,this.notifyServiceWorker(e))))}async _get(e){const t=await this._withRetries((t=>async function(e,t){const n=rf(e,!1).get(t),s=await new sf(n).toPromise();return void 0===s?null:s.value}(t,e)));return this.localCache[e]=t,t}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((t=>cf(t,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const t=rf(e,!1).getAll();return new sf(t).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const t=[],n=new Set;for(const{fbase_key:s,value:i}of e)n.add(s),JSON.stringify(this.localCache[s])!==JSON.stringify(i)&&(this.notifyListeners(s,i),t.push(s));for(const e of Object.keys(this.localCache))this.localCache[e]&&!n.has(e)&&(this.notifyListeners(e,null),t.push(e));return t}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,t){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}lf.type="LOCAL";const uf=lf;function hf(e){return`__${e}${Math.floor(1e6*Math.random())}`}hf("rcb"),new Uh(3e4,6e4);class df{constructor(e){this.providerId=df.PROVIDER_ID,this.auth=Id(e)}verifyPhoneNumber(e,t){return async function(e,t,n){var s;const i=await n.verify();try{let r;if(Rh("string"==typeof i,e,"argument-error"),Rh("recaptcha"===n.type,e,"argument-error"),r="string"==typeof t?{phoneNumber:t}:t,"session"in r){const t=r.session;if("phoneNumber"in r){Rh("enroll"===t.type,e,"internal-error");const n=await function(e,t){return $h(e,"POST","/v2/accounts/mfaEnrollment:start",Bh(e,t))}(e,{idToken:t.credential,phoneEnrollmentInfo:{phoneNumber:r.phoneNumber,recaptchaToken:i}});return n.phoneSessionInfo.sessionInfo}{Rh("signin"===t.type,e,"internal-error");const n=(null===(s=r.multiFactorHint)||void 0===s?void 0:s.uid)||r.multiFactorUid;Rh(n,e,"missing-multi-factor-info");const o=await function(e,t){return $h(e,"POST","/v2/accounts/mfaSignIn:start",Bh(e,t))}(e,{mfaPendingCredential:t.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:i}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:t}=await async function(e,t){return $h(e,"POST","/v1/accounts:sendVerificationCode",Bh(e,t))}(e,{phoneNumber:r.phoneNumber,recaptchaToken:i});return t}}finally{n._reset()}}(this.auth,e,O(t))}static credential(e,t){return Ad._fromVerification(e,t)}static credentialFromResult(e){const t=e;return df.credentialFromTaggedObject(t)}static credentialFromError(e){return df.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:t,temporaryProof:n}=e;return t&&n?Ad._fromTokenResponse(t,n):null}}df.PROVIDER_ID="phone",df.PHONE_SIGN_IN_METHOD="phone";class ff extends Td{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return Sd(e,this._buildIdpRequest())}_linkToIdToken(e,t){return Sd(e,this._buildIdpRequest(t))}_getReauthenticationResolver(e){return Sd(e,this._buildIdpRequest())}_buildIdpRequest(e){const t={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(t.idToken=e),t}}function pf(e){return jd(e.auth,new ff(e),e.bypassAuthState)}function mf(e){const{auth:t,user:n}=e;return Rh(n,t,"internal-error"),async function(e,t,n=!1){const{auth:s}=e,i="reauthenticate";try{const r=await Qh(e,qd(s,i,t,e),n);Rh(r.idToken,s,"internal-error");const o=Jh(r.idToken);Rh(o,s,"internal-error");const{sub:a}=o;return Rh(e.uid===a,s,"user-mismatch"),Ud._forOperation(e,i,r)}catch(e){throw"auth/user-not-found"===(null==e?void 0:e.code)&&Ch(s,"user-mismatch"),e}}(n,new ff(e),e.bypassAuthState)}async function gf(e){const{auth:t,user:n}=e;return Rh(n,t,"internal-error"),async function(e,t,n=!1){const s=await Qh(e,t._linkToIdToken(e.auth,await e.getIdToken()),n);return Ud._forOperation(e,"link",s)}(n,new ff(e),e.bypassAuthState)}class yf{constructor(e,t,n,s,i=!1){this.auth=e,this.resolver=n,this.user=s,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(t)?t:[t]}execute(){return new Promise((async(e,t)=>{this.pendingPromise={resolve:e,reject:t};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:t,sessionId:n,postBody:s,tenantId:i,error:r,type:o}=e;if(r)return void this.reject(r);const a={auth:this.auth,requestUri:t,sessionId:n,tenantId:i||void 0,postBody:s||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return pf;case"linkViaPopup":case"linkViaRedirect":return gf;case"reauthViaPopup":case"reauthViaRedirect":return mf;default:Ch(this.auth,"internal-error")}}resolve(e){Oh(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){Oh(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const vf=new Uh(2e3,1e4);class wf extends yf{constructor(e,t,n,s,i){super(e,t,s,i),this.provider=n,this.authWindow=null,this.pollId=null,wf.currentPopupAction&&wf.currentPopupAction.cancel(),wf.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return Rh(e,this.auth,"internal-error"),e}async onExecution(){Oh(1===this.filter.length,"Popup operations only handle one event");const e=Yd();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(Ah(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(Ah(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,wf.currentPopupAction=null}pollUserCancellation(){const e=()=>{var t,n;(null===(n=null===(t=this.authWindow)||void 0===t?void 0:t.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(Ah(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(e,vf.get())};e()}}wf.currentPopupAction=null;const bf=new Map;class If extends yf{constructor(e,t,n=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],t,void 0,n),this.eventId=null}async execute(){let e=bf.get(this.auth._key());if(!e){try{const t=await async function(e,t){const n=function(e){return ad("pendingRedirect",e.config.apiKey,e.name)}(t),s=function(e){return Ph(e._redirectPersistence)}(e);if(!await s._isAvailable())return!1;const i="true"===await s._get(n);return await s._remove(n),i}(this.resolver,this.auth),n=t?await super.execute():null;e=()=>Promise.resolve(n)}catch(t){e=()=>Promise.reject(t)}bf.set(this.auth._key(),e)}return this.bypassAuthState||bf.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const t=await this.auth._redirectUserForId(e.eventId);if(t)return this.user=t,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}async function Ef(e,t,n=!1){const s=Id(e),i=function(e,t){return t?Ph(t):(Rh(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}(s,t),r=new If(s,i,n),o=await r.execute();return o&&!n&&(delete o.user._redirectEventId,await s._persistUserIfCurrent(o.user),await s._setRedirectUser(null,t)),o}class Tf{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let t=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(e,n)&&(t=!0,this.sendToConsumer(e,n),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return Sf(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,t||(this.queuedRedirectEvent=e,t=!0)),t}sendToConsumer(e,t){var n;if(e.error&&!Sf(e)){const s=(null===(n=e.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";t.onError(Ah(this.auth,s))}else t.onAuthEvent(e)}isEventForConsumer(e,t){const n=null===t.eventId||!!e.eventId&&e.eventId===t.eventId;return t.filter.includes(e.type)&&n}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(_f(e))}saveEventToCache(e){this.cachedEventUids.add(_f(e)),this.lastProcessedEventTime=Date.now()}}function _f(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function Sf({type:e,error:t}){return"unknown"===e&&"auth/no-auth-event"===(null==t?void 0:t.code)}const kf=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,Cf=/^https?/;function Af(e){const t=xh(),{protocol:n,hostname:s}=new URL(t);if(e.startsWith("chrome-extension://")){const i=new URL(e);return""===i.hostname&&""===s?"chrome-extension:"===n&&e.replace("chrome-extension://","")===t.replace("chrome-extension://",""):"chrome-extension:"===n&&i.hostname===s}if(!Cf.test(n))return!1;if(kf.test(e))return s===e;const i=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(s)}const Nf=new Uh(3e4,6e4);function Rf(){const e=Qd().___jsl;if(null==e?void 0:e.H)for(const t of Object.keys(e.H))if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=[...e.H[t].L],e.CP)for(let t=0;t<e.CP.length;t++)e.CP[t]=null}let Df=null;function Of(e){return Df=Df||function(e){return new Promise(((t,n)=>{var s,i,r,o;function a(){Rf(),gapi.load("gapi.iframes",{callback:()=>{t(gapi.iframes.getContext())},ontimeout:()=>{Rf(),n(Ah(e,"network-request-failed"))},timeout:Nf.get()})}if(null===(i=null===(s=Qd().gapi)||void 0===s?void 0:s.iframes)||void 0===i?void 0:i.Iframe)t(gapi.iframes.getContext());else{if(!(null===(r=Qd().gapi)||void 0===r?void 0:r.load)){const t=hf("iframefcb");return Qd()[t]=()=>{gapi.load?a():n(Ah(e,"network-request-failed"))},(o=`https://apis.google.com/js/api.js?onload=${t}`,new Promise(((e,t)=>{const n=document.createElement("script");var s,i;n.setAttribute("src",o),n.onload=e,n.onerror=e=>{const n=Ah("internal-error");n.customData=e,t(n)},n.type="text/javascript",n.charset="UTF-8",(null!==(i=null===(s=document.getElementsByTagName("head"))||void 0===s?void 0:s[0])&&void 0!==i?i:document).appendChild(n)}))).catch((e=>n(e)))}a()}})).catch((e=>{throw Df=null,e}))}(e),Df}const Lf=new Uh(5e3,15e3),Pf={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},xf=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Mf(e){const t=e.config;Rh(t.authDomain,e,"auth-domain-config-required");const n=t.emulator?Fh(t,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,s={apiKey:t.apiKey,appName:e.name,v:ce},i=xf.get(e.config.apiHost);i&&(s.eid=i);const r=e._getFrameworks();return r.length&&(s.fw=r.join(",")),`${n}?${C(s).slice(1)}`}const Uf={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class Ff{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}function Vf(e,t,n,s,i,r){Rh(e.config.authDomain,e,"auth-domain-config-required"),Rh(e.config.apiKey,e,"invalid-api-key");const o={apiKey:e.config.apiKey,appName:e.name,authType:n,redirectUrl:s,v:ce,eventId:i};if(t instanceof Dd){t.setDefaultLanguage(e.languageCode),o.providerId=t.providerId||"",function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}(t.getCustomParameters())||(o.customParameters=JSON.stringify(t.getCustomParameters()));for(const[e,t]of Object.entries(r||{}))o[e]=t}if(t instanceof Od){const e=t.getScopes().filter((e=>""!==e));e.length>0&&(o.scopes=e.join(","))}e.tenantId&&(o.tid=e.tenantId);const a=o;for(const e of Object.keys(a))void 0===a[e]&&delete a[e];return`${function({config:e}){return e.emulator?Fh(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${C(a).slice(1)}`}const qf="webStorageSupport",jf=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Wd,this._completeRedirectFn=Ef}async _openPopup(e,t,n,s){var i;return Oh(null===(i=this.eventManagers[e._key()])||void 0===i?void 0:i.manager,"_initialize() not called before _openPopup()"),function(e,t,n,s=500,i=600){const r=Math.max((window.screen.availHeight-i)/2,0).toString(),o=Math.max((window.screen.availWidth-s)/2,0).toString();let a="";const c=Object.assign(Object.assign({},Uf),{width:s.toString(),height:i.toString(),top:r,left:o}),l=y().toLowerCase();n&&(a=dd(l)?"_blank":n),ud(l)&&(t=t||"http://localhost",c.scrollbars="yes");const u=Object.entries(c).reduce(((e,[t,n])=>`${e}${t}=${n},`),"");if(function(e=y()){var t;return yd(e)&&!!(null===(t=window.navigator)||void 0===t?void 0:t.standalone)}(l)&&"_self"!==a)return function(e,t){const n=document.createElement("a");n.href=e,n.target=t;const s=document.createEvent("MouseEvent");s.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(s)}(t||"",a),new Ff(null);const h=window.open(t||"",a,u);Rh(h,e,"popup-blocked");try{h.focus()}catch(e){}return new Ff(h)}(e,Vf(e,t,n,xh(),s),Yd())}async _openRedirect(e,t,n,s){var i;return await this._originValidation(e),i=Vf(e,t,n,xh(),s),Qd().location.href=i,new Promise((()=>{}))}_initialize(e){const t=e._key();if(this.eventManagers[t]){const{manager:e,promise:n}=this.eventManagers[t];return e?Promise.resolve(e):(Oh(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(e);return this.eventManagers[t]={promise:n},n.catch((()=>{delete this.eventManagers[t]})),n}async initAndGetManager(e){const t=await async function(e){const t=await Of(e),n=Qd().gapi;return Rh(n,e,"internal-error"),t.open({where:document.body,url:Mf(e),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:Pf,dontclear:!0},(t=>new Promise((async(n,s)=>{await t.restyle({setHideOnLeave:!1});const i=Ah(e,"network-request-failed"),r=Qd().setTimeout((()=>{s(i)}),Lf.get());function o(){Qd().clearTimeout(r),n(t)}t.ping(o).then(o,(()=>{s(i)}))}))))}(e),n=new Tf(e);return t.register("authEvent",(t=>(Rh(null==t?void 0:t.authEvent,e,"invalid-auth-event"),{status:n.onEvent(t.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:n},this.iframes[e._key()]=t,n}_isIframeWebStorageSupported(e,t){this.iframes[e._key()].send(qf,{type:qf},(n=>{var s;const i=null===(s=null==n?void 0:n[0])||void 0===s?void 0:s.webStorageSupport;void 0!==i&&t(!!i),Ch(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const t=e._key();return this.originValidationPromises[t]||(this.originValidationPromises[t]=async function(e){if(e.config.emulator)return;const{authorizedDomains:t}=await async function(e,t={}){return $h(e,"GET","/v1/projects",t)}(e);for(const e of t)try{if(Af(e))return}catch(e){}Ch(e,"unauthorized-domain")}(e)),this.originValidationPromises[t]}get _shouldInitProactively(){return vd()||hd()||yd()}};var Bf,$f="@firebase/auth",zf="0.19.11";class Hf{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const t=this.auth.onIdTokenChanged((t=>{var n;e((null===(n=t)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,t),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const t=this.internalListeners.get(e);t&&(this.internalListeners.delete(e),t(),this.updateProactiveRefresh())}assertAuthConfigured(){Rh(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}Bf="Browser",ie(new F("auth",((e,{options:t})=>{const n=e.getProvider("app").getImmediate(),s=e.getProvider("heartbeat"),{apiKey:i,authDomain:r}=n.options;return((e,n)=>{Rh(i&&!i.includes(":"),"invalid-api-key",{appName:e.name}),Rh(!(null==r?void 0:r.includes(":")),"argument-error",{appName:e.name});const s={apiKey:i,authDomain:r,clientPlatform:Bf,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:wd(Bf)},o=new bd(e,n,s);return function(e,t){const n=(null==t?void 0:t.persistence)||[],s=(Array.isArray(n)?n:[n]).map(Ph);(null==t?void 0:t.errorMap)&&e._updateErrorMap(t.errorMap),e._initializeWithPersistence(s,null==t?void 0:t.popupRedirectResolver)}(o,t),o})(n,s)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,t,n)=>{e.getProvider("auth-internal").initialize()}))),ie(new F("auth-internal",(e=>(e=>new Hf(e))(Id(e.getProvider("auth").getImmediate()))),"PRIVATE").setInstantiationMode("EXPLICIT")),ue($f,zf,void 0),ue($f,zf,"esm2017");var Kf=document.querySelector("#instructions p"),Gf=[11,14,13,18,17,13,22,20],Wf=[7,10,10,14,20,10,20,20],Xf=["vaccinate the world's population and help fight the coronavirus. If you fail, a new variant will arrive...","you made it! But the population grew and you need to vaccinate more people now!","you made it again! Now let's see if you can do it even faster!","great job! But bats are coming and need to get vaccinated too. Can you do that?","amazing work! Can you vaccinate more people in less time?","you are awesome! Now let's see if you can do it while people are in a hurry!","the coronavirus can't beat you! Let's try it fast and with the bats!","you're almost at the end of your journey. Only one stage to go!","congratulations! You ended the coronavirus. Now, start over and try to gain the world's highest score."],Yf=["Vaccinate the world's population and help fight the coronavirus. If you fail, a new variant will arrive...","You made it! But the population grew and you need to vaccinate more people now!","You made it again! Now let's see if you can do it even faster!","Great job! But bats are coming and need to get vaccinated too. Can you do that?","Amazing work! Can you vaccinate more people in less time?","You are awesome! Now let's see if you can do it while people are in a hurry!","The coronavirus can't beat you! Let's try it fast and with the bats!","You're almost at the end of your journey. Only one stage to go!","Congratulations! You ended the coronavirus. Now, start over and try to gain the world's highest score."],Jf=(function(e,t={}){"object"!=typeof t&&(t={name:t});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},t),s=n.name;if("string"!=typeof s||!s)throw oe.create("bad-app-name",{appName:String(s)});const i=te.get(s);if(i){if(S(e,i.options)&&S(n,i.config))return i;throw oe.create("duplicate-app",{appName:s})}const r=new j(s);for(const e of ne.values())r.addComponent(e);const o=new ae(e,n,r);te.set(s,o)}({apiKey:"AIzaSyAQ8bwV2MCpnsyTasXZLKns3os5dkR1de8",authDomain:"corona-game-fbf6d.firebaseapp.com",projectId:"corona-game-fbf6d",storageBucket:"corona-game-fbf6d.appspot.com",messagingSenderId:"26072350198",appId:"1:26072350198:web:09e9cc86fcf52eda1c1bd7"}),function(e=le()){const t=re(e,"auth");return t.isInitialized()?t.getImmediate():function(e,t){const n=re(e,"auth");if(n.isInitialized()){const e=n.getImmediate();if(S(n.getOptions(),null!=t?t:{}))return e;Ch(e,"already-initialized")}return n.initialize({options:t})}(e,{popupRedirectResolver:jf,persistence:[uf,Kd,Wd]})}()),Qf=function(e=le()){return re(e,"firestore").getImmediate()}(),Zf=(Du(Qf,"nicknamesCollection"),0),ep=document.querySelector("#register"),tp=document.querySelector("#registerFormContainer"),np=document.querySelector("#registerForm"),sp=document.querySelectorAll("#registerFormContainer #registerForm input"),ip=document.querySelectorAll("#registerFormContainer #registerForm p"),rp=document.querySelector("#registerFormContainer #registerForm #lastName"),op=document.querySelector("#registerFormContainer #registerForm #firstName"),ap=document.querySelector("#registerFormContainer #registerForm #lastNameP"),cp=document.querySelector("#registerFormContainer #registerForm #firstNameP"),lp=document.querySelector("#signIn"),up=document.querySelector("#signInFormContainer"),hp=document.querySelector("#signInForm"),dp=document.querySelector(".x"),fp=document.querySelector("#instructions p"),pp=document.querySelector("#instructions form"),mp=document.querySelector("#instructions form label"),gp=document.querySelector("#instructions form #nickname"),yp=document.querySelector("#instructions form #startButton"),vp=document.querySelector("#signOut"),wp=document.querySelector("#hourglass"),bp=document.querySelector("#signInFormContainer #signInForm p"),Ip=document.querySelector("#forgotContainer"),Ep=document.querySelector("#forgotContainer #forgotForm"),Tp=document.querySelector(".x2"),_p=document.querySelector("#backToGame"),Sp=document.querySelector("#emailSent"),kp=document.querySelector("#emailSent p"),Cp=document.querySelector("#quit"),Ap=function(){tp.style.display="block",dp.style.display="block"};ep.addEventListener("click",Ap);var Np=function(){up.style.display="block",dp.style.display="block"};lp.addEventListener("click",Np),dp.addEventListener("click",(function(){up.style.display="none",hp.reset(),tp.style.display="none",np.reset(),dp.style.display="none",_p.style.display="none",sp.forEach((function(e){e.classList.remove("invalid")})),ip.forEach((function(e){e.classList.remove("invalid")}))})),Cp.addEventListener("click",(function(){location.reload()}));var Rp={firstName:/^[a-zA-Z]+((( - )|( -)|(- )|-| )?[a-zA-Z]+)*$/,lastName:/^[a-zA-Z]+((( - )|( -)|(- )|-| )?[a-zA-Z]+)*$/,nicknameRegisteredUser:/^[a-zA-Z0-9]+( ?(_|-|\.)? ?[a-zA-Z0-9]+)*$/,email:/^([\w\d\.-]+)@([\w\d-]+)\.([a-zA-Z]{2,12})(\.[a-zA-Z]{2,8})?$/,password:/^[\w\d-@\.]{8,20}$/};sp.forEach((function(e){var t=e.getAttribute("id");e.addEventListener("focusout",(function(n){"submitRegisterForm"!==e.getAttribute("id")&&(0==Rp[n.target.name].test(n.target.value)?""!==n.target.value&&(e.classList.add("invalid"),ip.forEach((function(n){"firstName"!=e.getAttribute("name")&&"lastName"!=e.getAttribute("name")||1!=rp.classList.contains("invalid")||1!=op.classList.contains("invalid")?n.getAttribute("id")==t+"P"&&n.classList.add("invalid"):console.log("")}))):(e.classList.remove("invalid"),ip.forEach((function(n){"firstName"!=e.getAttribute("name")&&"lastName"!=e.getAttribute("name")||1!=rp.classList.contains("invalid")&&1!=op.classList.contains("invalid")?"firstName"!=e.getAttribute("name")&&"lastName"!=e.getAttribute("name")||0!=rp.classList.contains("invalid")||0!=op.classList.contains("invalid")?n.getAttribute("id")==t+"P"&&n.classList.remove("invalid"):(ap.classList.remove("invalid"),cp.classList.remove("invalid")):console.log("")}))))}))})),np.addEventListener("submit",(function(e){e.preventDefault();var t=function(e){return e.classList.contains("invalid")};if(Array.from(sp).some(t)||Array.from(ip).some(t))console.log("do nothing");else{wp.style.display="block";var n=np.email.value,s=np.password.value,i=np.nicknameRegisteredUser.value,r=Ou(Qf,"nicknamesCollection",i);yh(r).then((function(e){wp.style.display="none",null==e.data()?async function(e,t,n){const s=Id(e),i=await async function(e,t){return Hh(e,"POST","/v1/accounts:signUp",Bh(e,t))}(s,{returnSecureToken:!0,email:t,password:n}),r=await Ud._fromIdTokenResponse(s,"signIn",i);return await s._updateCurrentUser(r.user),r}(Jf,n,s).then((function(e){console.log(" user registered: ",e.user),localStorage.setItem("name",i),localStorage.setItem("bestScore",0),localStorage.setItem("score",0),u.style.display="none"})).then((function(){return async function(e,{displayName:t,photoURL:n}){if(void 0===t&&void 0===n)return;const s=O(e),i={idToken:await s.getIdToken(),displayName:t,photoUrl:n,returnSecureToken:!0},r=await Qh(s,async function(e,t){return $h(e,"POST","/v1/accounts:update",t)}(s.auth,i));s.displayName=r.displayName||null,s.photoURL=r.photoUrl||null;const o=s.providerData.find((({providerId:e})=>"password"===e));o&&(o.displayName=s.displayName,o.photoURL=s.photoURL),await s._updateTokensIfNecessary(r)}(Jf.currentUser,{displayName:i})})).then((function(){document.forms.nicknameForm.nickname.setAttribute("value",Jf.currentUser.displayName),console.log("nickname: "+Jf.currentUser.displayName+" email: "+Jf.currentUser.email+" userID: "+Jf.currentUser.uid),console.log(document.forms.nicknameForm.nickname.value),console.log(localStorage.name)})).then((function(){wh(r,{Nickname:i}).then((function(){console.log("We have set the new docs")})).catch((function(e){console.log(e.message),alert("There was a problem processing your request."),wp.style.display="none"}))})).then((function(){wh(Ou(Qf,"usersScore",Jf.currentUser.displayName),{Score:0,Nickname:i}).then((function(){console.log("We have set the other docs"),np.reset(),wp.style.display="none",tp.style.display="none",mp.style.display="none",gp.style.display="none",ep.style.display="none",lp.style.display="none",dp.style.display="none",Kf.textContent=i+", "+Xf[Zf],yp.style.fontSize="17px",yp.style.color="#555",vp.style.display="block"})).catch((function(e){console.log(e.message),alert("There was a problem processing your request."),wp.style.display="none"}))})).catch((function(e){wp.style.display="none",console.log(e.message),e.message.includes("network-request-failed")?setTimeout((function(){alert("Network request failed, please check your internet connection or try again later.")}),300):e.message.includes("email-already-in-use")?setTimeout((function(){alert("Email already in use, please choose a different one.")}),300):e.message.includes("weak-password")?setTimeout((function(){alert("Password should be at least 6 characters.")}),300):setTimeout((function(){alert("There was a problem processing your request.")}),300)})):(console.log("Nickname already exists:",e.data()),alert("This nickname is already taken, please choose a different one"))})).catch((function(e){console.log("Error message for getDoc:",e.message),wp.style.display="none",setTimeout((function(){alert("There was a problem processing your request. Please try again later.")}),300)}))}})),hp.addEventListener("submit",(function(e){e.preventDefault();var t=hp.email.value,n=hp.password.value;wp.style.display="block",function(e,t,n){return async function(e,t){return jd(Id(e),t)}(O(e),Rd.credential(t,n))}(Jf,t,n).then((function(e){wp.style.display="none",hp.reset(),console.log("user signed in: ",e.user,"nickname: ",Jf.currentUser.displayName),Kf.textContent=Jf.currentUser.displayName+", "+Xf[Zf],document.forms.nicknameForm.nickname.setAttribute("value",Jf.currentUser.displayName),up.style.display="none",mp.style.display="none",gp.style.display="none",ep.style.display="none",lp.style.display="none",vp.style.display="block",dp.style.display="none",yp.style.fontSize="17px",yp.style.color="#555",_p.style.display="none",u.style.display="none",localStorage.clear(),localStorage.getItem("name"),localStorage.getItem("score"),localStorage.getItem("bestScore"),localStorage.setItem("name",Jf.currentUser.displayName),yh(Ou(Qf,"usersScore",Jf.currentUser.displayName)).then((function(e){localStorage.setItem("bestScore",e.data().Score),console.log(document.forms.nicknameForm.nickname.value),console.log(localStorage.name),null!=localStorage.getItem("bestScore")&&""!=localStorage.getItem("bestScore")&&0!=localStorage.getItem("bestScore")?(h.textContent=localStorage.getItem("bestScore"),u.style.display="block"):u.style.display="none"})).catch((function(e){console.log(e.message)}))})).catch((function(e){wp.style.display="none",console.log(e.message),e.message.includes("wrong-password")?setTimeout((function(){alert("Wrong password.")}),300):e.message.includes("user-not-found")?setTimeout((function(){alert("User not found.")}),300):e.message.includes("network-request-failed")?setTimeout((function(){alert("Network request failed.")}),300):setTimeout((function(){alert("Signing in error, please try again later.")}),300)}))})),bp.addEventListener("click",(function(){Ip.style.display="block",up.style.display="none",dp.style.display="none",Tp.style.display="block",_p.style.display="block"})),Tp.addEventListener("click",(function(){Ip.style.display="none",up.style.display="block",dp.style.display="block",Tp.style.display="none",_p.style.display="block",Ep.reset()})),_p.addEventListener("click",(function(){Ip.style.display="none",up.style.display="none",dp.style.display="none",Tp.style.display="none",_p.style.display="none",Ep.reset()})),Ep.addEventListener("submit",(function(e){e.preventDefault();var t=Ep.email.value;console.log(t),wp.style.display="block",kp.classList.add("animationIsOn"),kp.classList.remove("animationRemoved"),Bd(Jf,t).then((function(){wp.style.display="none",console.log("Email sent!"),Sp.style.display="flex",kp.style.animation="emailSent 2.5s ease forwards normal",setTimeout((function(){Sp.style.display="none",kp.classList.add("animationRemoved"),kp.classList.remove("animationIsOn")}),2500),Ep.reset(),Ip.style.display="none",up.style.display="block",dp.style.display="block",Tp.style.display="none",_p.style.display="block"})).catch((function(e){wp.style.display="none",e.message,console.log(e.message),e.message.includes("network-request-failed")?setTimeout((function(){alert("Network request failed, please check your internet connection or try again later.")}),300):e.message.includes("invalid-email")?setTimeout((function(){alert("Invalid email, please verify your email below and resend it.")}),300):e.message.includes("user-not-found")?setTimeout((function(){alert("Account does not exist.")}),300):setTimeout((function(){alert("There was a problem processing your request.")}),300)}))})),vp.addEventListener("click",(function(){vp.style.display="none",ep.style.display="inline-block",lp.style.display="inline-block",localStorage.clear(),localStorage.getItem("name"),localStorage.getItem("score"),localStorage.getItem("bestScore"),console.log("after clearing in signout:"+localStorage.name),function(e){return O(e).signOut()}(Jf).then((function(){console.log("the user logged out"),Kf.textContent=Yf[Zf],u.style.display="none",mp.style.display="inline-block",mp.style.right="3px",gp.style.display="inline-block",yp.style.fontSize="14px",yp.style.color="buttontext",document.forms.nicknameForm.nickname.setAttribute("value",""),console.log(document.forms.nicknameForm.nickname.value),console.log(localStorage.name)})).catch((function(e){console.log(e.message)}))}));var Dp=0;!function(e,t,n,s){O(e).onAuthStateChanged(t,void 0,void 0)}(Jf,(function(e){e?(Dp=1,console.log(Dp,e),ep.style.display="none",lp.style.display="none",vp.style.display="block",Kf.textContent=Jf.currentUser.displayName+", "+Xf[Zf],mp.style.display="none",gp.style.display="none",yp.style.fontSize="17px",yp.style.color="#555"):(Dp=0,console.log(Dp,e))}));var Op,Lp=document.querySelector("#instructions h4"),Pp=document.querySelector("#trial3"),xp=document.querySelector("#instructions #bestPlayerName"),Mp=document.createElement("div"),Up=function(){ep.removeEventListener("click",Ap),lp.removeEventListener("click",Np),u.style.display="none",Op=1,Mp.classList.add("trial","trial4"),e.insertBefore(Mp,Pp),Mp.style.zIndex="11"},Fp=window.matchMedia("(orientation: portrait)");Fp.matches&&Up(),Fp.addEventListener("change",(function(e){e.matches&&Up()})),(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substring(0,5)))&&(fp.style.display="none",pp.style.display="none",Lp.style.display="block",s.style.display="none",xp.style.display="none",Lp.style.fontSize="24px",Up());var Vp=document.querySelectorAll(".trial"),qp=0,jp=function(e){return qp=e},Bp=e.clientWidth;console.log("ourViewPortWidth: "+Bp+" ourViewPortHeight: "+e.clientHeight),window.addEventListener("resize",(function(){Bp=e.clientWidth}));var $p=function(t,n){var s=Math.floor(5*Math.random())-2,i=Math.floor(5*Math.random())-2;0==s&&0==i&&(s=2);var r,o=function(n,s){1!=qp?t.offsetTop<=1&&t.offsetLeft>=e.clientWidth-56-1?(t.style.top=e.clientHeight-56-2+"px",t.style.left="2px"):t.offsetTop<=1&&t.offsetLeft<=1?(t.style.top=e.clientHeight-56-2+"px",t.style.left=Bp-56-2+"px"):t.offsetTop>=e.clientHeight-56-1&&t.offsetLeft<=1?(t.style.top="2px",t.style.left=Bp-56-2+"px"):t.offsetTop>=e.clientHeight-56-1&&t.offsetLeft>=e.clientWidth-56-1?(t.style.top="2px",t.style.left="2px"):t.offsetTop<=1?(t.style.top=e.clientHeight-56-2+"px",t.style.left=e.clientWidth-56-parseInt(t.style.left)+"px"):t.offsetTop>=e.clientHeight-56-1?(t.style.top="2px",t.style.left=e.clientWidth-56-parseInt(t.style.left)+"px"):t.offsetLeft<=1?(t.style.left=Bp-56-2+"px",t.style.top=e.clientHeight-56-parseInt(t.style.top)+"px"):t.offsetLeft>=e.clientWidth-56-1?(t.style.left="2px",t.style.top=e.clientHeight-56-parseInt(t.style.top)+"px"):(t.style.top=parseInt(t.style.top)+s+"px",t.style.left=parseInt(t.style.left)+n+"px"):clearInterval(r)};[11,12,13,14].some((function(e){return t.style.background.includes(e)}))?r=setInterval((function(){return o(s,i)}),9):"fast"==n?(r=setInterval((function(){return o(s,i)}),12),console.log("going fast now")):r="slow"==n?setInterval((function(){return o(s,i)}),40):setInterval((function(){return o(s,i)}),20)};function zp(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function Hp(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zp(Object(n),!0).forEach((function(t){Kp(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zp(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Kp(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Array.from(Vp).forEach((function(t){t.style.top=Math.random()*(e.clientHeight-56)+"px",t.style.left=Math.random()*(e.clientWidth-56)+"px",$p(t,"slow")}));var Gp,Wp,Xp=document.querySelector("footer"),Yp=document.querySelector("#topEyeshade"),Jp=document.querySelector("#bottomEyeshade"),Qp=document.querySelectorAll(".tinyCircle"),Zp=document.querySelectorAll(".corona"),em=document.querySelectorAll(".tinyCircleContainer"),tm=document.querySelector("#sign"),nm=document.querySelector("#headline"),sm=document.querySelector("#go"),im=0,rm=[],om=[],am=[],cm=0,lm=document.querySelector("header #bonusArrow"),um=0;console.log(document.forms.nicknameForm.nickname.value),console.log(localStorage.name);var hm=function(e,...t){for(const n of t)e=n._apply(e);return e}(Du(Qf,"usersScore"),function(e,t="asc"){const n=t,s=ch("orderBy","Score");return new mh(s,n)}(0,"desc"),(function(e,t){if(t<=0)throw new zi($i.INVALID_ARGUMENT,`Function ${e}() requires a positive number, but it was: ${t}.`)}("limit",1),new gh("limit",1,"F"))),dm=document.querySelector("#instructions #bestPlayerName span"),fm=document.querySelector("#instructions #bestPlayerScore"),pm=document.querySelector("#instructions #bestPlayerScore span");!function(e,...t){var n,s,i;e=O(e);let r={includeMetadataChanges:!1},o=0;"object"!=typeof t[o]||Pu(t[o])||(r=t[o],o++);const a={includeMetadataChanges:r.includeMetadataChanges};if(Pu(t[o])){const e=t[o];t[o]=null===(n=e.next)||void 0===n?void 0:n.bind(e),t[o+1]=null===(s=e.error)||void 0===s?void 0:s.bind(e),t[o+2]=null===(i=e.complete)||void 0===i?void 0:i.bind(e)}let c,l,u;if(e instanceof Au)l=Su(e.firestore,xu),u=po(e._key.path),c={next:n=>{t[o]&&t[o](Ih(l,e,n))},error:t[o+1],complete:t[o+2]};else{const n=Su(e,Nu);l=Su(n.firestore,xu),u=n._query;const s=new vh(l);c={next:e=>{t[o]&&t[o](new dh(l,s,n,e))},error:t[o+1],complete:t[o+2]},function(e){if(go(e)&&0===e.explicitOrderBy.length)throw new zi($i.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(e._query)}!function(e,t,n,s){const i=new pu(s),r=new jl(t,i,n);e.asyncQueue.enqueueAndForget((async()=>Ul(await vu(e),r)))}(Mu(l),u,a,c)}(hm,(function(e){e.docs.forEach((function(e){1!=Op&&(dm.textContent=Hp({},e.data()).Nickname,pm.textContent=Hp({},e.data()).Score)}))})),console.log("savedNickname before start of game: "+d),yp.addEventListener("click",(function(n){n.preventDefault(),console.log("after start of game: "+document.forms.nicknameForm.nickname.value),console.log("after start of game: "+localStorage.name),vp.style.display="none",u.style.display="none",Cp.style.display="none",nm.style.opacity="0",xp.style.display="none",Array.from(Vp).forEach((function(e){console.log(e),e.style.display="none",jp(1)})),jp(0);for(var s=1;s<=Wf[im];s++)4!=im||11!=s&&12!=s&&13!=s&&14!=s?am.push(s):console.log("");0==im&&(1==Wp?sm.style.display="none":(sm.style.display="block",sm.style.animation="goGrows 1.35s ease normal",setTimeout((function(){sm.style.display="none"}),1350))),am.forEach((function(t){rm.push("figure"+t);var n=document.createElement("div");n.classList.add("figures"),n.setAttribute("id","figure"+t),e.insertBefore(n,Xp),om.push(n)})),rm.forEach((function(t){var n=document.querySelector("#"+t);n.style.background="url('./".concat(t,".svg')"),n.style.top=Math.random()*(e.clientHeight-56)+"px",n.style.left=Math.random()*(e.clientWidth-56)+"px",n.style.display="block",$p(n,im>=5?"fast":"regular");var s=function e(){n.removeEventListener("click",e),n.style.background="url(./stars.svg)",n.style.animation="fireworks 0.75s ease forwards normal",cm+=10,um+=1,console.log(um),i.textContent=cm,localStorage.score=cm,setTimeout((function(){n.remove()}),751)};n.addEventListener("click",s),setTimeout((function(){n.removeEventListener("click",s)}),1e3*Gf[im])})),Gp=document.forms.nicknameForm.nickname.value,console.log("Nickname: "+Gp),console.log("savedNickname after start of game: "+d),""!=Gp&&null!=Gp?localStorage.getItem("name")!=Gp?(localStorage.removeItem("bestScore"),localStorage.getItem("bestScore"),localStorage.removeItem("score"),localStorage.getItem("score"),localStorage.setItem("name",Gp)):localStorage.setItem("name",Gp):""!=Gp&&null!=Gp||0==im&&(localStorage.clear(),localStorage.getItem("name"),localStorage.getItem("score"),localStorage.getItem("bestScore")),mp.style.display="none",gp.style.display="none",tm.style.display="none",Cp.style.display="none",yp.style.fontSize="17px",yp.style.color="#555",0==im&&1!=Wp?(Zp.forEach((function(e){e.style.display="block",e.style.opacity="0",e.style.animation="appears 0.3s 1.3s ease forwards normal"})),em.forEach((function(e){e.style.display="inline-block",e.style.opacity="0",e.style.animation="appears 0.3s 1.3s ease forwards normal"})),setTimeout((function(){Yp.style.opacity="1",Jp.style.opacity="1"}),1400)):(Zp.forEach((function(e){e.style.display="block",e.style.opacity="1",e.style.animation="appears 0s ease forwards normal"})),em.forEach((function(e){e.style.display="inline-block",e.style.opacity="1",e.style.animation="appears 0s ease forwards normal"}))),Yp.style.animation="shutTopEyeshade 2.5s 0.65s ease infinite normal",Jp.style.animation="shutBottomEyeshade 2.5s 0.65s ease infinite normal",o.style.animation="turnEyes 5s 0.925s ease infinite normal",l.style.display="none",t.style.opacity="0",t.style.display="flex";var i=document.querySelector("header #score span");i.textContent=cm;var r=0;window.requestAnimationFrame((function e(){r+=.03,t.style.opacity="".concat(r),t.style.opacity<"1"&&requestAnimationFrame(e)}));var a=document.querySelector("#timer");a.style.animation="none",a.classList.add("animationIsOn"),a.classList.remove("animationRemoved");var c=Gf[im];a.textContent=c,a.style.animation="timerGrows 1s ".concat(c+1," ease normal"),document.querySelector("header #level span").textContent=im+1,lm.style.animation="none",lm.classList.remove("animationRemoved"),lm.classList.add("animationIsOn");var h=function(e){return e.style.background.includes("stars.svg")},f=setInterval((function(){c-=1,a.textContent=c}),1e3),p=localStorage.getItem("name");console.log("lacalName: "+p);var m=setInterval((function(){if(om.every(h)){if(clearInterval(m),jp(1),function(e){Zf=e}(im+=1),clearInterval(f),a.style.animation="none",a.classList.add("animationRemoved"),a.classList.remove("animationIsOn"),8==im){var t=document.querySelector("#fictive"),n=document.querySelector("#instructions form button");l.style.top="25%",lm.style.display="none",t.style.display="none",yp.style.display="none",n.style.display="block",n.addEventListener("click",(function(){location.reload()})),xp.style.display="block",fm.style.display="block",xp.style.marginBottom="0px",fm.style.marginBottom="-60px",om.forEach((function(t){e.insertBefore(t,Xp),t.style.display="block",t.style.zIndex="8",t.style.width="56px",t.style.height="56px",t.style.top=Math.random()*(e.clientHeight-56)+"px",t.style.left=Math.random()*(e.clientWidth-56)+"px",t.style.animation="fireworks 2s ease forwards normal"}))}else setTimeout((function(){rm=[],om=[],am=[]}),751);if(0!=c){8!=im&&(a.style.animation="timerGrowsAgain 1s ".concat(c," ease normal"),lm.style.opacity="1",lm.style.animation="arrowGrows 1s ".concat(c," ease normal"),lm.classList.add("animationRemoved"),lm.classList.remove("animationIsOn"),setTimeout((function(){lm.style.opacity="0"}),1e3*c));var s=10*c,r=0;setInterval((function(){(r+=1)<=s&&(cm+=1,i.textContent=cm,localStorage.score=cm,localStorage.bestScore<cm&&(localStorage.bestScore=cm,1==Dp&&function(e,t,n,...s){e=Su(e,Au);const i=Su(e.firestore,xu),r=Wu(i);let o;return o="string"==typeof(t=O(t))||t instanceof Fu?function(e,t,n,s,i,r){const o=e.uc(1,t,n),a=[th(t,s,n)],c=[i];if(r.length%2!=0)throw new zi($i.INVALID_ARGUMENT,`Function ${t}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let e=0;e<r.length;e+=2)a.push(th(t,r[e])),c.push(r[e+1]);const l=[],u=jr.empty();for(let e=a.length-1;e>=0;--e)if(!rh(l,a[e])){const t=a[e];let n=c[e];n=O(n);const s=o.nc(t);if(n instanceof Yu)l.push(t);else{const e=Ju(n,s);null!=e&&(l.push(t),u.set(t,e))}}const h=new fr(l);return new zu(u,h,o.fieldTransforms)}(r,"updateDoc",e._key,t,n,s):function(e,t,n,s){const i=e.uc(1,t,n);eh("Data must be an object, but it was:",i,s);const r=[],o=jr.empty();ar(s,((e,s)=>{const a=sh(t,e,n);s=O(s);const c=i.nc(a);if(s instanceof Yu)r.push(a);else{const e=Ju(s,c);null!=e&&(r.push(a),o.set(a,e))}}));const a=new fr(r);return new zu(o,a,i.fieldTransforms)}(r,"updateDoc",e._key,t),bh(i,[o.toMutation(e._key,zo.exists(!0))])}(Ou(Qf,"usersScore",Jf.currentUser.displayName),{Score:Number(localStorage.getItem("bestScore"))}).then((function(){console.log("Score updated")})).catch((function(e){console.log(e.message)}))))}),100)}Zp.forEach((function(e){e.style.display="none"})),Kf.textContent=""==p||null==p?Yf[im]:p+", "+Xf[im],l.style.opacity="0",l.style.display="block",l.style.animation="appears 2s ease forwards normal",Cp.style.display="block",Cp.style.animation="appears 2s ease forwards normal",(""==localStorage.bestScore||null==localStorage.bestScore||localStorage.bestScore<cm)&&(localStorage.bestScore=cm),um=0}else 0==c&&0==om.every(h)&&(clearInterval(m),clearInterval(f),function(){jp(1),Wp=1;var t=359*Math.random(),n=Math.floor(55*Math.random()+26),s=Math.floor(41*Math.random()+35);Qp.forEach((function(e){e.style.background="hsl(".concat(t,", ").concat(n,"%, ").concat(s,"%)")})),setTimeout((function(){a.style.animation="none",a.classList.add("animationRemoved"),a.classList.remove("animationIsOn")}),1e3),om.forEach((function(t){if(t.style.background.includes("figure")){t.style.top=parseInt(t.style.top)+"px",t.style.left=parseInt(t.style.left)+"px";var n=document.createElement("div");n.classList.add("ambulance"),e.insertBefore(n,Xp),n.style.position="absolute",n.style.top=t.style.top,n.style.left=parseInt(t.style.left)-80+"px";var s=function(){n.style.left=parseInt(n.style.left)+1+"px"};setTimeout((function(){var e=0;setInterval((function(){e<20&&(t.style.top=parseInt(t.style.top)+1+"px",e+=1)}),5)}),1200),t.style.animation="figureBecomesMini 0.5s 1.2s ease forwards normal",setInterval((function(){parseInt(n.style.left)<parseInt(t.style.left)&&(n.style.left=parseInt(n.style.left)+1+"px")}),15),setTimeout((function(){if(parseInt(n.style.left)<Bp){var e=setInterval(s,10);n.style.animation="disappears 3s ease forwards normal",setInterval((function(){return clearInterval(e)}),3e3)}}),1700),setTimeout((function(){om.forEach((function(e){e.remove()})),rm=[],om=[],am=[]}),1700),setTimeout((function(){document.querySelectorAll(".ambulance").forEach((function(e){e.remove()}))}),4700)}})),setTimeout((function(){Kf.textContent=""==p||null==p?"You failed! A new variant is spreading now, but don't worry, you can try again and prevent a world catastrophe.":p+", you failed! A new variant is spreading now, but don't worry, you can try again and prevent a world catastrophe.",l.style.opacity="0",l.style.display="block",l.style.top="calc(30% + 4px)",l.style.animation="appears 2.5s ease forwards normal",Cp.style.display="block",Cp.style.animation="appears 2.5s ease forwards normal"}),2e3),cm-=10*um,console.log("userScore"+cm),um=0,localStorage.score=cm}())}),1)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,